                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/parser-perf.anchor:                     
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class ThreadState {                                                                             
      array VC_ThreadState = int[B]                                                                 
                                                                                                    
      volatile boolean stopped N                                                                    
                                                                                                    
       Tid t B                                                                                      
                                                                                                    
      volatile [ThreadState.VC_ThreadState{this}] vc B                                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.stopped == false;                                                               
        assume this.t == Tid.null;                                                                  
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        ensures forall int _i ::0 <= _i && _i < this.vc.length ==> this.vc[_i] == old(_i == tid     
       ? ((_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)             
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i) + 256                                            
       : (_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)              
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i);                                                 
      }                                                                                             
      public void join(ThreadState u) {                                                             
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class ThreadState {                                                                             
      array VC_ThreadState = int[B]                                                                 
                                                                                                    
      volatile boolean stopped N                                                                    
                                                                                                    
       Tid t B                                                                                      
                                                                                                    
      volatile [ThreadState.VC_ThreadState{this}] vc B                                              
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.stopped == false;                                                               
        assume this.t == Tid.null;                                                                  
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        ensures forall int _i ::0 <= _i && _i < this.vc.length ==> this.vc[_i] == old(_i == tid     
       ? ((_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)             
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i) + 256                                            
       : (_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)              
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i);                                                 
      }                                                                                             
      public void join(ThreadState u) {                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class ThreadState {                                                                             
      array VC_ThreadState = int[B]                                                                 
                                                                                                    
      volatile boolean stopped N                                                                    
                                                                                                    
       Tid t B                                                                                      
                                                                                                    
      volatile [ThreadState.VC_ThreadState{this}] vc B                                              
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.stopped == false;                                                               
        assume this.t == Tid.null;                                                                  
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        ensures forall int _i ::0 <= _i && _i < this.vc.length ==> this.vc[_i] == old(_i == tid     
       ? ((_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)             
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i) + 256                                            
       : (_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)              
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i);                                                 
      }                                                                                             
      public void join(ThreadState u) {                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class ThreadState {                                                                             
      array VC_ThreadState = int[B]                                                                 
                                                                                                    
      volatile boolean stopped N                                                                    
                                                                                                    
       Tid t B                                                                                      
                                                                                                    
      volatile [ThreadState.VC_ThreadState{this}] vc B                                              
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.stopped == false;                                                               
        assume this.t == Tid.null;                                                                  
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        ensures forall int _i ::0 <= _i && _i < this.vc.length ==> this.vc[_i] == old(_i == tid     
       ? ((_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)             
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i) + 256                                            
       : (_i < u.vc.length ? u.vc[_i] : _i) > (_i < this.vc.length ? this.vc[_i] : _i)              
         ? _i < u.vc.length ? u.vc[_i] : _i                                                         
         : _i < this.vc.length ? this.vc[_i] : _i);                                                 
      }                                                                                             
      public void join(ThreadState u) {                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl ThreadState ***/                                                                    
                                                                                                    
type ThreadState;                                                                                   
const unique ThreadState.null: ThreadState;                                                         
var ThreadState._state: [ThreadState]State;                                                         
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState.stopped: [ThreadState]bool;                                                         
                                                                                                    
function {:inline} ReadEval.ThreadState.stopped(tid: Tid,this : ThreadState,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := false;                                                                            
 moverPath(_N, 0)                                                                                   
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState.stopped(tid: Tid,this : ThreadState,newValue: bool,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 moverPath(_N, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState.t: [ThreadState]Tid;                                                                
                                                                                                    
function {:inline} ReadEval.ThreadState.t(tid: Tid,this : ThreadState,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState.t(tid: Tid,this : ThreadState,newValue: Tid,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState;                                  
                                                                                                    
function {:inline} ReadEval.ThreadState.vc(tid: Tid,this : ThreadState,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.ThreadState.VC_ThreadState.null;                                            
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState.vc(tid: Tid,this : ThreadState,newValue: Array.ThreadState.VC_ThreadState,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState._lock: [ThreadState]Tid;                                                            
                                                                                                    
function {:inline} ReadEval.ThreadState._lock(tid: Tid,this : ThreadState,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((ThreadState._lock[this]==tid)) then                                                         
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((ThreadState._lock[this]==Tid.null)&&(newValue==tid))) then                                 
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((ThreadState._lock[this]==tid)&&(newValue==Tid.null))) then                                
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState._lock(tid: Tid,this : ThreadState,newValue: Tid,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((ThreadState._lock[this]==tid)) then                                                         
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((ThreadState._lock[this]==Tid.null)&&(newValue==tid))) then                                 
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((ThreadState._lock[this]==tid)&&(newValue==Tid.null))) then                                
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  ThreadState.join(tid:Tid, this : ThreadState, u : ThreadState)                           
modifies ThreadState._state;                                                                        
modifies ThreadState.stopped;                                                                       
modifies ThreadState.t;                                                                             
modifies ThreadState.vc;                                                                            
modifies ThreadState._lock;                                                                         
modifies Array.ThreadState.VC_ThreadState._state;                                                   
modifies Array.ThreadState.VC_ThreadState._elems;                                                   
                                                                                                    
requires ValidTid(tid);                                                                                    // (12.5): Bad tid
requires isSharedAssignable(ThreadState._state[u]);                                                        // (12.5): Parameter VarDecl(ClassType(ThreadState),u) is not global
requires isShared(ThreadState._state[this]);                                                               // (12.5): this is not global
                                                                                                    
requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
                                                                                                    
ensures StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
{                                                                                                   
 var u2903941: ThreadState;                                                                         
 var Array.ThreadState.VC_ThreadState._elems2903941: [Array.ThreadState.VC_ThreadState]([int]int);  
 var ThreadState.t2903941: [ThreadState]Tid;                                                        
 var this2903941: ThreadState;                                                                      
 var ThreadState._lock2903941: [ThreadState]Tid;                                                    
 var ThreadState.vc2903941: [ThreadState]Array.ThreadState.VC_ThreadState;                          
 var Array.ThreadState.VC_ThreadState._state2903941: [Array.ThreadState.VC_ThreadState]State;       
 var $pc2903941: Phase;                                                                             
 var $recorded.state2903941: int;                                                                   
 var ThreadState.stopped2903941: [ThreadState]bool;                                                 
 var tid2903941: Tid;                                                                               
 var ThreadState._state2903941: [ThreadState]State;                                                 
 var Array.ThreadState.VC_ThreadState._length2903941: [Array.ThreadState.VC_ThreadState]int;        
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 // 14.37: // return;                                                                               
                                                                                                    
 assume ThreadState._state2903941 == ThreadState._state && ThreadState.stopped2903941 == ThreadState.stopped && ThreadState.t2903941 == ThreadState.t && ThreadState.vc2903941 == ThreadState.vc && ThreadState._lock2903941 == ThreadState._lock && Array.ThreadState.VC_ThreadState._state2903941 == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems2903941 == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length2903941 == Array.ThreadState.VC_ThreadState._length && u2903941 == u && this2903941 == this && tid2903941 == tid;
 assume $recorded.state2903941 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.ThreadState.VC_ThreadState ***/                                                    
                                                                                                    
type Array.ThreadState.VC_ThreadState;                                                              
const unique Array.ThreadState.VC_ThreadState.null: Array.ThreadState.VC_ThreadState;               
var Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State;               
                                                                                                    
const Array.ThreadState.VC_ThreadState._this : [Array.ThreadState.VC_ThreadState]ThreadState;       
const Array.ThreadState.VC_ThreadState._length : [Array.ThreadState.VC_ThreadState]int;             
var Array.ThreadState.VC_ThreadState._elems  : [Array.ThreadState.VC_ThreadState]([int]int);        
                                                                                                    
axiom (forall $this : Array.ThreadState.VC_ThreadState :: Array.ThreadState.VC_ThreadState._length[$this] >= 0);
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.ThreadState.VC_ThreadState: Spec(ConstExpr(MoverConst(B())),false,List())                  
                                                                                                    
function {:inline} ReadEval.Array.ThreadState.VC_ThreadState(tid: Tid,this : ThreadState,athis : Array.ThreadState.VC_ThreadState,index : int,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.ThreadState.VC_ThreadState: Spec(ConstExpr(MoverConst(B())),false,List())                  
                                                                                                    
function {:inline} WriteEval.Array.ThreadState.VC_ThreadState(tid: Tid,this : ThreadState,athis : Array.ThreadState.VC_ThreadState,index : int,newValue: int,ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 moverPath(_B, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(ThreadState._state: [ThreadState]State,ThreadState.stopped: [ThreadState]bool,ThreadState.t: [ThreadState]Tid,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (bool) {
  true &&                                                                                           
  (forall _i: ThreadState  :: _i == ThreadState.null <==> isNull(ThreadState._state[_i])) &&        
  (forall _i: Array.ThreadState.VC_ThreadState  :: _i == Array.ThreadState.VC_ThreadState.null <==> isNull(Array.ThreadState.VC_ThreadState._state[_i])) &&
  (forall _t: Tid, _i: Array.ThreadState.VC_ThreadState  :: ValidTid(_t) && isAccessible(Array.ThreadState.VC_ThreadState._state[_i], _t) ==> isAccessible(ThreadState._state[Array.ThreadState.VC_ThreadState._this[_i]], _t)) &&
  (forall _i: ThreadState ::  (isShared(ThreadState._state[_i]) ==> isSharedAssignable(Array.ThreadState.VC_ThreadState._state[ThreadState.vc[_i]]))) &&
  (forall _i: ThreadState ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(ThreadState._state[_i],_t) ==> isLocalAssignable(Array.ThreadState.VC_ThreadState._state[ThreadState.vc[_i]], _t)))) &&
  (forall _i: ThreadState :: { ThreadState.vc[_i] } Array.ThreadState.VC_ThreadState._this[ThreadState.vc[_i]] == _i) &&
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,x: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): ThreadState.stopped failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.ThreadState.stopped(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): ThreadState.stopped failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : bool;                                                                             
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.stopped[x];                                                                
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 ThreadState.stopped[x] := havocValue;                                                              
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,x: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): ThreadState.stopped failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : bool;                                                                             
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.stopped[x];                                                                
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.ThreadState.stopped(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): ThreadState.stopped failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,x: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): ThreadState.stopped failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : bool;                                                                             
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == ThreadState.stopped[x];                                                                
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 ThreadState.stopped[x] := havocValue;                                                              
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,x: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): ThreadState.stopped failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.t(u: Tid,x: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): ThreadState.t failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState) 
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.ThreadState.t(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (8.5): ThreadState.t failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState) 
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Tid;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.t[x];                                                                      
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 ThreadState.t[x] := havocValue;                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.t(u: Tid,x: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): ThreadState.t failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState)  
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Tid;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.t[x];                                                                      
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.ThreadState.t(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (8.5): ThreadState.t failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState)      
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.ThreadState.t(u: Tid,x: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): ThreadState.t failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, x: ThreadState)       
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Tid;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == ThreadState.t[x];                                                                      
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 ThreadState.t[x] := havocValue;                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.ThreadState.t(u: Tid,x: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): ThreadState.t failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): ThreadState.vc failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.ThreadState.vc(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (10.5): ThreadState.vc failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 ThreadState.vc[x] := havocValue;                                                                   
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): ThreadState.vc failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.ThreadState.vc(u: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (10.5): ThreadState.vc failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): ThreadState.vc failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 ThreadState.vc[x] := havocValue;                                                                   
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): ThreadState.vc failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := havocValue;                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.ThreadState.VC_ThreadState._elems[x][i] := havocValue;                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.stopped.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.stopped.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.stopped.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.stopped.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[y] := w;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.stopped.ThreadState.stopped(t: Tid, u: Tid, v: bool, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.stopped.ThreadState.t(t: Tid, u: Tid, v: bool, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.stopped.ThreadState.t(t: Tid, u: Tid, v: bool, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.stopped.ThreadState.t(t: Tid, u: Tid, v: bool, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.stopped.ThreadState.t(t: Tid, u: Tid, v: bool, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[y] := w;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.stopped.ThreadState.t(t: Tid, u: Tid, v: bool, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.stopped.ThreadState.vc(t: Tid, u: Tid, v: bool, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.stopped.ThreadState.vc(t: Tid, u: Tid, v: bool, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.stopped.ThreadState.vc(t: Tid, u: Tid, v: bool, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.stopped.ThreadState.vc(t: Tid, u: Tid, v: bool, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.stopped.ThreadState.vc(t: Tid, u: Tid, v: bool, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.stopped;                                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var v_post: bool;                                                                                  
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.stopped.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: bool, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.stopped;                                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.stopped.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: bool, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.stopped;                                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.stopped.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: bool, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.stopped;                                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : bool;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var v_mid: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.stopped[x];                                                                    
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.stopped[x] := tmpV;                                                                    
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.stopped.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: bool, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.stopped;                                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.stopped(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.stopped.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: bool, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.stopped;                                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var v_pre: bool;                                                                                   
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: bool;                                                                                  
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.stopped(t: Tid,x: ThreadState,v: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[x] := v;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.t.ThreadState.stopped(t: Tid, u: Tid, v: Tid, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.t.ThreadState.stopped(t: Tid, u: Tid, v: Tid, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.t.ThreadState.stopped(t: Tid, u: Tid, v: Tid, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.t.ThreadState.stopped(t: Tid, u: Tid, v: Tid, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[y] := w;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.t.ThreadState.stopped(t: Tid, u: Tid, v: Tid, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.t.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.t.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.t.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.t.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[y] := w;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.t.ThreadState.t(t: Tid, u: Tid, v: Tid, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.t.ThreadState.vc(t: Tid, u: Tid, v: Tid, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.t.ThreadState.vc(t: Tid, u: Tid, v: Tid, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.t.ThreadState.vc(t: Tid, u: Tid, v: Tid, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.t.ThreadState.vc(t: Tid, u: Tid, v: Tid, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.t.ThreadState.vc(t: Tid, u: Tid, v: Tid, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.t;                                                                            
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.t.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Tid, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.t;                                                                            
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.t.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Tid, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.t;                                                                            
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.t.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Tid, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.t;                                                                            
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Tid;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Tid;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.t[x];                                                                          
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.t[x] := tmpV;                                                                          
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.t.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Tid, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.t;                                                                            
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.t(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.t.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Tid, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.t;                                                                            
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var v_post: Tid;                                                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.t(t: Tid,x: ThreadState,v: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[x] := v;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.ThreadState.stopped(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.ThreadState.stopped(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.ThreadState.stopped(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var w_mid: bool;                                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.ThreadState.stopped(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[y] := w;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.ThreadState.stopped(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: bool, w0: bool, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.ThreadState.t(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.ThreadState.t(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.ThreadState.t(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.ThreadState.t(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[y] := w;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.ThreadState.t(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Tid, w0: Tid, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.ThreadState.stopped(t: Tid, u: Tid, v: int, w: bool, w0: bool, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.ThreadState.stopped(t: Tid, u: Tid, v: int, w: bool, w0: bool, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var w_mid: bool;                                                                                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.ThreadState.stopped(t: Tid, u: Tid, v: int, w: bool, w0: bool, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w0_mid: bool;                                                                                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var w_mid: bool;                                                                                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.stopped[y] := w;                                                                       
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.ThreadState.stopped(t: Tid, u: Tid, v: int, w: bool, w0: bool, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.stopped(u: Tid,y: ThreadState,w: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.stopped[y] := w;                                                                       
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.ThreadState.stopped(t: Tid, u: Tid, v: int, w: bool, w0: bool, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.stopped;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w_pre: bool;                                                                                   
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var w0_pre: bool;                                                                                  
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var w_post: bool;                                                                                  
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
 var w0_post: bool;                                                                                 
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.stopped(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.ThreadState.t(t: Tid, u: Tid, v: int, w: Tid, w0: Tid, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.ThreadState.t(t: Tid, u: Tid, v: int, w: Tid, w0: Tid, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.ThreadState.t(t: Tid, u: Tid, v: int, w: Tid, w0: Tid, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var w_mid: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w0_mid: Tid;                                                                                   
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.t[y] := w;                                                                             
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.ThreadState.t(t: Tid, u: Tid, v: int, w: Tid, w0: Tid, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.t(u: Tid,y: ThreadState,w: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.t[y] := w;                                                                             
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.ThreadState.t(t: Tid, u: Tid, v: int, w: Tid, w0: Tid, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.t;                                                                            
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w0_pre: Tid;                                                                                   
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var w_pre: Tid;                                                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var w_post: Tid;                                                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var w0_post: Tid;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.t(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var ThreadState.t_mid: [ThreadState]Tid;                                                           
 var x_owner_mid: ThreadState;                                                                      
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var ThreadState.stopped_mid: [ThreadState]bool;                                                    
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_mid == ThreadState._state && ThreadState.stopped_mid == ThreadState.stopped && ThreadState.t_mid == ThreadState.t && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var ThreadState.stopped_pre: [ThreadState]bool;                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var ThreadState.t_pre: [ThreadState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var ThreadState.t_post: [ThreadState]Tid;                                                          
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var ThreadState._state_post: [ThreadState]State;                                                   
 var ThreadState.stopped_post: [ThreadState]bool;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume ThreadState._state_post == ThreadState._state && ThreadState.stopped_post == ThreadState.stopped && ThreadState.t_post == ThreadState.t && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
requires ValidTid(tid);                                                                             
modifies ThreadState._state;                                                                        
modifies ThreadState.stopped;                                                                       
modifies ThreadState.t;                                                                             
modifies ThreadState.vc;                                                                            
modifies ThreadState._lock;                                                                         
modifies Array.ThreadState.VC_ThreadState._state;                                                   
modifies Array.ThreadState.VC_ThreadState._elems;                                                   
ensures StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
ensures Y(tid , old(ThreadState._state), old(ThreadState.stopped), old(ThreadState.t), old(ThreadState.vc), old(ThreadState._lock), old(Array.ThreadState.VC_ThreadState._state), old(Array.ThreadState.VC_ThreadState._elems), old(Array.ThreadState.VC_ThreadState._length) , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
                                                                                                    
// ThreadState.stopped:                                                                             
                                                                                                    
function {:inline} Y_ThreadState.stopped(tid : Tid, this: ThreadState, newValue: bool , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState.stopped(tid: Tid,this: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState.stopped[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState.stopped(tid : Tid, this: ThreadState, newValue: bool , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.stopped.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: bool , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var newValue_yield: bool;                                                                           
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState.stopped(u: Tid,this: ThreadState,newValue: bool,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.stopped(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.stopped.Reflexive(tid : Tid, this: ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.stopped(tid, this, ThreadState.stopped[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.stopped.Transitive(tid : Tid, this: ThreadState, newValue : bool , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var ThreadState.stopped_pre: [ThreadState]bool;                                                     
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var newValue_pre: bool;                                                                             
var $recorded.state_pre: int;                                                                       
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var ThreadState.t_pre: [ThreadState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var ThreadState.t_post: [ThreadState]Tid;                                                           
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var this_post: ThreadState;                                                                         
var newValue_post: bool;                                                                            
var ThreadState._state_post: [ThreadState]State;                                                    
var ThreadState.stopped_post: [ThreadState]bool;                                                    
                                                                                                    
assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState.stopped(tid, this, newValue , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume ThreadState._state_post == ThreadState._state_p && ThreadState.stopped_post == ThreadState.stopped_p && ThreadState.t_post == ThreadState.t_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState.stopped(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// ThreadState.t:                                                                                   
                                                                                                    
function {:inline} Y_ThreadState.t(tid : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState.t(tid: Tid,this: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState.t[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState.t(tid : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.t.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var newValue_yield: Tid;                                                                            
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState.t(u: Tid,this: ThreadState,newValue: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.t(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.t.Reflexive(tid : Tid, this: ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.t(tid, this, ThreadState.t[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.t.Transitive(tid : Tid, this: ThreadState, newValue : Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var ThreadState.stopped_pre: [ThreadState]bool;                                                     
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var ThreadState.t_pre: [ThreadState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var newValue_pre: Tid;                                                                              
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var ThreadState.t_post: [ThreadState]Tid;                                                           
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var this_post: ThreadState;                                                                         
var newValue_post: Tid;                                                                             
var ThreadState._state_post: [ThreadState]State;                                                    
var ThreadState.stopped_post: [ThreadState]bool;                                                    
                                                                                                    
assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState.t(tid, this, newValue , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume ThreadState._state_post == ThreadState._state_p && ThreadState.stopped_post == ThreadState.stopped_p && ThreadState.t_post == ThreadState.t_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState.t(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// ThreadState.vc:                                                                                  
                                                                                                    
function {:inline} Y_ThreadState.vc(tid : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState.vc(tid: Tid,this: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState.vc[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState.vc(tid : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var newValue_yield: Array.ThreadState.VC_ThreadState;                                               
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState.vc(u: Tid,this: ThreadState,newValue: Array.ThreadState.VC_ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.vc(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Reflexive(tid : Tid, this: ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.vc(tid, this, ThreadState.vc[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Transitive(tid : Tid, this: ThreadState, newValue : Array.ThreadState.VC_ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var ThreadState.stopped_pre: [ThreadState]bool;                                                     
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var newValue_pre: Array.ThreadState.VC_ThreadState;                                                 
var ThreadState.t_pre: [ThreadState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var ThreadState.t_post: [ThreadState]Tid;                                                           
var newValue_post: Array.ThreadState.VC_ThreadState;                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var this_post: ThreadState;                                                                         
var ThreadState._state_post: [ThreadState]State;                                                    
var ThreadState.stopped_post: [ThreadState]bool;                                                    
                                                                                                    
assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState.vc(tid, this, newValue , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume ThreadState._state_post == ThreadState._state_p && ThreadState.stopped_post == ThreadState.stopped_p && ThreadState.t_post == ThreadState.t_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState.vc(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// ThreadState._lock:                                                                               
                                                                                                    
function {:inline} Y_ThreadState._lock(tid : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState._lock(tid: Tid,this: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState._lock[this] == newValue))
 &&(((ThreadState._lock[this]==tid)==(newValue==tid)))                                              
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState._lock(tid : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var newValue_yield: Tid;                                                                            
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState._lock(u: Tid,this: ThreadState,newValue: Tid,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
 assume leq(m#moverPath(ReadEval.ThreadState._lock(tid: Tid,this: ThreadState,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _N);
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState._lock(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Reflexive(tid : Tid, this: ThreadState , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var this_yield: ThreadState;                                                                        
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState._lock(tid, this, ThreadState._lock[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Transitive(tid : Tid, this: ThreadState, newValue : Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var ThreadState.stopped_pre: [ThreadState]bool;                                                     
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var ThreadState.t_pre: [ThreadState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var newValue_pre: Tid;                                                                              
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var ThreadState.t_post: [ThreadState]Tid;                                                           
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var this_post: ThreadState;                                                                         
var newValue_post: Tid;                                                                             
var ThreadState._state_post: [ThreadState]State;                                                    
var ThreadState.stopped_post: [ThreadState]bool;                                                    
                                                                                                    
assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState._lock(tid, this, newValue , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume ThreadState._state_post == ThreadState._state_p && ThreadState.stopped_post == ThreadState.stopped_p && ThreadState.t_post == ThreadState.t_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState._lock(tid, this, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// Array.ThreadState.VC_ThreadState:                                                                
                                                                                                    
function {:inline} Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.ThreadState.VC_ThreadState._this[athis];                                         
 ((isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid) && leq(m#moverPath(ReadEval.Array.ThreadState.VC_ThreadState(tid: Tid,Array.ThreadState.VC_ThreadState._this[athis]: ThreadState,athis: Array.ThreadState.VC_ThreadState,index: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (Array.ThreadState.VC_ThreadState._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.ThreadState.VC_ThreadState._this[athis];                                         
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var athis_yield: Array.ThreadState.VC_ThreadState;                                                  
var this_yield: ThreadState;                                                                        
var index_yield: int;                                                                               
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], u);                            
 assume !isError(m#moverPath(WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,Array.ThreadState.VC_ThreadState._this[athis]: ThreadState,athis: Array.ThreadState.VC_ThreadState,index: int,newValue: int,ThreadState._state,ThreadState.stopped,ThreadState.t,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Reflexive(tid : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var ThreadState.stopped_yield: [ThreadState]bool;                                                   
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var ThreadState.t_yield: [ThreadState]Tid;                                                          
var athis_yield: Array.ThreadState.VC_ThreadState;                                                  
var this_yield: ThreadState;                                                                        
var index_yield: int;                                                                               
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid);                          
assume ThreadState._state_yield == ThreadState._state && ThreadState.stopped_yield == ThreadState.stopped && ThreadState.t_yield == ThreadState.t && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, Array.ThreadState.VC_ThreadState._elems[athis][index] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Transitive(tid : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int, newValue : int , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
                                                                                                    
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
 requires ValidTid(tid);                                                                            
{                                                                                                   
var ThreadState.stopped_pre: [ThreadState]bool;                                                     
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var index_pre: int;                                                                                 
var ThreadState.t_pre: [ThreadState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var athis_pre: Array.ThreadState.VC_ThreadState;                                                    
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var ThreadState.t_post: [ThreadState]Tid;                                                           
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var this_post: ThreadState;                                                                         
var index_post: int;                                                                                
var ThreadState._state_post: [ThreadState]State;                                                    
var athis_post: Array.ThreadState.VC_ThreadState;                                                   
var ThreadState.stopped_post: [ThreadState]bool;                                                    
                                                                                                    
assume ThreadState._state_pre == ThreadState._state && ThreadState.stopped_pre == ThreadState.stopped && ThreadState.t_pre == ThreadState.t && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume ThreadState._state_post == ThreadState._state_p && ThreadState.stopped_post == ThreadState.stopped_p && ThreadState.t_post == ThreadState.t_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid);                          
 assume Y(tid , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , ThreadState._state_p, ThreadState.stopped_p, ThreadState.t_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , ThreadState._state: [ThreadState]State, ThreadState.stopped: [ThreadState]bool, ThreadState.t: [ThreadState]Tid, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , ThreadState._state_p: [ThreadState]State, ThreadState.stopped_p: [ThreadState]bool, ThreadState.t_p: [ThreadState]Tid, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 (forall this: ThreadState :: Y_ThreadState.stopped(tid : Tid, this, ThreadState.stopped_p[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: ThreadState :: Y_ThreadState.t(tid : Tid, this, ThreadState.t_p[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: ThreadState :: Y_ThreadState.vc(tid : Tid, this, ThreadState.vc_p[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: ThreadState :: Y_ThreadState._lock(tid : Tid, this, ThreadState._lock_p[this] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall athis: Array.ThreadState.VC_ThreadState, index: int :: Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis, index, Array.ThreadState.VC_ThreadState._elems_p[athis][index] , ThreadState._state, ThreadState.stopped, ThreadState.t, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall _i : ThreadState :: isShared(ThreadState._state[_i]) ==> isShared(ThreadState._state_p[_i]))
 && (forall _i : ThreadState :: isLocal(ThreadState._state[_i], tid) <==> isLocal(ThreadState._state_p[_i], tid))
 && (forall _i : Array.ThreadState.VC_ThreadState :: isShared(Array.ThreadState.VC_ThreadState._state[_i]) ==> isShared(Array.ThreadState.VC_ThreadState._state_p[_i]))
 && (forall _i : Array.ThreadState.VC_ThreadState :: Array.ThreadState.VC_ThreadState._length[_i] == Array.ThreadState.VC_ThreadState._length_p[_i])
 && (forall _i : Array.ThreadState.VC_ThreadState :: isLocal(Array.ThreadState.VC_ThreadState._state[_i], tid) <==> isLocal(Array.ThreadState.VC_ThreadState._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 504.1-547.2: (Method:12.5)
// 515.1-515.24: (12.5): Bad tid
// 516.1-516.52: (12.5): Parameter VarDecl(ClassType(ThreadState),u) is not global
// 517.1-517.45: (12.5): this is not global
// 541.2-546.9: (class anchor.sink.Return:14.37)
// 671.1-671.34: (6.5): ThreadState.stopped failed Write-Write Right-Mover Check
// 738.1-738.30: (6.5): ThreadState.stopped failed Write-Read Right-Mover Check
// 809.1-809.34: (6.5): ThreadState.stopped failed Write-Write Left-Mover Check
// 877.1-877.30: (6.5): ThreadState.stopped failed Write-Read Left-Mover Check
// 942.1-942.34: (6.5): ThreadState.stopped failed Read-Write Right-Mover Check
// 1010.1-1010.34: (6.5): ThreadState.stopped failed Read-Write Left-Mover Check
// 1077.1-1077.34: (8.5): ThreadState.t failed Write-Write Right-Mover Check
// 1144.1-1144.30: (8.5): ThreadState.t failed Write-Read Right-Mover Check
// 1215.1-1215.34: (8.5): ThreadState.t failed Write-Write Left-Mover Check
// 1283.1-1283.30: (8.5): ThreadState.t failed Write-Read Left-Mover Check
// 1348.1-1348.34: (8.5): ThreadState.t failed Read-Write Right-Mover Check
// 1416.1-1416.34: (8.5): ThreadState.t failed Read-Write Left-Mover Check
// 1483.1-1483.34: (10.5): ThreadState.vc failed Write-Write Right-Mover Check
// 1550.1-1550.30: (10.5): ThreadState.vc failed Write-Read Right-Mover Check
// 1621.1-1621.34: (10.5): ThreadState.vc failed Write-Write Left-Mover Check
// 1689.1-1689.30: (10.5): ThreadState.vc failed Write-Read Left-Mover Check
// 1754.1-1754.34: (10.5): ThreadState.vc failed Read-Write Right-Mover Check
// 1822.1-1822.34: (10.5): ThreadState.vc failed Read-Write Left-Mover Check
// 1895.1-1895.34: (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Right-Mover Check
// 1968.1-1968.30: (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Right-Mover Check
// 2045.1-2045.34: (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Left-Mover Check
// 2119.1-2119.30: (4.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Left-Mover Check
// 2190.1-2190.34: (4.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Right-Mover Check
// 2264.1-2264.34: (4.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Left-Mover Check
// 2343.1-2343.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
// 2344.1-2344.101: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
// 2345.1-2345.158: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
// 2453.1-2453.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case C)
// 2566.1-2566.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case D)
// 2567.1-2567.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.stopped (case R)
// 2646.1-2646.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case F)
// 2647.1-2647.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case H)
// 2648.1-2648.146: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.stopped (case I)
// 2726.1-2726.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case J)
// 2727.1-2727.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case K)
// 2728.1-2728.99: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.stopped (case L)
// 2808.1-2808.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
// 2809.1-2809.101: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
// 2810.1-2810.158: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
// 2918.1-2918.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case C)
// 3031.1-3031.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case D)
// 3032.1-3032.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case R)
// 3111.1-3111.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case F)
// 3112.1-3112.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case H)
// 3113.1-3113.146: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.t (case I)
// 3191.1-3191.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case J)
// 3192.1-3192.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case K)
// 3193.1-3193.99: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.stopped (case L)
// 3273.1-3273.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
// 3274.1-3274.101: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
// 3275.1-3275.158: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
// 3383.1-3383.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case C)
// 3496.1-3496.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case D)
// 3497.1-3497.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case R)
// 3576.1-3576.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case F)
// 3577.1-3577.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case H)
// 3578.1-3578.146: (6.5): ThreadState.stopped is not Read-Write Stable with respect to ThreadState.vc (case I)
// 3656.1-3656.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case J)
// 3657.1-3657.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case K)
// 3658.1-3658.99: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.stopped (case L)
// 3743.1-3743.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.1)
// 3744.1-3744.101: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.2)
// 3745.1-3745.156: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case A.3)
// 3860.1-3860.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 3980.1-3980.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 3981.1-3981.144: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 4065.1-4065.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 4066.1-4066.136: (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 4067.1-4067.144: (6.5): ThreadState.stopped is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 4150.1-4150.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case J)
// 4151.1-4151.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case K)
// 4152.1-4152.99: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.stopped (case L)
// 4232.1-4232.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.1)
// 4233.1-4233.101: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.2)
// 4234.1-4234.158: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.t (case A.3)
// 4342.1-4342.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case C)
// 4455.1-4455.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case D)
// 4456.1-4456.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.stopped (case R)
// 4535.1-4535.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case F)
// 4536.1-4536.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case H)
// 4537.1-4537.146: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.stopped (case I)
// 4615.1-4615.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case J)
// 4616.1-4616.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case K)
// 4617.1-4617.99: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.t (case L)
// 4697.1-4697.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.1)
// 4698.1-4698.101: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.2)
// 4699.1-4699.158: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case A.3)
// 4807.1-4807.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case C)
// 4920.1-4920.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case D)
// 4921.1-4921.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.t (case R)
// 5000.1-5000.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case F)
// 5001.1-5001.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case H)
// 5002.1-5002.146: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.t (case I)
// 5080.1-5080.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case J)
// 5081.1-5081.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case K)
// 5082.1-5082.99: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.t (case L)
// 5162.1-5162.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.1)
// 5163.1-5163.101: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.2)
// 5164.1-5164.158: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case A.3)
// 5272.1-5272.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case C)
// 5385.1-5385.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case D)
// 5386.1-5386.144: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case R)
// 5465.1-5465.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case F)
// 5466.1-5466.136: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case H)
// 5467.1-5467.146: (8.5): ThreadState.t is not Read-Write Stable with respect to ThreadState.vc (case I)
// 5545.1-5545.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case J)
// 5546.1-5546.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case K)
// 5547.1-5547.99: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.t (case L)
// 5632.1-5632.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.1)
// 5633.1-5633.101: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.2)
// 5634.1-5634.156: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case A.3)
// 5749.1-5749.140: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 5869.1-5869.144: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 5870.1-5870.144: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 5954.1-5954.136: (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 5955.1-5955.136: (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 5956.1-5956.144: (8.5): ThreadState.t is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 6039.1-6039.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case J)
// 6040.1-6040.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case K)
// 6041.1-6041.99: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.t (case L)
// 6121.1-6121.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 6122.1-6122.101: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 6123.1-6123.158: (6.5): ThreadState.stopped is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 6231.1-6231.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case C)
// 6344.1-6344.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case D)
// 6345.1-6345.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.stopped (case R)
// 6424.1-6424.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case F)
// 6425.1-6425.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case H)
// 6426.1-6426.146: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.stopped (case I)
// 6504.1-6504.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case J)
// 6505.1-6505.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case K)
// 6506.1-6506.99: (6.5): ThreadState.stopped is not Write-Read Stable with respect to ThreadState.vc (case L)
// 6586.1-6586.140: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 6587.1-6587.101: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 6588.1-6588.158: (8.5): ThreadState.t is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 6696.1-6696.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case C)
// 6809.1-6809.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case D)
// 6810.1-6810.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.t (case R)
// 6889.1-6889.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case F)
// 6890.1-6890.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case H)
// 6891.1-6891.146: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.t (case I)
// 6969.1-6969.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case J)
// 6970.1-6970.136: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case K)
// 6971.1-6971.99: (8.5): ThreadState.t is not Write-Read Stable with respect to ThreadState.vc (case L)
// 7051.1-7051.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 7052.1-7052.101: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 7053.1-7053.158: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 7161.1-7161.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
// 7274.1-7274.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
// 7275.1-7275.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
// 7354.1-7354.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
// 7355.1-7355.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
// 7356.1-7356.146: (10.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
// 7434.1-7434.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
// 7435.1-7435.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
// 7436.1-7436.99: (10.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
// 7521.1-7521.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 7522.1-7522.101: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 7523.1-7523.156: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 7638.1-7638.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 7758.1-7758.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 7759.1-7759.144: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 7843.1-7843.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 7844.1-7844.136: (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 7845.1-7845.144: (10.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 7928.1-7928.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case J)
// 7929.1-7929.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case K)
// 7930.1-7930.99: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case L)
// 8015.1-8015.140: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 8016.1-8016.101: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 8017.1-8017.156: (6.5): ThreadState.stopped is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 8132.1-8132.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case C)
// 8252.1-8252.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case D)
// 8253.1-8253.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.stopped (case R)
// 8337.1-8337.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case F)
// 8338.1-8338.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case H)
// 8339.1-8339.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.stopped (case I)
// 8422.1-8422.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 8423.1-8423.136: (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 8424.1-8424.99: (6.5): ThreadState.stopped is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 8509.1-8509.140: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 8510.1-8510.101: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 8511.1-8511.156: (8.5): ThreadState.t is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 8626.1-8626.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case C)
// 8746.1-8746.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case D)
// 8747.1-8747.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.t (case R)
// 8831.1-8831.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case F)
// 8832.1-8832.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case H)
// 8833.1-8833.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.t (case I)
// 8916.1-8916.136: (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 8917.1-8917.136: (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 8918.1-8918.99: (8.5): ThreadState.t is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 9003.1-9003.140: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 9004.1-9004.101: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 9005.1-9005.156: (10.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 9120.1-9120.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case C)
// 9240.1-9240.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case D)
// 9241.1-9241.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case R)
// 9325.1-9325.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case F)
// 9326.1-9326.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case H)
// 9327.1-9327.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case I)
// 9410.1-9410.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 9411.1-9411.136: (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 9412.1-9412.99: (10.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 9502.1-9502.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 9503.1-9503.101: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 9504.1-9504.156: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 9626.1-9626.140: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 9753.1-9753.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 9754.1-9754.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 9843.1-9843.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 9844.1-9844.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 9845.1-9845.144: (4.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 9933.1-9933.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 9934.1-9934.136: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 9935.1-9935.99: (4.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 9970.1-9994.2: (6.5): yields_as clause for ThreadState.stopped is not valid
// 9999.1-10018.2: (6.5): yields_as clause for ThreadState.stopped is not reflexive
// 10024.1-10062.2: (6.5): yields_as clause for ThreadState.stopped is not transitive
// 10081.1-10105.2: (8.5): yields_as clause for ThreadState.t is not valid
// 10110.1-10129.2: (8.5): yields_as clause for ThreadState.t is not reflexive
// 10135.1-10173.2: (8.5): yields_as clause for ThreadState.t is not transitive
// 10192.1-10216.2: (10.5): yields_as clause for ThreadState.vc is not valid
// 10221.1-10240.2: (10.5): yields_as clause for ThreadState.vc is not reflexive
// 10246.1-10284.2: (10.5): yields_as clause for ThreadState.vc is not transitive
// 10304.1-10328.2: (7.32): yields_as clause for ThreadState._lock is not valid
// 10333.1-10352.2: (7.32): yields_as clause for ThreadState._lock is not reflexive
// 10358.1-10396.2: (7.32): yields_as clause for ThreadState._lock is not transitive
// 10414.1-10442.2: (4.5): yields_as clause for Array.ThreadState.VC_ThreadState is not valid
// 10443.1-10468.2: (4.5): yields_as clause for Array.ThreadState.VC_ThreadState is not reflexive
// 10473.1-10515.2: (4.5): yields_as clause for Array.ThreadState.VC_ThreadState is not transitive
