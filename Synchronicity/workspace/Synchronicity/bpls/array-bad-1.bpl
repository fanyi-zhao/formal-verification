                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/fzhao12/Synchronicity/workspace/Synchronicity/tests/array-bad-1.sink:                        
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array A = int[isRead ? B : B]                                                                 
                                                                                                    
      array S = int[isRead ? N : N]                                                                 
                                                                                                    
      array T = int[index % 2 == 0 ? B : E]                                                         
                                                                                                    
       [Cow.T{this}] a N                                                                            
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f([Cow.S{this}] b) {                                                              
        [Cow.A{this}] a;                                                                            
        int x;                                                                                      
        x = 0;                                                                                      
        int y;                                                                                      
        y = 10;                                                                                     
        a = new [Cow.A{this}](y);                                                                   
        a[x] := x;                                                                                  
        x := a[x];                                                                                  
        x = a.length + 1;                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array A = int[isRead ? B : B]                                                                 
                                                                                                    
      array S = int[isRead ? N : N]                                                                 
                                                                                                    
      array T = int[index % 2 == 0 ? B : E]                                                         
                                                                                                    
       [Cow.T{this}] a N                                                                            
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f([Cow.S{this}] b) {                                                              
        [Cow.A{this}] a;                                                                            
        int x;                                                                                      
        x = 0;                                                                                      
        int y;                                                                                      
        y = 10;                                                                                     
        a = new [Cow.A{this}](y);                                                                   
        a[x] := x;                                                                                  
        x := a[x];                                                                                  
        x = a.length + 1;                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array A = int[isRead ? B : B]                                                                 
                                                                                                    
      array S = int[isRead ? N : N]                                                                 
                                                                                                    
      array T = int[index % 2 == 0 ? B : E]                                                         
                                                                                                    
       [Cow.T{this}] a N                                                                            
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f([Cow.S{this}] b) {                                                              
        [Cow.A{this}] a;                                                                            
        int x;                                                                                      
        x = 0;                                                                                      
        int y;                                                                                      
        y = 10;                                                                                     
        a = new [Cow.A{this}](y);                                                                   
        a[x] := x;                                                                                  
        x := a[x];                                                                                  
        x = a.length + 1;                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array A = int[isRead ? B : B]                                                                 
                                                                                                    
      array S = int[isRead ? N : N]                                                                 
                                                                                                    
      array T = int[index % 2 == 0 ? B : E]                                                         
                                                                                                    
       [Cow.T{this}] a N                                                                            
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f([Cow.S{this}] b) {                                                              
        [Cow.A{this}] a;                                                                            
        int x;                                                                                      
        x = 0;                                                                                      
        int y;                                                                                      
        y = 10;                                                                                     
        a = new [Cow.A{this}](y);                                                                   
        a[x] := x;                                                                                  
        x := a[x];                                                                                  
        x = a.length + 1;                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Cow ***/                                                                            
                                                                                                    
type Cow;                                                                                           
const unique Cow.null: Cow;                                                                         
var Cow._state: [Cow]State;                                                                         
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow.a: [Cow]Array.Cow.T;                                                                        
                                                                                                    
function {:inline} ReadEval.Cow.a(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Cow.T.null;                                                                 
 moverPath(_N, 0)                                                                                   
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow.a(tid: Tid,this : Cow,newValue: Array.Cow.T,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 moverPath(_N, 0)                                                                                   
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow._lock: [Cow]Tid;                                                                            
                                                                                                    
function {:inline} ReadEval.Cow._lock(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow._lock(tid: Tid,this : Cow,newValue: Tid,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Cow.f(tid:Tid, this : Cow, b : Array.Cow.S)                                              
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.A._state;                                                                        
modifies Array.Cow.A._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
                                                                                                    
requires ValidTid(tid);                                                                                    // (9.5): Bad tid
requires isSharedAssignable(Array.Cow.S._state[b]);                                                        // (9.5): Parameter VarDecl(ArrayType(Cow,S,VarAccess(this)),b) is not global
requires isShared(Cow._state[this]);                                                                       // (9.5): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
{                                                                                                   
 var a: Array.Cow.A;                                                                                
 var Array.Cow.T._length97494: [Array.Cow.T]int;                                                    
 var Cow._state97507: [Cow]State;                                                                   
 var Array.Cow.S._elems97494: [Array.Cow.S]([int]int);                                              
 var moverPath97494: MoverPath;                                                                     
 var path97494: int;                                                                                
 var Array.Cow.A._elems97498: [Array.Cow.A]([int]int);                                              
 var Array.Cow.T._elems97507: [Array.Cow.T]([int]int);                                              
 var $pc97507: Phase;                                                                               
 var Cow._lock97507: [Cow]Tid;                                                                      
 var b97507: Array.Cow.S;                                                                           
 var x: int;                                                                                        
 var $recorded.state97494: int;                                                                     
 var Array.Cow.T._length97507: [Array.Cow.T]int;                                                    
 var Cow._lock97498: [Cow]Tid;                                                                      
 var y97507: int;                                                                                   
 var Array.Cow.A._state97498: [Array.Cow.A]State;                                                   
 var path97498: int;                                                                                
 var x97498: int;                                                                                   
 var Cow.a97494: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.S._length97494: [Array.Cow.S]int;                                                    
 var $recorded.state97498: int;                                                                     
 var Array.Cow.T._state97498: [Array.Cow.T]State;                                                   
 var Array.Cow.S._state97494: [Array.Cow.S]State;                                                   
 var tid97498: Tid;                                                                                 
 var Array.Cow.A._length97507: [Array.Cow.A]int;                                                    
 var Array.Cow.T._elems97498: [Array.Cow.T]([int]int);                                              
 var a97498: Array.Cow.A;                                                                           
 var $recorded.state97507: int;                                                                     
 var moverPath97498: MoverPath;                                                                     
 var Array.Cow.T._elems97494: [Array.Cow.T]([int]int);                                              
 var Cow._lock97494: [Cow]Tid;                                                                      
 var Cow._state97498: [Cow]State;                                                                   
 var tid97507: Tid;                                                                                 
 var Array.Cow.S._elems97498: [Array.Cow.S]([int]int);                                              
 var a97494: Array.Cow.A;                                                                           
 var x97507: int;                                                                                   
 var Array.Cow.A._elems97507: [Array.Cow.A]([int]int);                                              
 var x97494: int;                                                                                   
 var Array.Cow.T._length97498: [Array.Cow.T]int;                                                    
 var Array.Cow.S._length97507: [Array.Cow.S]int;                                                    
 var Cow.a97498: [Cow]Array.Cow.T;                                                                  
 var b97498: Array.Cow.S;                                                                           
 var y: int;                                                                                        
 var Array.Cow.A._length97494: [Array.Cow.A]int;                                                    
 var tid97494: Tid;                                                                                 
 var $pc97494: Phase;                                                                               
 var Array.Cow.A._state97507: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems97494: [Array.Cow.A]([int]int);                                              
 var mover97494: Mover;                                                                             
 var Array.Cow.T._state97494: [Array.Cow.T]State;                                                   
 var this97507: Cow;                                                                                
 var this97498: Cow;                                                                                
 var y97498: int;                                                                                   
 var Array.Cow.S._length97498: [Array.Cow.S]int;                                                    
 var y97494: int;                                                                                   
 var Array.Cow.S._state97498: [Array.Cow.S]State;                                                   
 var this97494: Cow;                                                                                
 var Cow.a97507: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.A._state97494: [Array.Cow.A]State;                                                   
 var b97494: Array.Cow.S;                                                                           
 var mover97498: Mover;                                                                             
 var Array.Cow.A._length97498: [Array.Cow.A]int;                                                    
 var Array.Cow.T._state97507: [Array.Cow.T]State;                                                   
 var $pc97498: Phase;                                                                               
 var Array.Cow.S._elems97507: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._state97507: [Array.Cow.S]State;                                                   
 var a97507: Array.Cow.A;                                                                           
 var Cow._state97494: [Cow]State;                                                                   
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 // 10.8: [Cow.A{this}] a;                                                                          
                                                                                                    
                                                                                                    
 // 11.8: int x;                                                                                    
                                                                                                    
                                                                                                    
 // 11.16: x = 0;                                                                                   
                                                                                                    
 x := 0;                                                                                            
                                                                                                    
 // 12.8: int y;                                                                                    
                                                                                                    
                                                                                                    
 // 12.16: y = 10;                                                                                  
                                                                                                    
 y := 10;                                                                                           
                                                                                                    
 // 13.8: a = new [Cow.A{this}](y);                                                                 
                                                                                                    
 havoc a;                                                                                           
 assume isFresh(Array.Cow.A._state[a]);                                                             
 assume Array.Cow.A._length[a] == y;                                                                
 assume Array.Cow.A._this[a] == this;                                                               
 Array.Cow.A._state[a] := LOCAL(tid);                                                               
 assume (forall _i : int :: 0 <= _i ==> Array.Cow.A._elems[a][_i] == 0);                            
                                                                                                    
 // 14.8: a[x] := x;                                                                                
                                                                                                    
                                                                                                    
 moverPath97494 := WriteEval.Array.Cow.A(tid: Tid,this: Cow,a: Array.Cow.A,x: int,x: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 mover97494 := m#moverPath(moverPath97494);                                                         
 path97494 := p#moverPath(moverPath97494);                                                          
 assume Cow._state97494 == Cow._state && Cow.a97494 == Cow.a && Cow._lock97494 == Cow._lock && Array.Cow.A._state97494 == Array.Cow.A._state && Array.Cow.A._elems97494 == Array.Cow.A._elems && Array.Cow.A._length97494 == Array.Cow.A._length && Array.Cow.S._state97494 == Array.Cow.S._state && Array.Cow.S._elems97494 == Array.Cow.S._elems && Array.Cow.S._length97494 == Array.Cow.S._length && Array.Cow.T._state97494 == Array.Cow.T._state && Array.Cow.T._elems97494 == Array.Cow.T._elems && Array.Cow.T._length97494 == Array.Cow.T._length && y97494 == y && x97494 == x && a97494 == a && b97494 == b && this97494 == this && tid97494 == tid && $pc97494 == $pc;
 assume $recorded.state97494 == 1;                                                                  
 if ($pc == PreCommit) {                                                                            
  assume a != Array.Cow.A.null;                                                                     
 } else {                                                                                           
  assert a != Array.Cow.A.null;                                                                            // (14.8): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= x;                                                                                    
 } else {                                                                                           
  assert 0 <= x;                                                                                           // (14.8): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume x < Array.Cow.A._length[a];                                                                
 } else {                                                                                           
  assert x < Array.Cow.A._length[a];                                                                       // (14.8): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover97494);                                                                
 assert $pc != PhaseError;                                                                                 // (14.8): Reduction failure
 Array.Cow.A._elems[a][x] := x;                                                                     
                                                                                                    
 // 15.8: x := a[x];                                                                                
                                                                                                    
                                                                                                    
 moverPath97498 := ReadEval.Array.Cow.A(tid: Tid,this: Cow,a: Array.Cow.A,x: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 mover97498 := m#moverPath(moverPath97498);                                                         
 path97498 := p#moverPath(moverPath97498);                                                          
 assume Cow._state97498 == Cow._state && Cow.a97498 == Cow.a && Cow._lock97498 == Cow._lock && Array.Cow.A._state97498 == Array.Cow.A._state && Array.Cow.A._elems97498 == Array.Cow.A._elems && Array.Cow.A._length97498 == Array.Cow.A._length && Array.Cow.S._state97498 == Array.Cow.S._state && Array.Cow.S._elems97498 == Array.Cow.S._elems && Array.Cow.S._length97498 == Array.Cow.S._length && Array.Cow.T._state97498 == Array.Cow.T._state && Array.Cow.T._elems97498 == Array.Cow.T._elems && Array.Cow.T._length97498 == Array.Cow.T._length && y97498 == y && x97498 == x && a97498 == a && b97498 == b && this97498 == this && tid97498 == tid && $pc97498 == $pc;
 assume $recorded.state97498 == 1;                                                                  
 if ($pc == PreCommit) {                                                                            
  assume a != Array.Cow.A.null;                                                                     
 } else {                                                                                           
  assert a != Array.Cow.A.null;                                                                            // (15.8): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= x;                                                                                    
 } else {                                                                                           
  assert 0 <= x;                                                                                           // (15.8): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume x < Array.Cow.A._length[a];                                                                
 } else {                                                                                           
  assert x < Array.Cow.A._length[a];                                                                       // (15.8): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover97498);                                                                
 assert $pc != PhaseError;                                                                                 // (15.8): Reduction failure
 x := Array.Cow.A._elems[a][x];                                                                     
                                                                                                    
 // 16.21: x = a.length + 1;                                                                        
                                                                                                    
 x := (Array.Cow.A._length[a]+1);                                                                   
                                                                                                    
 // 9.26: // return;                                                                                
                                                                                                    
 assume Cow._state97507 == Cow._state && Cow.a97507 == Cow.a && Cow._lock97507 == Cow._lock && Array.Cow.A._state97507 == Array.Cow.A._state && Array.Cow.A._elems97507 == Array.Cow.A._elems && Array.Cow.A._length97507 == Array.Cow.A._length && Array.Cow.S._state97507 == Array.Cow.S._state && Array.Cow.S._elems97507 == Array.Cow.S._elems && Array.Cow.S._length97507 == Array.Cow.S._length && Array.Cow.T._state97507 == Array.Cow.T._state && Array.Cow.T._elems97507 == Array.Cow.T._elems && Array.Cow.T._length97507 == Array.Cow.T._length && y97507 == y && x97507 == x && a97507 == a && b97507 == b && this97507 == this && tid97507 == tid;
 assume $recorded.state97507 == 1;                                                                  
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Cow.A ***/                                                                         
                                                                                                    
type Array.Cow.A;                                                                                   
const unique Array.Cow.A.null: Array.Cow.A;                                                         
var Array.Cow.A._state: [Array.Cow.A]State;                                                         
                                                                                                    
const Array.Cow.A._this : [Array.Cow.A]Cow;                                                         
const Array.Cow.A._length : [Array.Cow.A]int;                                                       
var Array.Cow.A._elems  : [Array.Cow.A]([int]int);                                                  
                                                                                                    
axiom (forall $this : Array.Cow.A :: Array.Cow.A._length[$this] >= 0);                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Cow.A: Spec(Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(B()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Cow.A(tid: Tid,this : Cow,athis : Array.Cow.A,index : int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_B, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Cow.A: Spec(Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(B()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Cow.A(tid: Tid,this : Cow,athis : Array.Cow.A,index : int,newValue: int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_B, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Cow.S ***/                                                                         
                                                                                                    
type Array.Cow.S;                                                                                   
const unique Array.Cow.S.null: Array.Cow.S;                                                         
var Array.Cow.S._state: [Array.Cow.S]State;                                                         
                                                                                                    
const Array.Cow.S._this : [Array.Cow.S]Cow;                                                         
const Array.Cow.S._length : [Array.Cow.S]int;                                                       
var Array.Cow.S._elems  : [Array.Cow.S]([int]int);                                                  
                                                                                                    
axiom (forall $this : Array.Cow.S :: Array.Cow.S._length[$this] >= 0);                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Cow.S: Spec(Cond(VarAccess(isRead),ConstExpr(MoverConst(N())),ConstExpr(MoverConst(N()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Cow.S(tid: Tid,this : Cow,athis : Array.Cow.S,index : int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isRead) then                                                                                   
  moverPath(_N, 1)                                                                                  
 else                                                                                               
  moverPath(_N, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Cow.S: Spec(Cond(VarAccess(isRead),ConstExpr(MoverConst(N())),ConstExpr(MoverConst(N()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Cow.S(tid: Tid,this : Cow,athis : Array.Cow.S,index : int,newValue: int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isRead) then                                                                                   
  moverPath(_N, 1)                                                                                  
 else                                                                                               
  moverPath(_N, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Cow.T ***/                                                                         
                                                                                                    
type Array.Cow.T;                                                                                   
const unique Array.Cow.T.null: Array.Cow.T;                                                         
var Array.Cow.T._state: [Array.Cow.T]State;                                                         
                                                                                                    
const Array.Cow.T._this : [Array.Cow.T]Cow;                                                         
const Array.Cow.T._length : [Array.Cow.T]int;                                                       
var Array.Cow.T._elems  : [Array.Cow.T]([int]int);                                                  
                                                                                                    
axiom (forall $this : Array.Cow.T :: Array.Cow.T._length[$this] >= 0);                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Cow.T: Spec(Cond(BinaryExpr(BinaryExpr(VarAccess(index),ConstExpr(IntConst(2)),Mod()),ConstExpr(IntConst(0)),EQ()),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Cow.T(tid: Tid,this : Cow,athis : Array.Cow.T,index : int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if ((MOD(index, 2)==0)) then                                                                       
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Cow.T: Spec(Cond(BinaryExpr(BinaryExpr(VarAccess(index),ConstExpr(IntConst(2)),Mod()),ConstExpr(IntConst(0)),EQ()),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Cow.T(tid: Tid,this : Cow,athis : Array.Cow.T,index : int,newValue: int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((MOD(index, 2)==0)) then                                                                       
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow._lock: [Cow]Tid,Array.Cow.A._state: [Array.Cow.A]State,Array.Cow.A._elems: [Array.Cow.A]([int]int),Array.Cow.A._length: [Array.Cow.A]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Cow  :: _i == Cow.null <==> isNull(Cow._state[_i])) &&                                
  (forall _i: Array.Cow.A  :: _i == Array.Cow.A.null <==> isNull(Array.Cow.A._state[_i])) &&        
  (forall _i: Array.Cow.S  :: _i == Array.Cow.S.null <==> isNull(Array.Cow.S._state[_i])) &&        
  (forall _i: Array.Cow.T  :: _i == Array.Cow.T.null <==> isNull(Array.Cow.T._state[_i])) &&        
  (forall _t: Tid, _i: Array.Cow.A  :: ValidTid(_t) && isAccessible(Array.Cow.A._state[_i], _t) ==> isAccessible(Cow._state[Array.Cow.A._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Cow.S  :: ValidTid(_t) && isAccessible(Array.Cow.S._state[_i], _t) ==> isAccessible(Cow._state[Array.Cow.S._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Cow.T  :: ValidTid(_t) && isAccessible(Array.Cow.T._state[_i], _t) ==> isAccessible(Cow._state[Array.Cow.T._this[_i]], _t)) &&
  (forall _i: Cow ::  (isShared(Cow._state[_i]) ==> isSharedAssignable(Array.Cow.T._state[Cow.a[_i]]))) &&
  (forall _i: Cow ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Cow._state[_i],_t) ==> isLocalAssignable(Array.Cow.T._state[Cow.a[_i]], _t)))) &&
  (forall _i: Cow :: { Cow.a[_i] } Array.Cow.T._this[Cow.a[_i]] == _i) &&                           
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.5): Cow.a failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow.a(u: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (7.5): Cow.a failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.a[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow.a[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.5): Cow.a failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)  
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.a[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow.a(u: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (7.5): Cow.a failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)      
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.5): Cow.a failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)       
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Cow.a[x];                                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow.a[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.5): Cow.a failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.A failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (3.5): Array Array.Cow.A failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.A._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Cow.A._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.A failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.A._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (3.5): Array Array.Cow.A failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.A failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.A, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[x], u);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Array.Cow.A._elems[x][i];                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Cow.A._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Cow.A(u: Tid,x_owner: Cow,x: Array.Cow.A,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.A failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.Cow.S failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.Cow.S failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Cow.S._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Array Array.Cow.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (5.5): Array Array.Cow.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Array Array.Cow.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (5.5): Array Array.Cow.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Array Array.Cow.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Cow.T._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Array Array.Cow.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Array.Cow.A._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var y_pre: Array.Cow.A;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Array.Cow.A._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var y_pre: Array.Cow.A;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Array.Cow.A._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var y_pre: Array.Cow.A;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Array.Cow.A._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var y_pre: Array.Cow.A;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Array.Cow.A._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var y_pre: Array.Cow.A;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.A._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.A, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.A._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.A._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.A, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.A._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.A._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.A, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.A._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.A._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.A, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.A._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.A._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.A, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.A._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.A._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.A._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.A._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.A._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.A._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.A._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.A._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.A._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.A._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.A._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.A._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.A._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.A._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var x_mid: Array.Cow.A;                                                                            
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.A._elems[x][i];                                                                  
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.A._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.A._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.A._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.A, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.A._state[x], t);                                                   
 requires Array.Cow.A._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.A._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var x_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var x_post: Array.Cow.A;                                                                           
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.A(t: Tid,x_owner: Cow,x: Array.Cow.A,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var $pc_mid: Phase;                                                                                
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var y_mid: Array.Cow.A;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.A._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.A._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Array.Cow.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.A, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.A._state[y], u);                                                   
 requires Array.Cow.A._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.A._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Array.Cow.A;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Array.Cow.A;                                                                           
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.A(u: Tid,y_owner: Cow,y: Array.Cow.A,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Cow.A._state_mid: [Array.Cow.A]State;                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.A._elems_mid: [Array.Cow.A]([int]int);                                               
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Array.Cow.A._length_mid: [Array.Cow.A]int;                                                     
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow._lock_mid == Cow._lock && Array.Cow.A._state_mid == Array.Cow.A._state && Array.Cow.A._elems_mid == Array.Cow.A._elems && Array.Cow.A._length_mid == Array.Cow.A._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                    
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                     
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                               
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Array.Cow.A._state_post: [Array.Cow.A]State;                                                   
 var x_owner_post: Cow;                                                                             
 var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                              
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var Array.Cow.A._length_post: [Array.Cow.A]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow._lock_post == Cow._lock && Array.Cow.A._state_post == Array.Cow.A._state && Array.Cow.A._elems_post == Array.Cow.A._elems && Array.Cow.A._length_post == Array.Cow.A._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
requires ValidTid(tid);                                                                             
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.A._state;                                                                        
modifies Array.Cow.A._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
ensures StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
ensures Y(tid , old(Cow._state), old(Cow.a), old(Cow._lock), old(Array.Cow.A._state), old(Array.Cow.A._elems), old(Array.Cow.A._length), old(Array.Cow.S._state), old(Array.Cow.S._elems), old(Array.Cow.S._length), old(Array.Cow.T._state), old(Array.Cow.T._elems), old(Array.Cow.T._length) , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
                                                                                                    
// Cow.a:                                                                                           
                                                                                                    
function {:inline} Y_Cow.a(tid : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow.a(tid: Tid,this: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _R)) ==> (Cow.a[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow.a(tid : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var newValue_yield: Array.Cow.T;                                                                    
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow.a(u: Tid,this: Cow,newValue: Array.Cow.T,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.a(tid, this, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.a(tid, this, Cow.a[this] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Transitive(tid : Tid, this: Cow, newValue : Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                     
var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                      
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var newValue_pre: Array.Cow.T;                                                                      
var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                                
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Array.Cow.A._state_post: [Array.Cow.A]State;                                                    
var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                               
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var this_post: Cow;                                                                                 
var newValue_post: Array.Cow.T;                                                                     
var Array.Cow.A._length_post: [Array.Cow.A]int;                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assume Y_Cow.a(tid, this, newValue , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow._lock_post == Cow._lock_p && Array.Cow.A._state_post == Array.Cow.A._state_p && Array.Cow.A._elems_post == Array.Cow.A._elems_p && Array.Cow.A._length_post == Array.Cow.A._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow.a(tid, this, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
// Cow._lock:                                                                                       
                                                                                                    
function {:inline} Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _R)) ==> (Cow._lock[this] == newValue))
 &&(((Cow._lock[this]==tid)==(newValue==tid)))                                                      
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var newValue_yield: Tid;                                                                            
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow._lock(u: Tid,this: Cow,newValue: Tid,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)));
 assume leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _N);
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, Cow._lock[this] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Transitive(tid : Tid, this: Cow, newValue : Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                     
var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                      
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                                
var newValue_pre: Tid;                                                                              
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Array.Cow.A._state_post: [Array.Cow.A]State;                                                    
var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                               
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var this_post: Cow;                                                                                 
var newValue_post: Tid;                                                                             
var Array.Cow.A._length_post: [Array.Cow.A]int;                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assume Y_Cow._lock(tid, this, newValue , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow._lock_post == Cow._lock_p && Array.Cow.A._state_post == Array.Cow.A._state_p && Array.Cow.A._elems_post == Array.Cow.A._elems_p && Array.Cow.A._length_post == Array.Cow.A._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
// Array.Cow.A:                                                                                     
                                                                                                    
function {:inline} Y_Array.Cow.A(tid : Tid, athis: Array.Cow.A, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.A._this[athis];                                                              
 ((isAccessible(Array.Cow.A._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Cow.A(tid: Tid,Array.Cow.A._this[athis]: Cow,athis: Array.Cow.A,index: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _R)) ==> (Array.Cow.A._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Cow.A(tid : Tid, athis: Array.Cow.A, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.A._this[athis];                                                              
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.A.Subsumes.W(tid : Tid, u : Tid, this: Cow, athis: Array.Cow.A, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Cow.A._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var athis_yield: Array.Cow.A;                                                                       
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.A._state[athis], u);                                                 
 assume !isError(m#moverPath(WriteEval.Array.Cow.A(u: Tid,Array.Cow.A._this[athis]: Cow,athis: Array.Cow.A,index: int,newValue: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.A(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.A.Reflexive(tid : Tid, this: Cow, athis: Array.Cow.A, index: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Cow.A._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var athis_yield: Array.Cow.A;                                                                       
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.A._state[athis], tid);                                               
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.A(tid, athis, index, Array.Cow.A._elems[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.A.Transitive(tid : Tid, this: Cow, athis: Array.Cow.A, index: int, newValue : int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
                                                                                                    
 requires this == Array.Cow.A._this[athis];                                                         
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                     
var athis_pre: Array.Cow.A;                                                                         
var index_pre: int;                                                                                 
var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                      
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                                
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Array.Cow.A._state_post: [Array.Cow.A]State;                                                    
var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                               
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var index_post: int;                                                                                
var this_post: Cow;                                                                                 
var athis_post: Array.Cow.A;                                                                        
var Array.Cow.A._length_post: [Array.Cow.A]int;                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow._lock_post == Cow._lock_p && Array.Cow.A._state_post == Array.Cow.A._state_p && Array.Cow.A._elems_post == Array.Cow.A._elems_p && Array.Cow.A._length_post == Array.Cow.A._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Cow.A._state[athis], tid);                                               
 assume Y(tid , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assume Y_Array.Cow.A(tid, athis, index, newValue , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assert Y_Array.Cow.A(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
// Array.Cow.S:                                                                                     
                                                                                                    
function {:inline} Y_Array.Cow.S(tid : Tid, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.S._this[athis];                                                              
 ((isAccessible(Array.Cow.S._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Cow.S(tid: Tid,Array.Cow.S._this[athis]: Cow,athis: Array.Cow.S,index: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _R)) ==> (Array.Cow.S._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Cow.S(tid : Tid, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.S._this[athis];                                                              
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Subsumes.W(tid : Tid, u : Tid, this: Cow, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Cow.S._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var athis_yield: Array.Cow.S;                                                                       
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.S._state[athis], u);                                                 
 assume !isError(m#moverPath(WriteEval.Array.Cow.S(u: Tid,Array.Cow.S._this[athis]: Cow,athis: Array.Cow.S,index: int,newValue: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.S(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Reflexive(tid : Tid, this: Cow, athis: Array.Cow.S, index: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Cow.S._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var athis_yield: Array.Cow.S;                                                                       
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.S._state[athis], tid);                                               
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.S(tid, athis, index, Array.Cow.S._elems[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Transitive(tid : Tid, this: Cow, athis: Array.Cow.S, index: int, newValue : int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
                                                                                                    
 requires this == Array.Cow.S._this[athis];                                                         
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                     
var index_pre: int;                                                                                 
var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                      
var Cow._state_pre: [Cow]State;                                                                     
var athis_pre: Array.Cow.S;                                                                         
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                                
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var athis_post: Array.Cow.S;                                                                        
var $recorded.state_post: int;                                                                      
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Array.Cow.A._state_post: [Array.Cow.A]State;                                                    
var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                               
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var index_post: int;                                                                                
var this_post: Cow;                                                                                 
var Array.Cow.A._length_post: [Array.Cow.A]int;                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow._lock_post == Cow._lock_p && Array.Cow.A._state_post == Array.Cow.A._state_p && Array.Cow.A._elems_post == Array.Cow.A._elems_p && Array.Cow.A._length_post == Array.Cow.A._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Cow.S._state[athis], tid);                                               
 assume Y(tid , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assume Y_Array.Cow.S(tid, athis, index, newValue , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assert Y_Array.Cow.S(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
// Array.Cow.T:                                                                                     
                                                                                                    
function {:inline} Y_Array.Cow.T(tid : Tid, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.T._this[athis];                                                              
 ((isAccessible(Array.Cow.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Cow.T(tid: Tid,Array.Cow.T._this[athis]: Cow,athis: Array.Cow.T,index: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)), _R)) ==> (Array.Cow.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Cow.T(tid : Tid, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int): bool
{                                                                                                   
(var this := Array.Cow.T._this[athis];                                                              
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Subsumes.W(tid : Tid, u : Tid, this: Cow, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Cow.T._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var athis_yield: Array.Cow.T;                                                                       
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.T._state[athis], u);                                                 
 assume !isError(m#moverPath(WriteEval.Array.Cow.T(u: Tid,Array.Cow.T._this[athis]: Cow,athis: Array.Cow.T,index: int,newValue: int,Cow._state,Cow.a,Cow._lock,Array.Cow.A._state,Array.Cow.A._elems,Array.Cow.A._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.T(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Reflexive(tid : Tid, this: Cow, athis: Array.Cow.T, index: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Cow.T._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var Array.Cow.A._state_yield: [Array.Cow.A]State;                                                   
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.A._length_yield: [Array.Cow.A]int;                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var Array.Cow.A._elems_yield: [Array.Cow.A]([int]int);                                              
var athis_yield: Array.Cow.T;                                                                       
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.T._state[athis], tid);                                               
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow._lock_yield == Cow._lock && Array.Cow.A._state_yield == Array.Cow.A._state && Array.Cow.A._elems_yield == Array.Cow.A._elems && Array.Cow.A._length_yield == Array.Cow.A._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.T(tid, athis, index, Array.Cow.T._elems[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Transitive(tid : Tid, this: Cow, athis: Array.Cow.T, index: int, newValue : int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int)
 requires StateInvariant(Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
                                                                                                    
 requires this == Array.Cow.T._this[athis];                                                         
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var athis_pre: Array.Cow.T;                                                                         
var Cow._lock_pre: [Cow]Tid;                                                                        
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Array.Cow.A._state_pre: [Array.Cow.A]State;                                                     
var index_pre: int;                                                                                 
var Array.Cow.A._length_pre: [Array.Cow.A]int;                                                      
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.A._elems_pre: [Array.Cow.A]([int]int);                                                
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var athis_post: Array.Cow.T;                                                                        
var tid_post: Tid;                                                                                  
var Array.Cow.A._state_post: [Array.Cow.A]State;                                                    
var Array.Cow.A._elems_post: [Array.Cow.A]([int]int);                                               
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var index_post: int;                                                                                
var this_post: Cow;                                                                                 
var Array.Cow.A._length_post: [Array.Cow.A]int;                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow._lock_pre == Cow._lock && Array.Cow.A._state_pre == Array.Cow.A._state && Array.Cow.A._elems_pre == Array.Cow.A._elems && Array.Cow.A._length_pre == Array.Cow.A._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow._lock_post == Cow._lock_p && Array.Cow.A._state_post == Array.Cow.A._state_p && Array.Cow.A._elems_post == Array.Cow.A._elems_p && Array.Cow.A._length_post == Array.Cow.A._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Cow.T._state[athis], tid);                                               
 assume Y(tid , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assume Y_Array.Cow.T(tid, athis, index, newValue , Cow._state_p, Cow.a_p, Cow._lock_p, Array.Cow.A._state_p, Array.Cow.A._elems_p, Array.Cow.A._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p);
 assert Y_Array.Cow.T(tid, athis, index, newValue , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow._lock: [Cow]Tid, Array.Cow.A._state: [Array.Cow.A]State, Array.Cow.A._elems: [Array.Cow.A]([int]int), Array.Cow.A._length: [Array.Cow.A]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow._lock_p: [Cow]Tid, Array.Cow.A._state_p: [Array.Cow.A]State, Array.Cow.A._elems_p: [Array.Cow.A]([int]int), Array.Cow.A._length_p: [Array.Cow.A]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int): bool
{                                                                                                   
 (forall this: Cow :: Y_Cow.a(tid : Tid, this, Cow.a_p[this] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length))
 && (forall this: Cow :: Y_Cow._lock(tid : Tid, this, Cow._lock_p[this] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length))
 && (forall athis: Array.Cow.A, index: int :: Y_Array.Cow.A(tid : Tid, athis, index, Array.Cow.A._elems_p[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length))
 && (forall athis: Array.Cow.S, index: int :: Y_Array.Cow.S(tid : Tid, athis, index, Array.Cow.S._elems_p[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length))
 && (forall athis: Array.Cow.T, index: int :: Y_Array.Cow.T(tid : Tid, athis, index, Array.Cow.T._elems_p[athis][index] , Cow._state, Cow.a, Cow._lock, Array.Cow.A._state, Array.Cow.A._elems, Array.Cow.A._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length))
 && (forall _i : Cow :: isShared(Cow._state[_i]) ==> isShared(Cow._state_p[_i]))                    
 && (forall _i : Cow :: isLocal(Cow._state[_i], tid) <==> isLocal(Cow._state_p[_i], tid))           
 && (forall _i : Array.Cow.A :: isShared(Array.Cow.A._state[_i]) ==> isShared(Array.Cow.A._state_p[_i]))
 && (forall _i : Array.Cow.A :: Array.Cow.A._length[_i] == Array.Cow.A._length_p[_i])               
 && (forall _i : Array.Cow.A :: isLocal(Array.Cow.A._state[_i], tid) <==> isLocal(Array.Cow.A._state_p[_i], tid))
 && (forall _i : Array.Cow.S :: isShared(Array.Cow.S._state[_i]) ==> isShared(Array.Cow.S._state_p[_i]))
 && (forall _i : Array.Cow.S :: Array.Cow.S._length[_i] == Array.Cow.S._length_p[_i])               
 && (forall _i : Array.Cow.S :: isLocal(Array.Cow.S._state[_i], tid) <==> isLocal(Array.Cow.S._state_p[_i], tid))
 && (forall _i : Array.Cow.T :: isShared(Array.Cow.T._state[_i]) ==> isShared(Array.Cow.T._state_p[_i]))
 && (forall _i : Array.Cow.T :: Array.Cow.T._length[_i] == Array.Cow.T._length_p[_i])               
 && (forall _i : Array.Cow.T :: isLocal(Array.Cow.T._state[_i], tid) <==> isLocal(Array.Cow.T._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 422.1-609.2: (Method:9.5)
// 435.1-435.24: (9.5): Bad tid
// 436.1-436.52: (9.5): Parameter VarDecl(ArrayType(Cow,S,VarAccess(this)),b) is not global
// 437.1-437.37: (9.5): this is not global
// 517.2-519.2: (class anchor.sink.VarDeclStmt:10.8)
// 520.2-522.2: (class anchor.sink.VarDeclStmt:11.8)
// 523.2-526.9: (class anchor.sink.Assign:11.16)
// 527.2-529.2: (class anchor.sink.VarDeclStmt:12.8)
// 530.2-533.10: (class anchor.sink.Assign:12.16)
// 534.2-542.73: (class anchor.sink.AAlloc:13.8)
// 543.2-570.32: (class anchor.sink.AWrite:14.8)
// 555.1-555.32: (14.8): Cannot have potential null deference in left-mover part.
// 560.1-560.17: (14.8): index < 0.
// 565.1-565.37: (14.8): index is >= length.
// 569.1-569.27: (14.8): Reduction failure
// 571.2-598.32: (class anchor.sink.ARead:15.8)
// 583.1-583.32: (15.8): Cannot have potential null deference in left-mover part.
// 588.1-588.17: (15.8): index < 0.
// 593.1-593.37: (15.8): index is >= length.
// 597.1-597.27: (15.8): Reduction failure
// 599.2-602.34: (class anchor.sink.Assign:16.21)
// 603.2-608.9: (class anchor.sink.Return:9.26)
// 833.1-833.34: (7.5): Cow.a failed Write-Write Right-Mover Check
// 908.1-908.30: (7.5): Cow.a failed Write-Read Right-Mover Check
// 987.1-987.34: (7.5): Cow.a failed Write-Write Left-Mover Check
// 1063.1-1063.30: (7.5): Cow.a failed Write-Read Left-Mover Check
// 1136.1-1136.34: (7.5): Cow.a failed Read-Write Right-Mover Check
// 1212.1-1212.34: (7.5): Cow.a failed Read-Write Left-Mover Check
// 1293.1-1293.34: (3.5): Array Array.Cow.A failed Write-Write Right-Mover Check
// 1374.1-1374.30: (3.5): Array Array.Cow.A failed Write-Read Right-Mover Check
// 1459.1-1459.34: (3.5): Array Array.Cow.A failed Write-Write Left-Mover Check
// 1541.1-1541.30: (3.5): Array Array.Cow.A failed Write-Read Left-Mover Check
// 1620.1-1620.34: (3.5): Array Array.Cow.A failed Read-Write Right-Mover Check
// 1702.1-1702.34: (3.5): Array Array.Cow.A failed Read-Write Left-Mover Check
// 1783.1-1783.34: (4.5): Array Array.Cow.S failed Write-Write Right-Mover Check
// 1864.1-1864.30: (4.5): Array Array.Cow.S failed Write-Read Right-Mover Check
// 1949.1-1949.34: (4.5): Array Array.Cow.S failed Write-Write Left-Mover Check
// 2031.1-2031.30: (4.5): Array Array.Cow.S failed Write-Read Left-Mover Check
// 2110.1-2110.34: (4.5): Array Array.Cow.S failed Read-Write Right-Mover Check
// 2192.1-2192.34: (4.5): Array Array.Cow.S failed Read-Write Left-Mover Check
// 2273.1-2273.34: (5.5): Array Array.Cow.T failed Write-Write Right-Mover Check
// 2354.1-2354.30: (5.5): Array Array.Cow.T failed Write-Read Right-Mover Check
// 2439.1-2439.34: (5.5): Array Array.Cow.T failed Write-Write Left-Mover Check
// 2521.1-2521.30: (5.5): Array Array.Cow.T failed Write-Read Left-Mover Check
// 2600.1-2600.34: (5.5): Array Array.Cow.T failed Read-Write Right-Mover Check
// 2682.1-2682.34: (5.5): Array Array.Cow.T failed Read-Write Left-Mover Check
// 2769.1-2769.140: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.1)
// 2770.1-2770.101: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.2)
// 2771.1-2771.158: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.3)
// 2891.1-2891.140: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case C)
// 3016.1-3016.144: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case D)
// 3017.1-3017.144: (7.5): Cow.a is not Write-Write Stable with respect to Cow.a (case R)
// 3104.1-3104.136: (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case F)
// 3105.1-3105.136: (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case H)
// 3106.1-3106.146: (7.5): Cow.a is not Read-Write Stable with respect to Cow.a (case I)
// 3192.1-3192.136: (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case J)
// 3193.1-3193.136: (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case K)
// 3194.1-3194.99: (7.5): Cow.a is not Write-Read Stable with respect to Cow.a (case L)
// 3287.1-3287.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.1)
// 3288.1-3288.101: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.2)
// 3289.1-3289.156: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case A.3)
// 3416.1-3416.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case C)
// 3548.1-3548.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case D)
// 3549.1-3549.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case R)
// 3641.1-3641.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case F)
// 3642.1-3642.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case H)
// 3643.1-3643.144: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.A (case I)
// 3734.1-3734.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case J)
// 3735.1-3735.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case K)
// 3736.1-3736.99: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Cow.a (case L)
// 3829.1-3829.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.1)
// 3830.1-3830.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.2)
// 3831.1-3831.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.3)
// 3958.1-3958.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 4090.1-4090.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 4091.1-4091.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 4183.1-4183.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 4184.1-4184.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 4185.1-4185.144: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 4276.1-4276.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case J)
// 4277.1-4277.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case K)
// 4278.1-4278.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case L)
// 4371.1-4371.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.1)
// 4372.1-4372.101: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.2)
// 4373.1-4373.156: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.3)
// 4500.1-4500.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 4632.1-4632.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 4633.1-4633.144: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 4725.1-4725.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 4726.1-4726.136: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 4727.1-4727.144: (7.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 4818.1-4818.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case J)
// 4819.1-4819.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case K)
// 4820.1-4820.99: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case L)
// 4913.1-4913.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
// 4914.1-4914.101: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
// 4915.1-4915.156: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
// 5042.1-5042.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case C)
// 5174.1-5174.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case D)
// 5175.1-5175.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Cow.a (case R)
// 5267.1-5267.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case F)
// 5268.1-5268.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case H)
// 5269.1-5269.144: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Cow.a (case I)
// 5360.1-5360.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case J)
// 5361.1-5361.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case K)
// 5362.1-5362.99: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.A (case L)
// 5460.1-5460.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
// 5461.1-5461.101: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
// 5462.1-5462.156: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
// 5596.1-5596.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case C)
// 5735.1-5735.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case D)
// 5736.1-5736.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.A (case R)
// 5833.1-5833.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case F)
// 5834.1-5834.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case H)
// 5835.1-5835.144: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.A (case I)
// 5931.1-5931.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case J)
// 5932.1-5932.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case K)
// 5933.1-5933.99: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.A (case L)
// 6031.1-6031.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
// 6032.1-6032.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
// 6033.1-6033.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
// 6167.1-6167.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 6306.1-6306.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 6307.1-6307.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 6404.1-6404.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 6405.1-6405.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 6406.1-6406.144: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 6502.1-6502.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case J)
// 6503.1-6503.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case K)
// 6504.1-6504.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.A (case L)
// 6602.1-6602.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.1)
// 6603.1-6603.101: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.2)
// 6604.1-6604.156: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case A.3)
// 6738.1-6738.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 6877.1-6877.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 6878.1-6878.144: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 6975.1-6975.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 6976.1-6976.136: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 6977.1-6977.144: (3.5): Array Array.Cow.A is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 7073.1-7073.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case J)
// 7074.1-7074.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case K)
// 7075.1-7075.99: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.A (case L)
// 7168.1-7168.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 7169.1-7169.101: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 7170.1-7170.156: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 7297.1-7297.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case C)
// 7429.1-7429.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case D)
// 7430.1-7430.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case R)
// 7522.1-7522.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case F)
// 7523.1-7523.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case H)
// 7524.1-7524.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case I)
// 7615.1-7615.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 7616.1-7616.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 7617.1-7617.99: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 7715.1-7715.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 7716.1-7716.101: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 7717.1-7717.156: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 7851.1-7851.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case C)
// 7990.1-7990.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case D)
// 7991.1-7991.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.A (case R)
// 8088.1-8088.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case F)
// 8089.1-8089.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case H)
// 8090.1-8090.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.A (case I)
// 8186.1-8186.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 8187.1-8187.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 8188.1-8188.99: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 8286.1-8286.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 8287.1-8287.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 8288.1-8288.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 8422.1-8422.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 8561.1-8561.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 8562.1-8562.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 8659.1-8659.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 8660.1-8660.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 8661.1-8661.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 8757.1-8757.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 8758.1-8758.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 8759.1-8759.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 8857.1-8857.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 8858.1-8858.101: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 8859.1-8859.156: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 8993.1-8993.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 9132.1-9132.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 9133.1-9133.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 9230.1-9230.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 9231.1-9231.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 9232.1-9232.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 9328.1-9328.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 9329.1-9329.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 9330.1-9330.99: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 9423.1-9423.140: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 9424.1-9424.101: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 9425.1-9425.156: (7.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 9552.1-9552.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case C)
// 9684.1-9684.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case D)
// 9685.1-9685.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case R)
// 9777.1-9777.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case F)
// 9778.1-9778.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case H)
// 9779.1-9779.144: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case I)
// 9870.1-9870.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 9871.1-9871.136: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 9872.1-9872.99: (7.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 9970.1-9970.140: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 9971.1-9971.101: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 9972.1-9972.156: (3.5): Array Array.Cow.A is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 10106.1-10106.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case C)
// 10245.1-10245.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case D)
// 10246.1-10246.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.A (case R)
// 10343.1-10343.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case F)
// 10344.1-10344.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case H)
// 10345.1-10345.144: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.A (case I)
// 10441.1-10441.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 10442.1-10442.136: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 10443.1-10443.99: (3.5): Array Array.Cow.A is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 10541.1-10541.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 10542.1-10542.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 10543.1-10543.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 10677.1-10677.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 10816.1-10816.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 10817.1-10817.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 10914.1-10914.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 10915.1-10915.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 10916.1-10916.144: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 11012.1-11012.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 11013.1-11013.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 11014.1-11014.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 11112.1-11112.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 11113.1-11113.101: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 11114.1-11114.156: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 11248.1-11248.140: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 11387.1-11387.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 11388.1-11388.144: (5.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 11485.1-11485.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 11486.1-11486.136: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 11487.1-11487.144: (5.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 11583.1-11583.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 11584.1-11584.136: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 11585.1-11585.99: (5.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 11622.1-11650.2: (7.5): yields_as clause for Cow.a is not valid
// 11655.1-11678.2: (7.5): yields_as clause for Cow.a is not reflexive
// 11684.1-11730.2: (7.5): yields_as clause for Cow.a is not transitive
// 11750.1-11778.2: (7.32): yields_as clause for Cow._lock is not valid
// 11783.1-11806.2: (7.32): yields_as clause for Cow._lock is not reflexive
// 11812.1-11858.2: (7.32): yields_as clause for Cow._lock is not transitive
// 11876.1-11908.2: (3.5): yields_as clause for Array.Cow.A is not valid
// 11909.1-11938.2: (3.5): yields_as clause for Array.Cow.A is not reflexive
// 11943.1-11993.2: (3.5): yields_as clause for Array.Cow.A is not transitive
// 12011.1-12043.2: (4.5): yields_as clause for Array.Cow.S is not valid
// 12044.1-12073.2: (4.5): yields_as clause for Array.Cow.S is not reflexive
// 12078.1-12128.2: (4.5): yields_as clause for Array.Cow.S is not transitive
// 12146.1-12178.2: (5.5): yields_as clause for Array.Cow.T is not valid
// 12179.1-12208.2: (5.5): yields_as clause for Array.Cow.T is not reflexive
// 12213.1-12263.2: (5.5): yields_as clause for Array.Cow.T is not transitive
