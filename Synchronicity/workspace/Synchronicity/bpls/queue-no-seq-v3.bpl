                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/queue-no-seq-v3.anchor:                 
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 2 ? B : N                                                                         
         : tid == 2 ? N : E                                                                         
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 1 ? B : N                                                                         
         : tid == 1 ? N : E                                                                         
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems != [Queue.T{this}].null && this.elems.length == 512;                    
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  this.spec != [Queue.A{this}].null;                                                 
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 2;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures $result == 0 && old(this.spec.length) == 0 || $result == old(this.spec[0]) && this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        bool tmp3;                                                                                  
        int tmp4;                                                                                   
        int tmp5;                                                                                   
        tmp5 := this.tail;                                                                          
        int tmp6;                                                                                   
        tmp6 := this.head;                                                                          
        tmp4 = tmp5 - tmp6;                                                                         
        tmp3 = tmp4 > 0;                                                                            
        if (tmp3 /* == this.tail - this.head > 0 */) {                                              
          yield;                                                                                    
          synchronized (this) {                                                                     
            assume this.tail - this.head > 0;                                                       
            int result;                                                                             
            [Queue.T{this}] tmp7;                                                                   
            tmp7 := this.elems;                                                                     
            int tmp8;                                                                               
            int tmp9;                                                                               
            tmp9 := this.head;                                                                      
            int tmp10;                                                                              
            [Queue.T{this}] tmp11;                                                                  
            tmp11 := this.elems;                                                                    
            tmp10 = tmp11.length;                                                                   
            tmp8 = tmp9 % tmp10;                                                                    
            result := tmp7[tmp8];                                                                   
            [Queue.A{this}] newSpec;                                                                
            int tmp12;                                                                              
            int tmp13;                                                                              
            [Queue.A{this}] tmp14;                                                                  
            tmp14 := this.spec;                                                                     
            tmp13 = tmp14.length;                                                                   
            tmp12 = tmp13 - 1;                                                                      
            newSpec = new [Queue.A{this}](tmp12);                                                   
            assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
            this.spec := newSpec;                                                                   
            int tmp15;                                                                              
            int tmp16;                                                                              
            tmp16 := this.head;                                                                     
            tmp15 = tmp16 + 1;                                                                      
            this.head := tmp15;                                                                     
             return result;                                                                         
          }                                                                                         
        } else {                                                                                    
          assume !(NextSpecStep(0));                                                                
           return 0;                                                                                
        }                                                                                           
        // return -1;                                                                               
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 1;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        bool tmp17;                                                                                 
        int tmp18;                                                                                  
        int tmp19;                                                                                  
        tmp19 := this.tail;                                                                         
        int tmp20;                                                                                  
        tmp20 := this.head;                                                                         
        tmp18 = tmp19 - tmp20;                                                                      
        int tmp21;                                                                                  
        [Queue.T{this}] tmp22;                                                                      
        tmp22 := this.elems;                                                                        
        tmp21 = tmp22.length;                                                                       
        tmp17 = tmp18 < tmp21;                                                                      
        if (tmp17 /* == this.tail - this.head < this.elems.length */) {                             
          yield;                                                                                    
          synchronized (this) {                                                                     
            assume this.tail - this.head < this.elems.length;                                       
            [Queue.T{this}] tmp23;                                                                  
            tmp23 := this.elems;                                                                    
            int tmp24;                                                                              
            int tmp25;                                                                              
            tmp25 := this.tail;                                                                     
            int tmp26;                                                                              
            [Queue.T{this}] tmp27;                                                                  
            tmp27 := this.elems;                                                                    
            tmp26 = tmp27.length;                                                                   
            tmp24 = tmp25 % tmp26;                                                                  
            tmp23[tmp24] := x;                                                                      
            [Queue.A{this}] newSpec;                                                                
            int tmp28;                                                                              
            int tmp29;                                                                              
            [Queue.A{this}] tmp30;                                                                  
            tmp30 := this.spec;                                                                     
            tmp29 = tmp30.length;                                                                   
            tmp28 = tmp29 + 1;                                                                      
            newSpec = new [Queue.A{this}](tmp28);                                                   
            assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
            assume newSpec[this.tail % this.elems.length] == x;                                     
            this.spec := newSpec;                                                                   
            int tmp31;                                                                              
            int tmp32;                                                                              
            tmp32 := this.tail;                                                                     
            tmp31 = tmp32 + 1;                                                                      
            this.tail := tmp31;                                                                     
          }                                                                                         
        } else {                                                                                    
                                                                                                    
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 2 ? B : N                                                                         
         : tid == 2 ? N : E                                                                         
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 1 ? B : N                                                                         
         : tid == 1 ? N : E                                                                         
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems != [Queue.T{this}].null && this.elems.length == 512;                    
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  this.spec != [Queue.A{this}].null;                                                 
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 2;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures $result == 0 && old(this.spec.length) == 0 || $result == old(this.spec[0]) && this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        bool tmp3;                                                                                  
        int tmp4;                                                                                   
        int tmp5;                                                                                   
        tmp5 := this.tail;                                                                          
        int tmp6;                                                                                   
        tmp6 := this.head;                                                                          
        tmp4 = tmp5 - tmp6;                                                                         
        tmp3 = tmp4 > 0;                                                                            
        if (tmp3 /* == this.tail - this.head > 0 */) {                                              
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head > 0;                                                     
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
          assume !(NextSpecStep(0));                                                                
          {                                                                                         
             return 0;                                                                              
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 1;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        bool tmp17;                                                                                 
        int tmp18;                                                                                  
        int tmp19;                                                                                  
        tmp19 := this.tail;                                                                         
        int tmp20;                                                                                  
        tmp20 := this.head;                                                                         
        tmp18 = tmp19 - tmp20;                                                                      
        int tmp21;                                                                                  
        [Queue.T{this}] tmp22;                                                                      
        tmp22 := this.elems;                                                                        
        tmp21 = tmp22.length;                                                                       
        tmp17 = tmp18 < tmp21;                                                                      
        if (tmp17 /* == this.tail - this.head < this.elems.length */) {                             
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head < this.elems.length;                                     
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
                                                                                                    
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 2 ? B : N                                                                         
         : tid == 2 ? N : E                                                                         
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 1 ? B : N                                                                         
         : tid == 1 ? N : E                                                                         
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems != [Queue.T{this}].null && this.elems.length == 512;                    
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  this.spec != [Queue.A{this}].null;                                                 
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 2;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures $result == 0 && old(this.spec.length) == 0 || $result == old(this.spec[0]) && this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        bool tmp3;                                                                                  
        int tmp4;                                                                                   
        int tmp5;                                                                                   
        tmp5 := this.tail;                                                                          
        int tmp6;                                                                                   
        tmp6 := this.head;                                                                          
        tmp4 = tmp5 - tmp6;                                                                         
        tmp3 = tmp4 > 0;                                                                            
        if (tmp3 /* == this.tail - this.head > 0 */) {                                              
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head > 0;                                                     
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
          assume !(NextSpecStep(0));                                                                
          {                                                                                         
             return 0;                                                                              
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 1;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        bool tmp17;                                                                                 
        int tmp18;                                                                                  
        int tmp19;                                                                                  
        tmp19 := this.tail;                                                                         
        int tmp20;                                                                                  
        tmp20 := this.head;                                                                         
        tmp18 = tmp19 - tmp20;                                                                      
        int tmp21;                                                                                  
        [Queue.T{this}] tmp22;                                                                      
        tmp22 := this.elems;                                                                        
        tmp21 = tmp22.length;                                                                       
        tmp17 = tmp18 < tmp21;                                                                      
        if (tmp17 /* == this.tail - this.head < this.elems.length */) {                             
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head < this.elems.length;                                     
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
                                                                                                    
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 2 ? B : N                                                                         
         : tid == 2 ? N : E                                                                         
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead                                                                                     
         ? tid == 1 ? B : N                                                                         
         : tid == 1 ? N : E                                                                         
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems != [Queue.T{this}].null && this.elems.length == 512;                    
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  this.spec != [Queue.A{this}].null;                                                 
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 2;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures $result == 0 && old(this.spec.length) == 0 || $result == old(this.spec[0]) && this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        bool tmp3;                                                                                  
        int tmp4;                                                                                   
        int tmp5;                                                                                   
        tmp5 := this.tail;                                                                          
        int tmp6;                                                                                   
        tmp6 := this.head;                                                                          
        tmp4 = tmp5 - tmp6;                                                                         
        tmp3 = tmp4 > 0;                                                                            
        if (tmp3 /* == this.tail - this.head > 0 */) {                                              
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head > 0;                                                     
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
          assume !(NextSpecStep(0));                                                                
          {                                                                                         
             return 0;                                                                              
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires tid == 1;                                                                            
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        bool tmp17;                                                                                 
        int tmp18;                                                                                  
        int tmp19;                                                                                  
        tmp19 := this.tail;                                                                         
        int tmp20;                                                                                  
        tmp20 := this.head;                                                                         
        tmp18 = tmp19 - tmp20;                                                                      
        int tmp21;                                                                                  
        [Queue.T{this}] tmp22;                                                                      
        tmp22 := this.elems;                                                                        
        tmp21 = tmp22.length;                                                                       
        tmp17 = tmp18 < tmp21;                                                                      
        if (tmp17 /* == this.tail - this.head < this.elems.length */) {                             
          yield;                                                                                    
          {                                                                                         
            acquire(this);                                                                          
            {                                                                                       
              assume this.tail - this.head < this.elems.length;                                     
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            }                                                                                       
            release(this);                                                                          
          }                                                                                         
        } else {                                                                                    
                                                                                                    
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Queue ***/                                                                          
                                                                                                    
type Queue;                                                                                         
const unique Queue.null: Queue;                                                                     
var Queue._state: [Queue]State;                                                                     
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.elems: [Queue]Array.Queue.T;                                                              
                                                                                                    
function {:inline} ReadEval.Queue.elems(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.T.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.elems(tid: Tid,this : Queue,newValue: Array.Queue.T,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.head: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.head(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   if ((tid==2)) then                                                                               
    moverPath(_B, 6)                                                                                
   else                                                                                             
    moverPath(_N, 2)                                                                                
  else                                                                                              
   if ((tid==2)) then                                                                               
    moverPath(_N, 4)                                                                                
   else                                                                                             
    moverPath(_E, 0)                                                                                
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.head(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   if ((tid==2)) then                                                                               
    moverPath(_B, 6)                                                                                
   else                                                                                             
    moverPath(_N, 2)                                                                                
  else                                                                                              
   if ((tid==2)) then                                                                               
    moverPath(_N, 4)                                                                                
   else                                                                                             
    moverPath(_E, 0)                                                                                
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.tail: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.tail(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   if ((tid==1)) then                                                                               
    moverPath(_B, 6)                                                                                
   else                                                                                             
    moverPath(_N, 2)                                                                                
  else                                                                                              
   if ((tid==1)) then                                                                               
    moverPath(_N, 4)                                                                                
   else                                                                                             
    moverPath(_E, 0)                                                                                
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.tail(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   if ((tid==1)) then                                                                               
    moverPath(_B, 6)                                                                                
   else                                                                                             
    moverPath(_N, 2)                                                                                
  else                                                                                              
   if ((tid==1)) then                                                                               
    moverPath(_N, 4)                                                                                
   else                                                                                             
    moverPath(_E, 0)                                                                                
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.spec: [Queue]Array.Queue.A;                                                               
                                                                                                    
function {:inline} ReadEval.Queue.spec(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.A.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.spec(tid: Tid,this : Queue,newValue: Array.Queue.A,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue._lock: [Queue]Tid;                                                                        
                                                                                                    
function {:inline} ReadEval.Queue._lock(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue._lock(tid: Tid,this : Queue,newValue: Tid,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
function {:inline} Invariant.Queue.3774432(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (((0<=Queue.head[this])&&(Queue.head[this]<=Queue.tail[this]))&&((Queue.tail[this]-Queue.head[this])<=Array.Queue.T._length[Queue.elems[this]]))
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3774450(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 ((Queue.elems[this]!=Array.Queue.T.null)&&(Array.Queue.T._length[Queue.elems[this]]==512))         
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3774462(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Array.Queue.A._length[Queue.spec[this]]==(Queue.tail[this]-Queue.head[this]))                     
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3774471(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Queue.spec[this]!=Array.Queue.A.null)                                                             
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3774509(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (forall i: int ::  ((((0<=i)&&(i<Array.Queue.A._length[Queue.spec[this]]))==>(Array.Queue.A._elems[Queue.spec[this]][i]==Array.Queue.T._elems[Queue.elems[this]][MOD((Queue.head[this]+i), Array.Queue.T._length[Queue.elems[this]])]))))
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Queue.init(tid:Tid, this : Queue)                                                        
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (32.5): Bad tid
requires isLocal(Queue._state[this], tid);                                                          
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires (Queue.elems[this]==Array.Queue.T.null);                                                   
                                                                                                    
requires (Queue.spec[this]==Array.Queue.A.null);                                                    
                                                                                                    
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.5): Object invariant may not hold.
{                                                                                                   
 var mover3781136: Mover;                                                                           
 var Queue.tail3781136: [Queue]int;                                                                 
 var tmp13781141: int;                                                                              
 var Array.Queue.T._elems3781113: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._length3781139: [Array.Queue.A]int;                                              
 var Queue._state3781141: [Queue]State;                                                             
 var elems3781136: Array.Queue.T;                                                                   
 var moverPath3781103: MoverPath;                                                                   
 var Array.Queue.A._state3781103: [Array.Queue.A]State;                                             
 var Array.Queue.A._length3781136: [Array.Queue.A]int;                                              
 var tid3781103: Tid;                                                                               
 var Queue.tail3781103: [Queue]int;                                                                 
 var $recorded.state3781103: int;                                                                   
 var Queue.elems3781103: [Queue]Array.Queue.T;                                                      
 var tmp23781113: int;                                                                              
 var tmp23781136: int;                                                                              
 var Array.Queue.T._length3781136: [Array.Queue.T]int;                                              
 var mover3781113: Mover;                                                                           
 var Array.Queue.T._state3781139: [Array.Queue.T]State;                                             
 var tmp13781113: int;                                                                              
 var Queue.tail3781113: [Queue]int;                                                                 
 var tmp23781141: int;                                                                              
 var moverPath3781139: MoverPath;                                                                   
 var $recorded.state3781113: int;                                                                   
 var Array.Queue.T._length3781139: [Array.Queue.T]int;                                              
 var moverPath3781136: MoverPath;                                                                   
 var Array.Queue.A._length3781103: [Array.Queue.A]int;                                              
 var _pc3781113: Phase;                                                                             
 var Queue._state3781139: [Queue]State;                                                             
 var spec3781141: Array.Queue.A;                                                                    
 var spec3781136: Array.Queue.A;                                                                    
 var tid3781113: Tid;                                                                               
 var $recorded.state3781141: int;                                                                   
 var Queue.spec3781136: [Queue]Array.Queue.A;                                                       
 var path3781139: int;                                                                              
 var Array.Queue.A._elems3781136: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._elems3781103: [Array.Queue.A]([int]int);                                        
 var Queue.head3781113: [Queue]int;                                                                 
 var spec3781139: Array.Queue.A;                                                                    
 var Queue.elems3781136: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._state3781141: [Array.Queue.T]State;                                             
 var tid3781141: Tid;                                                                               
 var Queue._state3781113: [Queue]State;                                                             
 var Array.Queue.A._state3781113: [Array.Queue.A]State;                                             
 var Queue.head3781139: [Queue]int;                                                                 
 var this3781113: Queue;                                                                            
 var Queue._lock3781141: [Queue]Tid;                                                                
 var elems: Array.Queue.T;                                                                          
 var Array.Queue.A._length3781141: [Array.Queue.A]int;                                              
 var Queue.spec3781139: [Queue]Array.Queue.A;                                                       
 var Queue._lock3781103: [Queue]Tid;                                                                
 var Queue._lock3781113: [Queue]Tid;                                                                
 var mover3781103: Mover;                                                                           
 var Queue.elems3781113: [Queue]Array.Queue.T;                                                      
 var tid3781136: Tid;                                                                               
 var Array.Queue.T._length3781113: [Array.Queue.T]int;                                              
 var Array.Queue.A._state3781139: [Array.Queue.A]State;                                             
 var this3781136: Queue;                                                                            
 var Array.Queue.T._state3781113: [Array.Queue.T]State;                                             
 var path3781103: int;                                                                              
 var Array.Queue.T._elems3781139: [Array.Queue.T]([int]int);                                        
 var spec: Array.Queue.A;                                                                           
 var Array.Queue.T._elems3781136: [Array.Queue.T]([int]int);                                        
 var Queue.spec3781141: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._length3781141: [Array.Queue.T]int;                                              
 var Array.Queue.A._state3781141: [Array.Queue.A]State;                                             
 var Array.Queue.T._elems3781141: [Array.Queue.T]([int]int);                                        
 var _pc3781136: Phase;                                                                             
 var Queue._lock3781136: [Queue]Tid;                                                                
 var tmp1: int;                                                                                     
 var Queue._state3781103: [Queue]State;                                                             
 var this3781141: Queue;                                                                            
 var tmp23781139: int;                                                                              
 var Array.Queue.T._elems3781103: [Array.Queue.T]([int]int);                                        
 var tmp13781139: int;                                                                              
 var Array.Queue.T._length3781103: [Array.Queue.T]int;                                              
 var Array.Queue.A._length3781113: [Array.Queue.A]int;                                              
 var Queue.elems3781141: [Queue]Array.Queue.T;                                                      
 var Queue.head3781141: [Queue]int;                                                                 
 var Array.Queue.A._elems3781113: [Array.Queue.A]([int]int);                                        
 var $recorded.state3781139: int;                                                                   
 var Queue.head3781136: [Queue]int;                                                                 
 var path3781113: int;                                                                              
 var Queue._state3781136: [Queue]State;                                                             
 var Queue.spec3781113: [Queue]Array.Queue.A;                                                       
 var Queue.elems3781139: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._state3781136: [Array.Queue.T]State;                                             
 var elems3781141: Array.Queue.T;                                                                   
 var tid3781139: Tid;                                                                               
 var tmp13781103: int;                                                                              
 var Queue.spec3781103: [Queue]Array.Queue.A;                                                       
 var this3781139: Queue;                                                                            
 var $recorded.state3781136: int;                                                                   
 var Array.Queue.A._state3781136: [Array.Queue.A]State;                                             
 var Array.Queue.A._elems3781141: [Array.Queue.A]([int]int);                                        
 var Queue.tail3781141: [Queue]int;                                                                 
 var _pc3781139: Phase;                                                                             
 var Queue._lock3781139: [Queue]Tid;                                                                
 var Queue.head3781103: [Queue]int;                                                                 
 var Queue.tail3781139: [Queue]int;                                                                 
 var _pc3781141: Phase;                                                                             
 var tmp2: int;                                                                                     
 var tmp13781136: int;                                                                              
 var elems3781139: Array.Queue.T;                                                                   
 var this3781103: Queue;                                                                            
 var moverPath3781113: MoverPath;                                                                   
 var _pc3781103: Phase;                                                                             
 var Array.Queue.T._state3781103: [Array.Queue.T]State;                                             
 var Array.Queue.A._elems3781139: [Array.Queue.A]([int]int);                                        
 var mover3781139: Mover;                                                                           
 var path3781136: int;                                                                              
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
 assert true && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (32.5): Can only have right-mover memory accesses in requires clause
 assert true && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (32.5): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 32.5: assume this.elems == [Queue.T{this}].null;                                                
                                                                                                    
 assume (Queue.elems[this]==Array.Queue.T.null);                                                    
                                                                                                    
 // 32.5: assume this.head == 0;                                                                    
                                                                                                    
 assume (Queue.head[this]==0);                                                                      
                                                                                                    
 // 32.5: assume this.tail == 0;                                                                    
                                                                                                    
 assume (Queue.tail[this]==0);                                                                      
                                                                                                    
 // 32.5: assume this.spec == [Queue.A{this}].null;                                                 
                                                                                                    
 assume (Queue.spec[this]==Array.Queue.A.null);                                                     
                                                                                                    
 // 33.9: int tmp1;                                                                                 
                                                                                                    
                                                                                                    
 // 33.9: tmp1 = 0;                                                                                 
                                                                                                    
 tmp1 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 33.9: this.head := tmp1;                                                                        
                                                                                                    
                                                                                                    
 moverPath3781103 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp1: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781103 := m#moverPath(moverPath3781103);                                                     
 path3781103 := p#moverPath(moverPath3781103);                                                      
 assume Queue._state3781103 == Queue._state && Queue.elems3781103 == Queue.elems && Queue.head3781103 == Queue.head && Queue.tail3781103 == Queue.tail && Queue.spec3781103 == Queue.spec && Queue._lock3781103 == Queue._lock && Array.Queue.T._state3781103 == Array.Queue.T._state && Array.Queue.T._elems3781103 == Array.Queue.T._elems && Array.Queue.T._length3781103 == Array.Queue.T._length && Array.Queue.A._state3781103 == Array.Queue.A._state && Array.Queue.A._elems3781103 == Array.Queue.A._elems && Array.Queue.A._length3781103 == Array.Queue.A._length && tmp13781103 == tmp1 && this3781103 == this && tid3781103 == tid && _pc3781103 == _pc;
 assume $recorded.state3781103 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (33.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3781103);                                                              
 assert _pc != PhaseError;                                                                                 // (33.9): Reduction failure
 Queue.head[this] := tmp1;                                                                          
                                                                                                    
 // 34.9: int tmp2;                                                                                 
                                                                                                    
                                                                                                    
 // 34.9: tmp2 = 0;                                                                                 
                                                                                                    
 tmp2 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 34.9: this.tail := tmp2;                                                                        
                                                                                                    
                                                                                                    
 moverPath3781113 := WriteEval.Queue.tail(tid: Tid,this: Queue,tmp2: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781113 := m#moverPath(moverPath3781113);                                                     
 path3781113 := p#moverPath(moverPath3781113);                                                      
 assume Queue._state3781113 == Queue._state && Queue.elems3781113 == Queue.elems && Queue.head3781113 == Queue.head && Queue.tail3781113 == Queue.tail && Queue.spec3781113 == Queue.spec && Queue._lock3781113 == Queue._lock && Array.Queue.T._state3781113 == Array.Queue.T._state && Array.Queue.T._elems3781113 == Array.Queue.T._elems && Array.Queue.T._length3781113 == Array.Queue.T._length && Array.Queue.A._state3781113 == Array.Queue.A._state && Array.Queue.A._elems3781113 == Array.Queue.A._elems && Array.Queue.A._length3781113 == Array.Queue.A._length && tmp23781113 == tmp2 && tmp13781113 == tmp1 && this3781113 == this && tid3781113 == tid && _pc3781113 == _pc;
 assume $recorded.state3781113 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (34.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3781113);                                                              
 assert _pc != PhaseError;                                                                                 // (34.9): Reduction failure
 Queue.tail[this] := tmp2;                                                                          
                                                                                                    
 // 35.9: [Queue.T{this}] elems;                                                                    
                                                                                                    
                                                                                                    
 // 35.9: elems = new [Queue.T{this}](512);                                                         
                                                                                                    
 havoc elems;                                                                                       
 assume isFresh(Array.Queue.T._state[elems]);                                                       
 assume Array.Queue.T._length[elems] == 512;                                                        
 assume Array.Queue.T._this[elems] == this;                                                         
 Array.Queue.T._state[elems] := LOCAL(tid);                                                         
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.T._elems[elems][_i] == 0);                      
                                                                                                    
 // 36.9: [Queue.A{this}] spec;                                                                     
                                                                                                    
                                                                                                    
 // 36.9: spec = new [Queue.A{this}](0);                                                            
                                                                                                    
 havoc spec;                                                                                        
 assume isFresh(Array.Queue.A._state[spec]);                                                        
 assume Array.Queue.A._length[spec] == 0;                                                           
 assume Array.Queue.A._this[spec] == this;                                                          
 Array.Queue.A._state[spec] := LOCAL(tid);                                                          
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[spec][_i] == 0);                       
                                                                                                    
 // 37.9: this.elems := elems, this.spec := spec;                                                   
                                                                                                    
 assert _pc == PreCommit;                                                                                  // (37.9): Local Write block must appear pre commit.
                                                                                                    
 // 37.9: this.elems := elems;                                                                      
                                                                                                    
                                                                                                    
 moverPath3781136 := WriteEval.Queue.elems(tid: Tid,this: Queue,elems: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781136 := m#moverPath(moverPath3781136);                                                     
 path3781136 := p#moverPath(moverPath3781136);                                                      
 assume Queue._state3781136 == Queue._state && Queue.elems3781136 == Queue.elems && Queue.head3781136 == Queue.head && Queue.tail3781136 == Queue.tail && Queue.spec3781136 == Queue.spec && Queue._lock3781136 == Queue._lock && Array.Queue.T._state3781136 == Array.Queue.T._state && Array.Queue.T._elems3781136 == Array.Queue.T._elems && Array.Queue.T._length3781136 == Array.Queue.T._length && Array.Queue.A._state3781136 == Array.Queue.A._state && Array.Queue.A._elems3781136 == Array.Queue.A._elems && Array.Queue.A._length3781136 == Array.Queue.A._length && spec3781136 == spec && elems3781136 == elems && tmp23781136 == tmp2 && tmp13781136 == tmp1 && this3781136 == this && tid3781136 == tid && _pc3781136 == _pc;
 assume $recorded.state3781136 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (37.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781136);                                                              
 assert _pc != PhaseError;                                                                                 // (37.9): Reduction failure
 assert _pc == PreCommit;                                                                                  // (37.9): Local Write block can only include right-movers.
 Queue.elems[this] := elems;                                                                        
                                                                                                    
 // 37.29: this.spec := spec;                                                                       
                                                                                                    
                                                                                                    
 moverPath3781139 := WriteEval.Queue.spec(tid: Tid,this: Queue,spec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781139 := m#moverPath(moverPath3781139);                                                     
 path3781139 := p#moverPath(moverPath3781139);                                                      
 assume Queue._state3781139 == Queue._state && Queue.elems3781139 == Queue.elems && Queue.head3781139 == Queue.head && Queue.tail3781139 == Queue.tail && Queue.spec3781139 == Queue.spec && Queue._lock3781139 == Queue._lock && Array.Queue.T._state3781139 == Array.Queue.T._state && Array.Queue.T._elems3781139 == Array.Queue.T._elems && Array.Queue.T._length3781139 == Array.Queue.T._length && Array.Queue.A._state3781139 == Array.Queue.A._state && Array.Queue.A._elems3781139 == Array.Queue.A._elems && Array.Queue.A._length3781139 == Array.Queue.A._length && spec3781139 == spec && elems3781139 == elems && tmp23781139 == tmp2 && tmp13781139 == tmp1 && this3781139 == this && tid3781139 == tid && _pc3781139 == _pc;
 assume $recorded.state3781139 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (37.29): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781139);                                                              
 assert _pc != PhaseError;                                                                                 // (37.29): Reduction failure
 assert _pc == PreCommit;                                                                                  // (37.29): Local Write block can only include right-movers.
 Queue.spec[this] := spec;                                                                          
 assert isLocal(Array.Queue.T._state[elems], tid);                                                         // (37.9): Can only have local designators in Local Write block.
 assert isLocal(Array.Queue.A._state[spec], tid);                                                          // (37.29): Can only have local designators in Local Write block.
 Array.Queue.T._state[elems] := SHARED();                                                           
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 Array.Queue.A._state[spec] := SHARED();                                                            
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.T._this[elems]]]);                 // (37.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.T._this[elems]]]);                  // (37.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[spec]]]);                  // (37.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[spec]]]);                   // (37.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
                                                                                                    
 // 32.21: // return;                                                                               
                                                                                                    
 assume Queue._state3781141 == Queue._state && Queue.elems3781141 == Queue.elems && Queue.head3781141 == Queue.head && Queue.tail3781141 == Queue.tail && Queue.spec3781141 == Queue.spec && Queue._lock3781141 == Queue._lock && Array.Queue.T._state3781141 == Array.Queue.T._state && Array.Queue.T._elems3781141 == Array.Queue.T._elems && Array.Queue.T._length3781141 == Array.Queue.T._length && Array.Queue.A._state3781141 == Array.Queue.A._state && Array.Queue.A._elems3781141 == Array.Queue.A._elems && Array.Queue.A._length3781141 == Array.Queue.A._length && spec3781141 == spec && elems3781141 == elems && tmp23781141 == tmp2 && tmp13781141 == tmp1 && this3781141 == this && tid3781141 == tid;
 assume $recorded.state3781141 == 1;                                                                
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (32.21): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Queue.dequeue(tid:Tid, this : Queue)                                                     
returns ($result : int)                                                                             
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (41.5): Bad tid
requires isShared(Queue._state[this]);                                                                     // (41.5): this is not global
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires (tid==2);                                                                                  
                                                                                                    
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (41.5): Object invariant may not hold.
{                                                                                                   
 var tmp103781233: int;                                                                             
 var moverPath3781163: MoverPath;                                                                   
 var _pc3781344: Phase;                                                                             
 var result: int;                                                                                   
 var $recorded.state3781308: int;                                                                   
 var Queue.head3781157: [Queue]int;                                                                 
 var Array.Queue.T._state3781177: [Array.Queue.T]State;                                             
 var this3781250: Queue;                                                                            
 var moverPath3781317: MoverPath;                                                                   
 var tid3781163: Tid;                                                                               
 var result3781209: int;                                                                            
 var Array.Queue.T._elems3781157: [Array.Queue.T]([int]int);                                        
 var tmp83781308: int;                                                                              
 var mover3781250: Mover;                                                                           
 var Array.Queue.T._state3781163: [Array.Queue.T]State;                                             
 var Array.Queue.A._length3781219: [Array.Queue.A]int;                                              
 var tmp103781317: int;                                                                             
 var tmp93781327: int;                                                                              
 var Queue.elems3781200: [Queue]Array.Queue.T;                                                      
 var Queue.tail3781344: [Queue]int;                                                                 
 var Queue.elems3781209: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._length3781177: [Array.Queue.T]int;                                              
 var $recorded.state3781327: int;                                                                   
 var tmp73781327: Array.Queue.T;                                                                    
 var Array.Queue.T._length3781317: [Array.Queue.T]int;                                              
 var tid3781219: Tid;                                                                               
 var tmp73781209: Array.Queue.T;                                                                    
 var tmp53781209: int;                                                                              
 var tmp43781200: int;                                                                              
 var Queue.tail3781317: [Queue]int;                                                                 
 var tid3781317: Tid;                                                                               
 var Queue.tail3781331: [Queue]int;                                                                 
 var Queue.spec3781350: [Queue]Array.Queue.A;                                                       
 var tmp153781331: int;                                                                             
 var Queue.elems3781219: [Queue]Array.Queue.T;                                                      
 var tmp53781157: int;                                                                              
 var tmp33781233: bool;                                                                             
 var Array.Queue.T._length3781209: [Array.Queue.T]int;                                              
 var tmp93781219: int;                                                                              
 var mover3781200: Mover;                                                                           
 var mover3781219: Mover;                                                                           
 var tmp5: int;                                                                                     
 var this3781177_post: Queue;                                                                       
 var tmp53781331: int;                                                                              
 var Array.Queue.T._state3781209: [Array.Queue.T]State;                                             
 var this3781331: Queue;                                                                            
 var Array.Queue.T._elems3781233: [Array.Queue.T]([int]int);                                        
 var tmp43781219: int;                                                                              
 var tmp53781177_post: int;                                                                         
 var tmp63781219: int;                                                                              
 var Array.Queue.A._state3781344: [Array.Queue.A]State;                                             
 var Array.Queue.T._length3781163: [Array.Queue.T]int;                                              
 var path3781233: int;                                                                              
 var tmp73781317: Array.Queue.T;                                                                    
 var _pc3781250: Phase;                                                                             
 var _pc3781308: Phase;                                                                             
 var Queue.tail3781157: [Queue]int;                                                                 
 var Queue._state3781344: [Queue]State;                                                             
 var Queue._lock3781331: [Queue]Tid;                                                                
 var moverPath3781308: MoverPath;                                                                   
 var Queue.spec3781219: [Queue]Array.Queue.A;                                                       
 var Queue.tail3781308: [Queue]int;                                                                 
 var Queue._state3781157: [Queue]State;                                                             
 var Queue.head3781177: [Queue]int;                                                                 
 var tid3781177_post: Tid;                                                                          
 var Array.Queue.A._state3781327: [Array.Queue.A]State;                                             
 var _pc3781233: Phase;                                                                             
 var Array.Queue.A._length3781331: [Array.Queue.A]int;                                              
 var Queue.spec3781308: [Queue]Array.Queue.A;                                                       
 var Queue.elems3781177_post: [Queue]Array.Queue.T;                                                 
 var _pc3781177_post: Phase;                                                                        
 var tmp53781327: int;                                                                              
 var tmp14: Array.Queue.A;                                                                          
 var tmp93781308: int;                                                                              
 var Queue.tail3781219: [Queue]int;                                                                 
 var Queue.elems3781250: [Queue]Array.Queue.T;                                                      
 var moverPath3781327: MoverPath;                                                                   
 var Queue.spec3781209: [Queue]Array.Queue.A;                                                       
 var tid3781331: Tid;                                                                               
 var Queue.head3781200: [Queue]int;                                                                 
 var Queue.tail3781177_post: [Queue]int;                                                            
 var $recorded.state3781209: int;                                                                   
 var tmp8: int;                                                                                     
 var tmp11: Array.Queue.T;                                                                          
 var tmp73781233: Array.Queue.T;                                                                    
 var Array.Queue.A._elems3781200: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3781209: [Array.Queue.A]State;                                             
 var Array.Queue.A._state3781331: [Array.Queue.A]State;                                             
 var $recorded.state3781157: int;                                                                   
 var Queue._state3781209: [Queue]State;                                                             
 var Array.Queue.A._state3781219: [Array.Queue.A]State;                                             
 var tmp33781317: bool;                                                                             
 var Array.Queue.T._elems3781308: [Array.Queue.T]([int]int);                                        
 var tmp143781317: Array.Queue.A;                                                                   
 var $recorded.state3781163: int;                                                                   
 var Queue.head3781177_post: [Queue]int;                                                            
 var tmp43781317: int;                                                                              
 var _pc3781327: Phase;                                                                             
 var tmp43781163: int;                                                                              
 var Array.Queue.A._state3781308: [Array.Queue.A]State;                                             
 var $result3781233: int;                                                                           
 var $recorded.state3781233: int;                                                                   
 var tmp93781250: int;                                                                              
 var tmp103781219: int;                                                                             
 var Array.Queue.T._elems3781350: [Array.Queue.T]([int]int);                                        
 var _pc3781200: Phase;                                                                             
 var Queue.elems3781350: [Queue]Array.Queue.T;                                                      
 var path3781219: int;                                                                              
 var tmp63781163: int;                                                                              
 var Array.Queue.T._elems3781250: [Array.Queue.T]([int]int);                                        
 var tmp33781344: bool;                                                                             
 var $recorded.state3781219: int;                                                                   
 var Array.Queue.A._length3781200: [Array.Queue.A]int;                                              
 var Queue._state3781327: [Queue]State;                                                             
 var Array.Queue.T._length3781233: [Array.Queue.T]int;                                              
 var tmp43781327: int;                                                                              
 var tmp43781177: int;                                                                              
 var tmp83781219: int;                                                                              
 var Queue._state3781350: [Queue]State;                                                             
 var tmp93781233: int;                                                                              
 var $result3781308: int;                                                                           
 var tmp63781317: int;                                                                              
 var this3781344: Queue;                                                                            
 var Queue.spec3781233: [Queue]Array.Queue.A;                                                       
 var Queue.head3781327: [Queue]int;                                                                 
 var Array.Queue.T._state3781344: [Array.Queue.T]State;                                             
 var $result3781177: int;                                                                           
 var Queue._state3781163: [Queue]State;                                                             
 var Queue.tail3781177: [Queue]int;                                                                 
 var Queue.head3781317: [Queue]int;                                                                 
 var tmp83781331: int;                                                                              
 var tmp83781250: int;                                                                              
 var this3781308: Queue;                                                                            
 var this3781177: Queue;                                                                            
 var tmp33781177: bool;                                                                             
 var tmp9: int;                                                                                     
 var Array.Queue.A._elems3781331: [Array.Queue.A]([int]int);                                        
 var Queue._lock3781163: [Queue]Tid;                                                                
 var $recorded.state3781350: int;                                                                   
 var tmp83781317: int;                                                                              
 var Queue.spec3781250: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._length3781308: [Array.Queue.A]int;                                              
 var tmp43781250: int;                                                                              
 var Queue.tail3781209: [Queue]int;                                                                 
 var Queue.spec3781177_post: [Queue]Array.Queue.A;                                                  
 var Array.Queue.T._length3781177_post: [Array.Queue.T]int;                                         
 var Queue.head3781344: [Queue]int;                                                                 
 var Queue.elems3781344: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._state3781308: [Array.Queue.T]State;                                             
 var moverPath3781219: MoverPath;                                                                   
 var tmp113781308: Array.Queue.T;                                                                   
 var result3781233: int;                                                                            
 var tmp43781209: int;                                                                              
 var Queue.tail3781250: [Queue]int;                                                                 
 var tid3781233: Tid;                                                                               
 var tmp163781327: int;                                                                             
 var Array.Queue.A._elems3781157: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._length3781344: [Array.Queue.T]int;                                              
 var Array.Queue.T._elems3781200: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._length3781163: [Array.Queue.A]int;                                              
 var tmp63781350: int;                                                                              
 var tmp33781177_post: bool;                                                                        
 var result3781327: int;                                                                            
 var tid3781250: Tid;                                                                               
 var tmp33781350: bool;                                                                             
 var mover3781233: Mover;                                                                           
 var tmp113781233: Array.Queue.T;                                                                   
 var tmp133781327: int;                                                                             
 var Array.Queue.A._state3781157: [Array.Queue.A]State;                                             
 var tid3781157: Tid;                                                                               
 var Array.Queue.A._state3781163: [Array.Queue.A]State;                                             
 var Queue._state3781200: [Queue]State;                                                             
 var tmp83781233: int;                                                                              
 var path3781209: int;                                                                              
 var Array.Queue.T._length3781200: [Array.Queue.T]int;                                              
 var Queue._lock3781344: [Queue]Tid;                                                                
 var Queue._lock3781177: [Queue]Tid;                                                                
 var tmp53781219: int;                                                                              
 var this3781209: Queue;                                                                            
 var $result3781209: int;                                                                           
 var tmp53781200: int;                                                                              
 var tmp73781331: Array.Queue.T;                                                                    
 var Array.Queue.A._state3781233: [Array.Queue.A]State;                                             
 var Queue._lock3781308: [Queue]Tid;                                                                
 var _pc3781209: Phase;                                                                             
 var Queue._lock3781233: [Queue]Tid;                                                                
 var path3781200: int;                                                                              
 var this3781327: Queue;                                                                            
 var result3781331: int;                                                                            
 var newSpec3781327: Array.Queue.A;                                                                 
 var $result3781157: int;                                                                           
 var Queue._state3781233: [Queue]State;                                                             
 var tmp113781327: Array.Queue.T;                                                                   
 var tid3781177: Tid;                                                                               
 var Queue.spec3781177: [Queue]Array.Queue.A;                                                       
 var tmp73781250: Array.Queue.T;                                                                    
 var tmp123781331: int;                                                                             
 var tid3781350: Tid;                                                                               
 var tmp53781177: int;                                                                              
 var tmp63781177: int;                                                                              
 var moverPath3781157: MoverPath;                                                                   
 var result3781200: int;                                                                            
 var tmp143781327: Array.Queue.A;                                                                   
 var Queue.head3781219: [Queue]int;                                                                 
 var Array.Queue.A._length3781233: [Array.Queue.A]int;                                              
 var Array.Queue.T._state3781233: [Array.Queue.T]State;                                             
 var Queue._lock3781317: [Queue]Tid;                                                                
 var Array.Queue.A._state3781177: [Array.Queue.A]State;                                             
 var Queue.tail3781350: [Queue]int;                                                                 
 var Array.Queue.A._length3781209: [Array.Queue.A]int;                                              
 var tmp63781250: int;                                                                              
 var Array.Queue.A._state3781200: [Array.Queue.A]State;                                             
 var $result3781331: int;                                                                           
 var Queue.spec3781327: [Queue]Array.Queue.A;                                                       
 var tmp43781233: int;                                                                              
 var tmp113781219: Array.Queue.T;                                                                   
 var this3781317: Queue;                                                                            
 var Array.Queue.A._elems3781177_post: [Array.Queue.A]([int]int);                                   
 var Array.Queue.A._state3781177_post: [Array.Queue.A]State;                                        
 var Queue._state3781317: [Queue]State;                                                             
 var $result3781317: int;                                                                           
 var _pc3781219: Phase;                                                                             
 var tmp53781344: int;                                                                              
 var Array.Queue.T._state3781350: [Array.Queue.T]State;                                             
 var tmp113781331: Array.Queue.T;                                                                   
 var Queue._lock3781157: [Queue]Tid;                                                                
 var this3781163: Queue;                                                                            
 var Queue.elems3781317: [Queue]Array.Queue.T;                                                      
 var tmp83781209: int;                                                                              
 var this3781219: Queue;                                                                            
 var tmp103781327: int;                                                                             
 var tmp63781308: int;                                                                              
 var Array.Queue.T._length3781350: [Array.Queue.T]int;                                              
 var newSpec3781308: Array.Queue.A;                                                                 
 var this3781157: Queue;                                                                            
 var moverPath3781200: MoverPath;                                                                   
 var Array.Queue.T._length3781308: [Array.Queue.T]int;                                              
 var Queue.tail3781233: [Queue]int;                                                                 
 var $recorded.state3781177: int;                                                                   
 var tid3781308: Tid;                                                                               
 var Array.Queue.A._elems3781219: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._state3781331: [Array.Queue.T]State;                                             
 var Queue._lock3781327: [Queue]Tid;                                                                
 var tmp43781350: int;                                                                              
 var path3781327: int;                                                                              
 var tmp143781250: Array.Queue.A;                                                                   
 var Queue._state3781250: [Queue]State;                                                             
 var _pc3781331: Phase;                                                                             
 var tmp10: int;                                                                                    
 var $recorded.state3781331: int;                                                                   
 var tmp15: int;                                                                                    
 var Queue.elems3781327: [Queue]Array.Queue.T;                                                      
 var tmp53781250: int;                                                                              
 var Array.Queue.A._elems3781233: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._length3781350: [Array.Queue.A]int;                                              
 var Queue.spec3781157: [Queue]Array.Queue.A;                                                       
 var tmp13: int;                                                                                    
 var Array.Queue.A._length3781344: [Array.Queue.A]int;                                              
 var tmp63781200: int;                                                                              
 var result3781308: int;                                                                            
 var Array.Queue.T._state3781219: [Array.Queue.T]State;                                             
 var Array.Queue.A._length3781177_post: [Array.Queue.A]int;                                         
 var tmp63781177_post: int;                                                                         
 var Queue._state3781219: [Queue]State;                                                             
 var Queue.elems3781331: [Queue]Array.Queue.T;                                                      
 var _pc3781177: Phase;                                                                             
 var tmp33781219: bool;                                                                             
 var Queue.spec3781344: [Queue]Array.Queue.A;                                                       
 var $result3781200: int;                                                                           
 var tmp33781327: bool;                                                                             
 var newSpec3781331: Array.Queue.A;                                                                 
 var Queue.head3781350: [Queue]int;                                                                 
 var tmp143781331: Array.Queue.A;                                                                   
 var tmp103781331: int;                                                                             
 var tmp43781157: int;                                                                              
 var path3781157: int;                                                                              
 var Queue.head3781209: [Queue]int;                                                                 
 var _pc3781157: Phase;                                                                             
 var Array.Queue.A._length3781157: [Array.Queue.A]int;                                              
 var Array.Queue.A._state3781350: [Array.Queue.A]State;                                             
 var Queue.elems3781308: [Queue]Array.Queue.T;                                                      
 var Queue._state3781331: [Queue]State;                                                             
 var tmp53781308: int;                                                                              
 var tmp43781308: int;                                                                              
 var tmp53781317: int;                                                                              
 var tmp103781308: int;                                                                             
 var Queue._lock3781209: [Queue]Tid;                                                                
 var Array.Queue.T._elems3781163: [Array.Queue.T]([int]int);                                        
 var tmp93781317: int;                                                                              
 var tmp63781344: int;                                                                              
 var Array.Queue.T._state3781177_post: [Array.Queue.T]State;                                        
 var tmp123781308: int;                                                                             
 var tmp53781350: int;                                                                              
 var path3781250: int;                                                                              
 var Array.Queue.T._elems3781177_post: [Array.Queue.T]([int]int);                                   
 var tmp7: Array.Queue.T;                                                                           
 var Array.Queue.T._state3781157: [Array.Queue.T]State;                                             
 var Array.Queue.T._elems3781331: [Array.Queue.T]([int]int);                                        
 var tmp93781209: int;                                                                              
 var tmp103781250: int;                                                                             
 var tmp12: int;                                                                                    
 var Array.Queue.A._elems3781317: [Array.Queue.A]([int]int);                                        
 var tmp33781209: bool;                                                                             
 var tmp133781308: int;                                                                             
 var tmp123781250: int;                                                                             
 var tmp163781331: int;                                                                             
 var mover3781317: Mover;                                                                           
 var Queue._state3781177: [Queue]State;                                                             
 var tmp133781317: int;                                                                             
 var tmp33781163: bool;                                                                             
 var Array.Queue.A._elems3781250: [Array.Queue.A]([int]int);                                        
 var Queue.spec3781163: [Queue]Array.Queue.A;                                                       
 var Queue.spec3781200: [Queue]Array.Queue.A;                                                       
 var Queue.elems3781157: [Queue]Array.Queue.T;                                                      
 var mover3781209: Mover;                                                                           
 var Array.Queue.T._length3781157: [Array.Queue.T]int;                                              
 var mover3781308: Mover;                                                                           
 var Queue._lock3781200: [Queue]Tid;                                                                
 var Queue.head3781250: [Queue]int;                                                                 
 var Array.Queue.T._elems3781219: [Array.Queue.T]([int]int);                                        
 var tid3781209: Tid;                                                                               
 var tmp33781250: bool;                                                                             
 var Array.Queue.T._elems3781317: [Array.Queue.T]([int]int);                                        
 var tmp73781219: Array.Queue.T;                                                                    
 var mover3781163: Mover;                                                                           
 var moverPath3781209: MoverPath;                                                                   
 var this3781233: Queue;                                                                            
 var Array.Queue.T._state3781200: [Array.Queue.T]State;                                             
 var tmp33781308: bool;                                                                             
 var $recorded.state3781177_post: int;                                                              
 var this3781200: Queue;                                                                            
 var Queue.elems3781163: [Queue]Array.Queue.T;                                                      
 var $result3781327: int;                                                                           
 var tmp33781200: bool;                                                                             
 var tmp3: bool;                                                                                    
 var tmp123781327: int;                                                                             
 var tmp113781250: Array.Queue.T;                                                                   
 var path3781163: int;                                                                              
 var this3781350: Queue;                                                                            
 var Queue._lock3781177_post: [Queue]Tid;                                                           
 var Array.Queue.T._elems3781209: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._elems3781177: [Array.Queue.A]([int]int);                                        
 var tmp33781157: bool;                                                                             
 var tmp73781200: Array.Queue.T;                                                                    
 var $result3781219: int;                                                                           
 var Queue._lock3781219: [Queue]Tid;                                                                
 var Array.Queue.T._state3781327: [Array.Queue.T]State;                                             
 var tmp143781308: Array.Queue.A;                                                                   
 var Queue.tail3781327: [Queue]int;                                                                 
 var Queue.tail3781200: [Queue]int;                                                                 
 var path3781308: int;                                                                              
 var Queue._state3781177_post: [Queue]State;                                                        
 var result3781317: int;                                                                            
 var Array.Queue.A._elems3781344: [Array.Queue.A]([int]int);                                        
 var mover3781327: Mover;                                                                           
 var $result3781350: int;                                                                           
 var tmp43781177_post: int;                                                                         
 var $result3781177_post: int;                                                                      
 var tmp53781163: int;                                                                              
 var tmp113781317: Array.Queue.T;                                                                   
 var result3781219: int;                                                                            
 var tmp63781327: int;                                                                              
 var tmp43781344: int;                                                                              
 var tmp153781317: int;                                                                             
 var Queue._lock3781250: [Queue]Tid;                                                                
 var tid3781344: Tid;                                                                               
 var Queue.head3781308: [Queue]int;                                                                 
 var Queue.head3781163: [Queue]int;                                                                 
 var tmp163781317: int;                                                                             
 var Array.Queue.T._length3781219: [Array.Queue.T]int;                                              
 var Array.Queue.T._length3781327: [Array.Queue.T]int;                                              
 var tmp63781209: int;                                                                              
 var $result3781344: int;                                                                           
 var moverPath3781233: MoverPath;                                                                   
 var Array.Queue.A._elems3781308: [Array.Queue.A]([int]int);                                        
 var Queue._lock3781350: [Queue]Tid;                                                                
 var Array.Queue.A._elems3781163: [Array.Queue.A]([int]int);                                        
 var tmp53781233: int;                                                                              
 var tmp93781331: int;                                                                              
 var Array.Queue.T._length3781250: [Array.Queue.T]int;                                              
 var Queue.elems3781233: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._elems3781327: [Array.Queue.T]([int]int);                                        
 var tmp73781308: Array.Queue.T;                                                                    
 var tmp33781331: bool;                                                                             
 var Array.Queue.T._elems3781177: [Array.Queue.T]([int]int);                                        
 var tmp83781327: int;                                                                              
 var newSpec3781250: Array.Queue.A;                                                                 
 var tid3781327: Tid;                                                                               
 var Queue.head3781233: [Queue]int;                                                                 
 var Array.Queue.T._elems3781344: [Array.Queue.T]([int]int);                                        
 var Queue._state3781308: [Queue]State;                                                             
 var $recorded.state3781317: int;                                                                   
 var moverPath3781250: MoverPath;                                                                   
 var newSpec: Array.Queue.A;                                                                        
 var tmp123781317: int;                                                                             
 var tid3781200: Tid;                                                                               
 var Queue.spec3781331: [Queue]Array.Queue.A;                                                       
 var _pc3781163: Phase;                                                                             
 var Array.Queue.T._length3781331: [Array.Queue.T]int;                                              
 var Array.Queue.A._length3781317: [Array.Queue.A]int;                                              
 var Array.Queue.A._elems3781350: [Array.Queue.A]([int]int);                                        
 var mover3781157: Mover;                                                                           
 var $recorded.state3781200: int;                                                                   
 var Array.Queue.A._state3781317: [Array.Queue.A]State;                                             
 var Array.Queue.A._elems3781209: [Array.Queue.A]([int]int);                                        
 var $result3781250: int;                                                                           
 var Array.Queue.A._length3781327: [Array.Queue.A]int;                                              
 var Array.Queue.A._length3781250: [Array.Queue.A]int;                                              
 var newSpec3781317: Array.Queue.A;                                                                 
 var Queue.head3781331: [Queue]int;                                                                 
 var Queue.elems3781177: [Queue]Array.Queue.T;                                                      
 var tmp4: int;                                                                                     
 var Array.Queue.A._state3781250: [Array.Queue.A]State;                                             
 var tmp16: int;                                                                                    
 var tmp43781331: int;                                                                              
 var Queue.spec3781317: [Queue]Array.Queue.A;                                                       
 var tmp6: int;                                                                                     
 var Queue.tail3781163: [Queue]int;                                                                 
 var $recorded.state3781250: int;                                                                   
 var _pc3781350: Phase;                                                                             
 var tmp133781250: int;                                                                             
 var $recorded.state3781344: int;                                                                   
 var Array.Queue.A._length3781177: [Array.Queue.A]int;                                              
 var Array.Queue.T._state3781250: [Array.Queue.T]State;                                             
 var tmp63781233: int;                                                                              
 var result3781250: int;                                                                            
 var $result3781163: int;                                                                           
 var Array.Queue.A._elems3781327: [Array.Queue.A]([int]int);                                        
 var _pc3781317: Phase;                                                                             
 var tmp63781331: int;                                                                              
 var tmp153781327: int;                                                                             
 var tmp133781331: int;                                                                             
 var Array.Queue.T._state3781317: [Array.Queue.T]State;                                             
 var path3781317: int;                                                                              
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
 assert true;                                                                                              // (41.18): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 47.9: bool tmp3;                                                                                
                                                                                                    
                                                                                                    
 // 47.9: int tmp4;                                                                                 
                                                                                                    
                                                                                                    
 // 47.9: int tmp5;                                                                                 
                                                                                                    
                                                                                                    
 // 47.9: tmp5 := this.tail;                                                                        
                                                                                                    
                                                                                                    
 moverPath3781157 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781157 := m#moverPath(moverPath3781157);                                                     
 path3781157 := p#moverPath(moverPath3781157);                                                      
 assume Queue._state3781157 == Queue._state && Queue.elems3781157 == Queue.elems && Queue.head3781157 == Queue.head && Queue.tail3781157 == Queue.tail && Queue.spec3781157 == Queue.spec && Queue._lock3781157 == Queue._lock && Array.Queue.T._state3781157 == Array.Queue.T._state && Array.Queue.T._elems3781157 == Array.Queue.T._elems && Array.Queue.T._length3781157 == Array.Queue.T._length && Array.Queue.A._state3781157 == Array.Queue.A._state && Array.Queue.A._elems3781157 == Array.Queue.A._elems && Array.Queue.A._length3781157 == Array.Queue.A._length && tmp53781157 == tmp5 && tmp43781157 == tmp4 && tmp33781157 == tmp3 && $result3781157 == $result && this3781157 == this && tid3781157 == tid && _pc3781157 == _pc;
 assume $recorded.state3781157 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (47.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781157);                                                              
 assert _pc != PhaseError;                                                                                 // (47.9): Reduction failure
 tmp5 := Queue.tail[this];                                                                          
                                                                                                    
 // 47.9: int tmp6;                                                                                 
                                                                                                    
                                                                                                    
 // 47.9: tmp6 := this.head;                                                                        
                                                                                                    
                                                                                                    
 moverPath3781163 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781163 := m#moverPath(moverPath3781163);                                                     
 path3781163 := p#moverPath(moverPath3781163);                                                      
 assume Queue._state3781163 == Queue._state && Queue.elems3781163 == Queue.elems && Queue.head3781163 == Queue.head && Queue.tail3781163 == Queue.tail && Queue.spec3781163 == Queue.spec && Queue._lock3781163 == Queue._lock && Array.Queue.T._state3781163 == Array.Queue.T._state && Array.Queue.T._elems3781163 == Array.Queue.T._elems && Array.Queue.T._length3781163 == Array.Queue.T._length && Array.Queue.A._state3781163 == Array.Queue.A._state && Array.Queue.A._elems3781163 == Array.Queue.A._elems && Array.Queue.A._length3781163 == Array.Queue.A._length && tmp63781163 == tmp6 && tmp53781163 == tmp5 && tmp43781163 == tmp4 && tmp33781163 == tmp3 && $result3781163 == $result && this3781163 == this && tid3781163 == tid && _pc3781163 == _pc;
 assume $recorded.state3781163 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (47.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781163);                                                              
 assert _pc != PhaseError;                                                                                 // (47.9): Reduction failure
 tmp6 := Queue.head[this];                                                                          
                                                                                                    
 // 47.9: tmp4 = tmp5 - tmp6;                                                                       
                                                                                                    
 tmp4 := (tmp5-tmp6);                                                                               
                                                                                                    
 // 47.9: tmp3 = tmp4 > 0;                                                                          
                                                                                                    
 tmp3 := (tmp4>0);                                                                                  
 if (tmp3 /* lowered ((Queue.tail[this]-Queue.head[this])>0) */) {                                  
                                                                                                    
  // 48.13: yield;                                                                                  
                                                                                                    
  assume Queue._state3781177 == Queue._state && Queue.elems3781177 == Queue.elems && Queue.head3781177 == Queue.head && Queue.tail3781177 == Queue.tail && Queue.spec3781177 == Queue.spec && Queue._lock3781177 == Queue._lock && Array.Queue.T._state3781177 == Array.Queue.T._state && Array.Queue.T._elems3781177 == Array.Queue.T._elems && Array.Queue.T._length3781177 == Array.Queue.T._length && Array.Queue.A._state3781177 == Array.Queue.A._state && Array.Queue.A._elems3781177 == Array.Queue.A._elems && Array.Queue.A._length3781177 == Array.Queue.A._length && tmp63781177 == tmp6 && tmp53781177 == tmp5 && tmp43781177 == tmp4 && tmp33781177 == tmp3 && $result3781177 == $result && this3781177 == this && tid3781177 == tid;
  assume $recorded.state3781177 == 1;                                                               
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  call Yield(tid);                                                                                  
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (48.13): Object invariant may not hold.
  _pc := PreCommit;                                                                                 
  assume Queue._state3781177_post == Queue._state && Queue.elems3781177_post == Queue.elems && Queue.head3781177_post == Queue.head && Queue.tail3781177_post == Queue.tail && Queue.spec3781177_post == Queue.spec && Queue._lock3781177_post == Queue._lock && Array.Queue.T._state3781177_post == Array.Queue.T._state && Array.Queue.T._elems3781177_post == Array.Queue.T._elems && Array.Queue.T._length3781177_post == Array.Queue.T._length && Array.Queue.A._state3781177_post == Array.Queue.A._state && Array.Queue.A._elems3781177_post == Array.Queue.A._elems && Array.Queue.A._length3781177_post == Array.Queue.A._length && tmp63781177_post == tmp6 && tmp53781177_post == tmp5 && tmp43781177_post == tmp4 && tmp33781177_post == tmp3 && $result3781177_post == $result && this3781177_post == this && tid3781177_post == tid;
  assume $recorded.state3781177_post == 1;                                                          
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (49.27): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assume Queue._lock[this] == Tid.null;                                                             
  _pc := transition(_pc, _R);                                                                       
  assert _pc != PhaseError;                                                                                // (49.27): Reduction failure
  Queue._lock[this] := tid;                                                                         
                                                                                                    
  // 50.17: assume this.tail - this.head > 0;                                                       
                                                                                                    
  assume ((Queue.tail[this]-Queue.head[this])>0);                                                   
                                                                                                    
  // 51.17: int result;                                                                             
                                                                                                    
                                                                                                    
  // 51.17: [Queue.T{this}] tmp7;                                                                   
                                                                                                    
                                                                                                    
  // 51.17: tmp7 := this.elems;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781200 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781200 := m#moverPath(moverPath3781200);                                                    
  path3781200 := p#moverPath(moverPath3781200);                                                     
  assume Queue._state3781200 == Queue._state && Queue.elems3781200 == Queue.elems && Queue.head3781200 == Queue.head && Queue.tail3781200 == Queue.tail && Queue.spec3781200 == Queue.spec && Queue._lock3781200 == Queue._lock && Array.Queue.T._state3781200 == Array.Queue.T._state && Array.Queue.T._elems3781200 == Array.Queue.T._elems && Array.Queue.T._length3781200 == Array.Queue.T._length && Array.Queue.A._state3781200 == Array.Queue.A._state && Array.Queue.A._elems3781200 == Array.Queue.A._elems && Array.Queue.A._length3781200 == Array.Queue.A._length && tmp73781200 == tmp7 && result3781200 == result && tmp63781200 == tmp6 && tmp53781200 == tmp5 && tmp43781200 == tmp4 && tmp33781200 == tmp3 && $result3781200 == $result && this3781200 == this && tid3781200 == tid && _pc3781200 == _pc;
  assume $recorded.state3781200 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (51.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781200);                                                             
  assert _pc != PhaseError;                                                                                // (51.17): Reduction failure
  tmp7 := Queue.elems[this];                                                                        
                                                                                                    
  // 51.17: int tmp8;                                                                               
                                                                                                    
                                                                                                    
  // 51.17: int tmp9;                                                                               
                                                                                                    
                                                                                                    
  // 51.17: tmp9 := this.head;                                                                      
                                                                                                    
                                                                                                    
  moverPath3781209 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781209 := m#moverPath(moverPath3781209);                                                    
  path3781209 := p#moverPath(moverPath3781209);                                                     
  assume Queue._state3781209 == Queue._state && Queue.elems3781209 == Queue.elems && Queue.head3781209 == Queue.head && Queue.tail3781209 == Queue.tail && Queue.spec3781209 == Queue.spec && Queue._lock3781209 == Queue._lock && Array.Queue.T._state3781209 == Array.Queue.T._state && Array.Queue.T._elems3781209 == Array.Queue.T._elems && Array.Queue.T._length3781209 == Array.Queue.T._length && Array.Queue.A._state3781209 == Array.Queue.A._state && Array.Queue.A._elems3781209 == Array.Queue.A._elems && Array.Queue.A._length3781209 == Array.Queue.A._length && tmp93781209 == tmp9 && tmp83781209 == tmp8 && tmp73781209 == tmp7 && result3781209 == result && tmp63781209 == tmp6 && tmp53781209 == tmp5 && tmp43781209 == tmp4 && tmp33781209 == tmp3 && $result3781209 == $result && this3781209 == this && tid3781209 == tid && _pc3781209 == _pc;
  assume $recorded.state3781209 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (51.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781209);                                                             
  assert _pc != PhaseError;                                                                                // (51.17): Reduction failure
  tmp9 := Queue.head[this];                                                                         
                                                                                                    
  // 51.17: int tmp10;                                                                              
                                                                                                    
                                                                                                    
  // 51.17: [Queue.T{this}] tmp11;                                                                  
                                                                                                    
                                                                                                    
  // 51.17: tmp11 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3781219 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781219 := m#moverPath(moverPath3781219);                                                    
  path3781219 := p#moverPath(moverPath3781219);                                                     
  assume Queue._state3781219 == Queue._state && Queue.elems3781219 == Queue.elems && Queue.head3781219 == Queue.head && Queue.tail3781219 == Queue.tail && Queue.spec3781219 == Queue.spec && Queue._lock3781219 == Queue._lock && Array.Queue.T._state3781219 == Array.Queue.T._state && Array.Queue.T._elems3781219 == Array.Queue.T._elems && Array.Queue.T._length3781219 == Array.Queue.T._length && Array.Queue.A._state3781219 == Array.Queue.A._state && Array.Queue.A._elems3781219 == Array.Queue.A._elems && Array.Queue.A._length3781219 == Array.Queue.A._length && tmp113781219 == tmp11 && tmp103781219 == tmp10 && tmp93781219 == tmp9 && tmp83781219 == tmp8 && tmp73781219 == tmp7 && result3781219 == result && tmp63781219 == tmp6 && tmp53781219 == tmp5 && tmp43781219 == tmp4 && tmp33781219 == tmp3 && $result3781219 == $result && this3781219 == this && tid3781219 == tid && _pc3781219 == _pc;
  assume $recorded.state3781219 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (51.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781219);                                                             
  assert _pc != PhaseError;                                                                                // (51.17): Reduction failure
  tmp11 := Queue.elems[this];                                                                       
                                                                                                    
  // 51.17: tmp10 = tmp11.length;                                                                   
                                                                                                    
  tmp10 := Array.Queue.T._length[tmp11];                                                            
                                                                                                    
  // 51.17: tmp8 = tmp9 % tmp10;                                                                    
                                                                                                    
  tmp8 := MOD(tmp9, tmp10);                                                                         
                                                                                                    
  // 51.17: result := tmp7[tmp8];                                                                   
                                                                                                    
                                                                                                    
  moverPath3781233 := ReadEval.Array.Queue.T(tid: Tid,this: Queue,tmp7: Array.Queue.T,tmp8: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781233 := m#moverPath(moverPath3781233);                                                    
  path3781233 := p#moverPath(moverPath3781233);                                                     
  assume Queue._state3781233 == Queue._state && Queue.elems3781233 == Queue.elems && Queue.head3781233 == Queue.head && Queue.tail3781233 == Queue.tail && Queue.spec3781233 == Queue.spec && Queue._lock3781233 == Queue._lock && Array.Queue.T._state3781233 == Array.Queue.T._state && Array.Queue.T._elems3781233 == Array.Queue.T._elems && Array.Queue.T._length3781233 == Array.Queue.T._length && Array.Queue.A._state3781233 == Array.Queue.A._state && Array.Queue.A._elems3781233 == Array.Queue.A._elems && Array.Queue.A._length3781233 == Array.Queue.A._length && tmp113781233 == tmp11 && tmp103781233 == tmp10 && tmp93781233 == tmp9 && tmp83781233 == tmp8 && tmp73781233 == tmp7 && result3781233 == result && tmp63781233 == tmp6 && tmp53781233 == tmp5 && tmp43781233 == tmp4 && tmp33781233 == tmp3 && $result3781233 == $result && this3781233 == this && tid3781233 == tid && _pc3781233 == _pc;
  assume $recorded.state3781233 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp7 != Array.Queue.T.null;                                                               
  } else {                                                                                          
   assert tmp7 != Array.Queue.T.null;                                                                      // (51.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp8;                                                                                
  } else {                                                                                          
   assert 0 <= tmp8;                                                                                       // (51.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp8 < Array.Queue.T._length[tmp7];                                                       
  } else {                                                                                          
   assert tmp8 < Array.Queue.T._length[tmp7];                                                              // (51.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781233);                                                             
  assert _pc != PhaseError;                                                                                // (51.17): Reduction failure
  result := Array.Queue.T._elems[tmp7][tmp8];                                                       
                                                                                                    
  // 52.17: [Queue.A{this}] newSpec;                                                                
                                                                                                    
                                                                                                    
  // 52.17: int tmp12;                                                                              
                                                                                                    
                                                                                                    
  // 52.17: int tmp13;                                                                              
                                                                                                    
                                                                                                    
  // 52.17: [Queue.A{this}] tmp14;                                                                  
                                                                                                    
                                                                                                    
  // 52.17: tmp14 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781250 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781250 := m#moverPath(moverPath3781250);                                                    
  path3781250 := p#moverPath(moverPath3781250);                                                     
  assume Queue._state3781250 == Queue._state && Queue.elems3781250 == Queue.elems && Queue.head3781250 == Queue.head && Queue.tail3781250 == Queue.tail && Queue.spec3781250 == Queue.spec && Queue._lock3781250 == Queue._lock && Array.Queue.T._state3781250 == Array.Queue.T._state && Array.Queue.T._elems3781250 == Array.Queue.T._elems && Array.Queue.T._length3781250 == Array.Queue.T._length && Array.Queue.A._state3781250 == Array.Queue.A._state && Array.Queue.A._elems3781250 == Array.Queue.A._elems && Array.Queue.A._length3781250 == Array.Queue.A._length && tmp143781250 == tmp14 && tmp133781250 == tmp13 && tmp123781250 == tmp12 && newSpec3781250 == newSpec && tmp113781250 == tmp11 && tmp103781250 == tmp10 && tmp93781250 == tmp9 && tmp83781250 == tmp8 && tmp73781250 == tmp7 && result3781250 == result && tmp63781250 == tmp6 && tmp53781250 == tmp5 && tmp43781250 == tmp4 && tmp33781250 == tmp3 && $result3781250 == $result && this3781250 == this && tid3781250 == tid && _pc3781250 == _pc;
  assume $recorded.state3781250 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (52.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781250);                                                             
  assert _pc != PhaseError;                                                                                // (52.17): Reduction failure
  tmp14 := Queue.spec[this];                                                                        
                                                                                                    
  // 52.17: tmp13 = tmp14.length;                                                                   
                                                                                                    
  tmp13 := Array.Queue.A._length[tmp14];                                                            
                                                                                                    
  // 52.17: tmp12 = tmp13 - 1;                                                                      
                                                                                                    
  tmp12 := (tmp13-1);                                                                               
                                                                                                    
  // 52.17: newSpec = new [Queue.A{this}](tmp12);                                                   
                                                                                                    
  havoc newSpec;                                                                                    
  assume isFresh(Array.Queue.A._state[newSpec]);                                                    
  assume Array.Queue.A._length[newSpec] == tmp12;                                                   
  assume Array.Queue.A._this[newSpec] == this;                                                      
  Array.Queue.A._state[newSpec] := LOCAL(tid);                                                      
  assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[newSpec][_i] == 0);                   
                                                                                                    
  // 53.17: assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
                                                                                                    
  assume (forall i: int ::  ((((0<=i)&&(i<(Queue.tail[this]-(Queue.head[this]+1))))==>(Array.Queue.A._elems[newSpec][i]==Array.Queue.A._elems[Queue.spec[this]][(i+1)]))));
                                                                                                    
                                                                                                    
  // 54.17: this.spec := newSpec;                                                                   
                                                                                                    
                                                                                                    
  moverPath3781308 := WriteEval.Queue.spec(tid: Tid,this: Queue,newSpec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781308 := m#moverPath(moverPath3781308);                                                    
  path3781308 := p#moverPath(moverPath3781308);                                                     
  assume Queue._state3781308 == Queue._state && Queue.elems3781308 == Queue.elems && Queue.head3781308 == Queue.head && Queue.tail3781308 == Queue.tail && Queue.spec3781308 == Queue.spec && Queue._lock3781308 == Queue._lock && Array.Queue.T._state3781308 == Array.Queue.T._state && Array.Queue.T._elems3781308 == Array.Queue.T._elems && Array.Queue.T._length3781308 == Array.Queue.T._length && Array.Queue.A._state3781308 == Array.Queue.A._state && Array.Queue.A._elems3781308 == Array.Queue.A._elems && Array.Queue.A._length3781308 == Array.Queue.A._length && tmp143781308 == tmp14 && tmp133781308 == tmp13 && tmp123781308 == tmp12 && newSpec3781308 == newSpec && tmp113781308 == tmp11 && tmp103781308 == tmp10 && tmp93781308 == tmp9 && tmp83781308 == tmp8 && tmp73781308 == tmp7 && result3781308 == result && tmp63781308 == tmp6 && tmp53781308 == tmp5 && tmp43781308 == tmp4 && tmp33781308 == tmp3 && $result3781308 == $result && this3781308 == this && tid3781308 == tid && _pc3781308 == _pc;
  assume $recorded.state3781308 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (54.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3781308);                                                             
  assert _pc != PhaseError;                                                                                // (54.17): Reduction failure
  Queue.spec[this] := newSpec;                                                                      
  if (isLocal(Array.Queue.A._state[newSpec], tid)) {                                                
   Array.Queue.A._state[newSpec] := SHARED();                                                       
   if (isLocal(Queue._state[Array.Queue.A._this[newSpec]], tid)) {                                  
    Queue._state[Array.Queue.A._this[newSpec]] := SHARED();                                         
    assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[newSpec]]]);            // (54.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
    assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[newSpec]]]);             // (54.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
   }                                                                                                
  }                                                                                                 
                                                                                                    
                                                                                                    
  // 55.17: int tmp15;                                                                              
                                                                                                    
                                                                                                    
  // 55.17: int tmp16;                                                                              
                                                                                                    
                                                                                                    
  // 55.17: tmp16 := this.head;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781317 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781317 := m#moverPath(moverPath3781317);                                                    
  path3781317 := p#moverPath(moverPath3781317);                                                     
  assume Queue._state3781317 == Queue._state && Queue.elems3781317 == Queue.elems && Queue.head3781317 == Queue.head && Queue.tail3781317 == Queue.tail && Queue.spec3781317 == Queue.spec && Queue._lock3781317 == Queue._lock && Array.Queue.T._state3781317 == Array.Queue.T._state && Array.Queue.T._elems3781317 == Array.Queue.T._elems && Array.Queue.T._length3781317 == Array.Queue.T._length && Array.Queue.A._state3781317 == Array.Queue.A._state && Array.Queue.A._elems3781317 == Array.Queue.A._elems && Array.Queue.A._length3781317 == Array.Queue.A._length && tmp163781317 == tmp16 && tmp153781317 == tmp15 && tmp143781317 == tmp14 && tmp133781317 == tmp13 && tmp123781317 == tmp12 && newSpec3781317 == newSpec && tmp113781317 == tmp11 && tmp103781317 == tmp10 && tmp93781317 == tmp9 && tmp83781317 == tmp8 && tmp73781317 == tmp7 && result3781317 == result && tmp63781317 == tmp6 && tmp53781317 == tmp5 && tmp43781317 == tmp4 && tmp33781317 == tmp3 && $result3781317 == $result && this3781317 == this && tid3781317 == tid && _pc3781317 == _pc;
  assume $recorded.state3781317 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (55.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781317);                                                             
  assert _pc != PhaseError;                                                                                // (55.17): Reduction failure
  tmp16 := Queue.head[this];                                                                        
                                                                                                    
  // 55.17: tmp15 = tmp16 + 1;                                                                      
                                                                                                    
  tmp15 := (tmp16+1);                                                                               
                                                                                                    
                                                                                                    
  // 55.17: this.head := tmp15;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781327 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp15: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781327 := m#moverPath(moverPath3781327);                                                    
  path3781327 := p#moverPath(moverPath3781327);                                                     
  assume Queue._state3781327 == Queue._state && Queue.elems3781327 == Queue.elems && Queue.head3781327 == Queue.head && Queue.tail3781327 == Queue.tail && Queue.spec3781327 == Queue.spec && Queue._lock3781327 == Queue._lock && Array.Queue.T._state3781327 == Array.Queue.T._state && Array.Queue.T._elems3781327 == Array.Queue.T._elems && Array.Queue.T._length3781327 == Array.Queue.T._length && Array.Queue.A._state3781327 == Array.Queue.A._state && Array.Queue.A._elems3781327 == Array.Queue.A._elems && Array.Queue.A._length3781327 == Array.Queue.A._length && tmp163781327 == tmp16 && tmp153781327 == tmp15 && tmp143781327 == tmp14 && tmp133781327 == tmp13 && tmp123781327 == tmp12 && newSpec3781327 == newSpec && tmp113781327 == tmp11 && tmp103781327 == tmp10 && tmp93781327 == tmp9 && tmp83781327 == tmp8 && tmp73781327 == tmp7 && result3781327 == result && tmp63781327 == tmp6 && tmp53781327 == tmp5 && tmp43781327 == tmp4 && tmp33781327 == tmp3 && $result3781327 == $result && this3781327 == this && tid3781327 == tid && _pc3781327 == _pc;
  assume $recorded.state3781327 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (55.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3781327);                                                             
  assert _pc != PhaseError;                                                                                // (55.17): Reduction failure
  Queue.head[this] := tmp15;                                                                        
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (57.13): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (57.13): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (57.13): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
                                                                                                    
  // 56.17:  return result;                                                                         
                                                                                                    
  assume Queue._state3781331 == Queue._state && Queue.elems3781331 == Queue.elems && Queue.head3781331 == Queue.head && Queue.tail3781331 == Queue.tail && Queue.spec3781331 == Queue.spec && Queue._lock3781331 == Queue._lock && Array.Queue.T._state3781331 == Array.Queue.T._state && Array.Queue.T._elems3781331 == Array.Queue.T._elems && Array.Queue.T._length3781331 == Array.Queue.T._length && Array.Queue.A._state3781331 == Array.Queue.A._state && Array.Queue.A._elems3781331 == Array.Queue.A._elems && Array.Queue.A._length3781331 == Array.Queue.A._length && tmp163781331 == tmp16 && tmp153781331 == tmp15 && tmp143781331 == tmp14 && tmp133781331 == tmp13 && tmp123781331 == tmp12 && newSpec3781331 == newSpec && tmp113781331 == tmp11 && tmp103781331 == tmp10 && tmp93781331 == tmp9 && tmp83781331 == tmp8 && tmp73781331 == tmp7 && result3781331 == result && tmp63781331 == tmp6 && tmp53781331 == tmp5 && tmp43781331 == tmp4 && tmp33781331 == tmp3 && $result3781331 == $result && this3781331 == this && tid3781331 == tid;
  assume $recorded.state3781331 == 1;                                                               
  $result := result;                                                                                
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (56.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (56.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (56.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (56.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (56.17): Object invariant may not hold.
  return;                                                                                           
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (57.13): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (57.13): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (57.13): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
 } else {                                                                                           
                                                                                                    
  // 59.13: assume !(NextSpecStep(0));                                                              
                                                                                                    
  assume !(true);                                                                                   
                                                                                                    
  // 60.13:  return 0;                                                                              
                                                                                                    
  assume Queue._state3781344 == Queue._state && Queue.elems3781344 == Queue.elems && Queue.head3781344 == Queue.head && Queue.tail3781344 == Queue.tail && Queue.spec3781344 == Queue.spec && Queue._lock3781344 == Queue._lock && Array.Queue.T._state3781344 == Array.Queue.T._state && Array.Queue.T._elems3781344 == Array.Queue.T._elems && Array.Queue.T._length3781344 == Array.Queue.T._length && Array.Queue.A._state3781344 == Array.Queue.A._state && Array.Queue.A._elems3781344 == Array.Queue.A._elems && Array.Queue.A._length3781344 == Array.Queue.A._length && tmp63781344 == tmp6 && tmp53781344 == tmp5 && tmp43781344 == tmp4 && tmp33781344 == tmp3 && $result3781344 == $result && this3781344 == this && tid3781344 == tid;
  assume $recorded.state3781344 == 1;                                                               
  $result := 0;                                                                                     
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (60.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (60.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (60.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (60.13): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (60.13): Object invariant may not hold.
  return;                                                                                           
 }                                                                                                  
                                                                                                    
 // 46.26: // return -1;                                                                            
                                                                                                    
 assume Queue._state3781350 == Queue._state && Queue.elems3781350 == Queue.elems && Queue.head3781350 == Queue.head && Queue.tail3781350 == Queue.tail && Queue.spec3781350 == Queue.spec && Queue._lock3781350 == Queue._lock && Array.Queue.T._state3781350 == Array.Queue.T._state && Array.Queue.T._elems3781350 == Array.Queue.T._elems && Array.Queue.T._length3781350 == Array.Queue.T._length && Array.Queue.A._state3781350 == Array.Queue.A._state && Array.Queue.A._elems3781350 == Array.Queue.A._elems && Array.Queue.A._length3781350 == Array.Queue.A._length && tmp63781350 == tmp6 && tmp53781350 == tmp5 && tmp43781350 == tmp4 && tmp33781350 == tmp3 && $result3781350 == $result && this3781350 == this && tid3781350 == tid;
 assume $recorded.state3781350 == 1;                                                                
 $result := -1;                                                                                     
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (46.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (46.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (46.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (46.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (46.26): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Queue.enqueue(tid:Tid, this : Queue, x : int)                                            
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (65.5): Bad tid
requires isShared(Queue._state[this]);                                                                     // (65.5): this is not global
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires (tid==1);                                                                                  
                                                                                                    
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (65.5): Object invariant may not hold.
{                                                                                                   
 var tmp263781452: int;                                                                             
 var tmp283781551: int;                                                                             
 var Array.Queue.T._state3781398: [Array.Queue.T]State;                                             
 var Queue._state3781419: [Queue]State;                                                             
 var Queue.head3781398_post: [Queue]int;                                                            
 var Queue.spec3781532: [Queue]Array.Queue.A;                                                       
 var newSpec3781541: Array.Queue.A;                                                                 
 var Queue.head3781398: [Queue]int;                                                                 
 var moverPath3781365: MoverPath;                                                                   
 var tmp303781551: Array.Queue.A;                                                                   
 var tmp183781398_post: int;                                                                        
 var Queue._lock3781398_post: [Queue]Tid;                                                           
 var Array.Queue.A._state3781438: [Array.Queue.A]State;                                             
 var $recorded.state3781438: int;                                                                   
 var Array.Queue.A._elems3781541: [Array.Queue.A]([int]int);                                        
 var tmp23: Array.Queue.T;                                                                          
 var Array.Queue.A._length3781371: [Array.Queue.A]int;                                              
 var Array.Queue.A._length3781532: [Array.Queue.A]int;                                              
 var Array.Queue.A._elems3781387: [Array.Queue.A]([int]int);                                        
 var path3781419: int;                                                                              
 var Queue.tail3781398_post: [Queue]int;                                                            
 var mover3781551: Mover;                                                                           
 var Array.Queue.T._state3781419: [Array.Queue.T]State;                                             
 var Queue.elems3781541: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._state3781438: [Array.Queue.T]State;                                             
 var path3781371: int;                                                                              
 var tmp203781452: int;                                                                             
 var tmp173781398: bool;                                                                            
 var mover3781452: Mover;                                                                           
 var Array.Queue.T._length3781551: [Array.Queue.T]int;                                              
 var Array.Queue.A._state3781452: [Array.Queue.A]State;                                             
 var tid3781438: Tid;                                                                               
 var mover3781541: Mover;                                                                           
 var tmp243781532: int;                                                                             
 var Queue._lock3781365: [Queue]Tid;                                                                
 var tmp283781469: int;                                                                             
 var Array.Queue.A._length3781452: [Array.Queue.A]int;                                              
 var $recorded.state3781387: int;                                                                   
 var x3781428: int;                                                                                 
 var $recorded.state3781371: int;                                                                   
 var tmp323781551: int;                                                                             
 var Queue.elems3781551: [Queue]Array.Queue.T;                                                      
 var mover3781365: Mover;                                                                           
 var Array.Queue.T._state3781469: [Array.Queue.T]State;                                             
 var tid3781551: Tid;                                                                               
 var tmp173781387: bool;                                                                            
 var path3781469: int;                                                                              
 var tmp233781419: Array.Queue.T;                                                                   
 var Array.Queue.A._length3781398_post: [Array.Queue.A]int;                                         
 var this3781551: Queue;                                                                            
 var tmp193781419: int;                                                                             
 var Queue._state3781469: [Queue]State;                                                             
 var tmp273781541: Array.Queue.T;                                                                   
 var Array.Queue.T._state3781559: [Array.Queue.T]State;                                             
 var tid3781419: Tid;                                                                               
 var Queue.elems3781438: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._state3781532: [Array.Queue.A]State;                                             
 var path3781532: int;                                                                              
 var Array.Queue.A._elems3781419: [Array.Queue.A]([int]int);                                        
 var _pc3781428: Phase;                                                                             
 var tmp223781398_post: Array.Queue.T;                                                              
 var tmp273781469: Array.Queue.T;                                                                   
 var tmp223781532: Array.Queue.T;                                                                   
 var $recorded.state3781532: int;                                                                   
 var Array.Queue.A._elems3781452: [Array.Queue.A]([int]int);                                        
 var $recorded.state3781398: int;                                                                   
 var tmp253781438: int;                                                                             
 var tmp323781541: int;                                                                             
 var tmp213781541: int;                                                                             
 var mover3781469: Mover;                                                                           
 var tmp223781551: Array.Queue.T;                                                                   
 var tmp193781469: int;                                                                             
 var _pc3781387: Phase;                                                                             
 var Queue.head3781419: [Queue]int;                                                                 
 var tmp203781419: int;                                                                             
 var _pc3781398_post: Phase;                                                                        
 var tmp233781541: Array.Queue.T;                                                                   
 var tmp293781532: int;                                                                             
 var tmp32: int;                                                                                    
 var tmp193781452: int;                                                                             
 var this3781419: Queue;                                                                            
 var Array.Queue.A._elems3781532: [Array.Queue.A]([int]int);                                        
 var tmp263781541: int;                                                                             
 var Queue.elems3781365: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._length3781559: [Array.Queue.A]int;                                              
 var Queue._lock3781452: [Queue]Tid;                                                                
 var Array.Queue.T._state3781452: [Array.Queue.T]State;                                             
 var Queue._lock3781532: [Queue]Tid;                                                                
 var _pc3781398: Phase;                                                                             
 var path3781365: int;                                                                              
 var Array.Queue.T._state3781387: [Array.Queue.T]State;                                             
 var Queue._state3781428: [Queue]State;                                                             
 var Array.Queue.T._elems3781438: [Array.Queue.T]([int]int);                                        
 var _pc3781452: Phase;                                                                             
 var Array.Queue.A._elems3781428: [Array.Queue.A]([int]int);                                        
 var tid3781541: Tid;                                                                               
 var Queue._state3781387: [Queue]State;                                                             
 var tmp303781541: Array.Queue.A;                                                                   
 var tmp273781438: Array.Queue.T;                                                                   
 var Queue.tail3781551: [Queue]int;                                                                 
 var tmp233781469: Array.Queue.T;                                                                   
 var tmp253781428: int;                                                                             
 var Queue._lock3781387: [Queue]Tid;                                                                
 var tmp263781469: int;                                                                             
 var tmp183781469: int;                                                                             
 var Array.Queue.A._length3781428: [Array.Queue.A]int;                                              
 var Queue.head3781371: [Queue]int;                                                                 
 var moverPath3781541: MoverPath;                                                                   
 var this3781398: Queue;                                                                            
 var Array.Queue.A._elems3781559: [Array.Queue.A]([int]int);                                        
 var Queue.head3781428: [Queue]int;                                                                 
 var tmp183781387: int;                                                                             
 var tmp213781387: int;                                                                             
 var tmp193781541: int;                                                                             
 var Array.Queue.A._elems3781365: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3781398_post: [Array.Queue.A]State;                                        
 var newSpec3781469: Array.Queue.A;                                                                 
 var tmp173781428: bool;                                                                            
 var Queue.spec3781419: [Queue]Array.Queue.A;                                                       
 var moverPath3781452: MoverPath;                                                                   
 var tmp223781419: Array.Queue.T;                                                                   
 var tmp183781398: int;                                                                             
 var tmp203781551: int;                                                                             
 var mover3781387: Mover;                                                                           
 var this3781559: Queue;                                                                            
 var tmp233781428: Array.Queue.T;                                                                   
 var Array.Queue.T._length3781438: [Array.Queue.T]int;                                              
 var tmp173781452: bool;                                                                            
 var Array.Queue.T._length3781559: [Array.Queue.T]int;                                              
 var tmp193781398_post: int;                                                                        
 var tmp183781551: int;                                                                             
 var Array.Queue.T._length3781428: [Array.Queue.T]int;                                              
 var Queue.elems3781387: [Queue]Array.Queue.T;                                                      
 var $recorded.state3781398_post: int;                                                              
 var Queue.head3781532: [Queue]int;                                                                 
 var Array.Queue.A._state3781371: [Array.Queue.A]State;                                             
 var Array.Queue.A._state3781559: [Array.Queue.A]State;                                             
 var this3781532: Queue;                                                                            
 var Queue.tail3781371: [Queue]int;                                                                 
 var Queue.elems3781532: [Queue]Array.Queue.T;                                                      
 var tmp293781469: int;                                                                             
 var Queue.elems3781428: [Queue]Array.Queue.T;                                                      
 var $recorded.state3781559: int;                                                                   
 var tmp193781365: int;                                                                             
 var tmp233781438: Array.Queue.T;                                                                   
 var Queue._lock3781469: [Queue]Tid;                                                                
 var tmp183781532: int;                                                                             
 var Queue._lock3781541: [Queue]Tid;                                                                
 var tmp213781398: int;                                                                             
 var Queue.spec3781398_post: [Queue]Array.Queue.A;                                                  
 var this3781469: Queue;                                                                            
 var tmp293781551: int;                                                                             
 var tid3781532: Tid;                                                                               
 var x3781438: int;                                                                                 
 var _pc3781559: Phase;                                                                             
 var tmp243781438: int;                                                                             
 var Array.Queue.A._elems3781469: [Array.Queue.A]([int]int);                                        
 var tmp213781469: int;                                                                             
 var tmp21: int;                                                                                    
 var Array.Queue.A._length3781541: [Array.Queue.A]int;                                              
 var tmp193781559: int;                                                                             
 var Queue.elems3781452: [Queue]Array.Queue.T;                                                      
 var _pc3781371: Phase;                                                                             
 var tmp173781419: bool;                                                                            
 var Array.Queue.A._state3781541: [Array.Queue.A]State;                                             
 var tmp303781469: Array.Queue.A;                                                                   
 var tmp193781532: int;                                                                             
 var Queue.tail3781541: [Queue]int;                                                                 
 var Array.Queue.A._elems3781371: [Array.Queue.A]([int]int);                                        
 var Queue.tail3781452: [Queue]int;                                                                 
 var newSpec3781532: Array.Queue.A;                                                                 
 var Queue._lock3781428: [Queue]Tid;                                                                
 var Queue.head3781452: [Queue]int;                                                                 
 var tmp183781541: int;                                                                             
 var Queue.spec3781365: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._state3781419: [Array.Queue.A]State;                                             
 var tmp223781469: Array.Queue.T;                                                                   
 var Queue.spec3781371: [Queue]Array.Queue.A;                                                       
 var tmp203781532: int;                                                                             
 var $recorded.state3781551: int;                                                                   
 var mover3781532: Mover;                                                                           
 var tmp28: int;                                                                                    
 var Queue._lock3781438: [Queue]Tid;                                                                
 var tid3781387: Tid;                                                                               
 var path3781428: int;                                                                              
 var tmp293781541: int;                                                                             
 var this3781541: Queue;                                                                            
 var Array.Queue.T._elems3781398_post: [Array.Queue.T]([int]int);                                   
 var tmp263781438: int;                                                                             
 var tmp253781532: int;                                                                             
 var path3781541: int;                                                                              
 var x3781551: int;                                                                                 
 var Array.Queue.T._elems3781428: [Array.Queue.T]([int]int);                                        
 var _pc3781419: Phase;                                                                             
 var tmp183781452: int;                                                                             
 var Queue._state3781452: [Queue]State;                                                             
 var Array.Queue.A._state3781387: [Array.Queue.A]State;                                             
 var Queue.spec3781559: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._state3781398_post: [Array.Queue.T]State;                                        
 var Queue.tail3781398: [Queue]int;                                                                 
 var tmp203781371: int;                                                                             
 var Array.Queue.A._state3781398: [Array.Queue.A]State;                                             
 var moverPath3781532: MoverPath;                                                                   
 var tmp213781551: int;                                                                             
 var Queue.elems3781419: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._length3781398: [Array.Queue.T]int;                                              
 var tmp253781469: int;                                                                             
 var Array.Queue.T._length3781469: [Array.Queue.T]int;                                              
 var tmp203781387: int;                                                                             
 var Array.Queue.A._elems3781438: [Array.Queue.A]([int]int);                                        
 var tmp183781419: int;                                                                             
 var Queue.spec3781387: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._length3781541: [Array.Queue.T]int;                                              
 var tmp203781469: int;                                                                             
 var tid3781559: Tid;                                                                               
 var tmp263781532: int;                                                                             
 var tmp18: int;                                                                                    
 var $recorded.state3781452: int;                                                                   
 var moverPath3781469: MoverPath;                                                                   
 var Array.Queue.A._length3781387: [Array.Queue.A]int;                                              
 var x3781398: int;                                                                                 
 var tmp193781551: int;                                                                             
 var Queue.elems3781559: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._elems3781551: [Array.Queue.T]([int]int);                                        
 var tmp213781438: int;                                                                             
 var Queue.spec3781469: [Queue]Array.Queue.A;                                                       
 var this3781371: Queue;                                                                            
 var Array.Queue.T._elems3781541: [Array.Queue.T]([int]int);                                        
 var tmp173781532: bool;                                                                            
 var mover3781438: Mover;                                                                           
 var Array.Queue.T._length3781398_post: [Array.Queue.T]int;                                         
 var Array.Queue.A._length3781438: [Array.Queue.A]int;                                              
 var Array.Queue.T._elems3781365: [Array.Queue.T]([int]int);                                        
 var mover3781419: Mover;                                                                           
 var Queue.spec3781398: [Queue]Array.Queue.A;                                                       
 var Queue._lock3781559: [Queue]Tid;                                                                
 var Array.Queue.T._elems3781419: [Array.Queue.T]([int]int);                                        
 var Queue._state3781398: [Queue]State;                                                             
 var Array.Queue.T._elems3781452: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._length3781419: [Array.Queue.A]int;                                              
 var mover3781428: Mover;                                                                           
 var tmp213781428: int;                                                                             
 var tmp313781541: int;                                                                             
 var $recorded.state3781541: int;                                                                   
 var Array.Queue.A._state3781428: [Array.Queue.A]State;                                             
 var newSpec3781551: Array.Queue.A;                                                                 
 var tmp193781371: int;                                                                             
 var tmp313781551: int;                                                                             
 var tmp223781398: Array.Queue.T;                                                                   
 var Queue.tail3781428: [Queue]int;                                                                 
 var tmp243781428: int;                                                                             
 var tmp213781452: int;                                                                             
 var Queue.elems3781398: [Queue]Array.Queue.T;                                                      
 var _pc3781551: Phase;                                                                             
 var tmp173781469: bool;                                                                            
 var Queue._lock3781419: [Queue]Tid;                                                                
 var tid3781398_post: Tid;                                                                          
 var Queue.head3781559: [Queue]int;                                                                 
 var tmp243781452: int;                                                                             
 var tmp183781371: int;                                                                             
 var Array.Queue.T._length3781387: [Array.Queue.T]int;                                              
 var Array.Queue.A._elems3781551: [Array.Queue.A]([int]int);                                        
 var Queue.head3781541: [Queue]int;                                                                 
 var Queue.spec3781452: [Queue]Array.Queue.A;                                                       
 var tid3781428: Tid;                                                                               
 var tmp173781541: bool;                                                                            
 var _pc3781438: Phase;                                                                             
 var Array.Queue.T._elems3781387: [Array.Queue.T]([int]int);                                        
 var path3781438: int;                                                                              
 var this3781398_post: Queue;                                                                       
 var $recorded.state3781365: int;                                                                   
 var this3781387: Queue;                                                                            
 var Array.Queue.T._elems3781469: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._elems3781371: [Array.Queue.T]([int]int);                                        
 var Queue.tail3781469: [Queue]int;                                                                 
 var Queue.tail3781438: [Queue]int;                                                                 
 var tmp27: Array.Queue.T;                                                                          
 var tmp26: int;                                                                                    
 var _pc3781365: Phase;                                                                             
 var Queue.tail3781559: [Queue]int;                                                                 
 var Array.Queue.T._length3781365: [Array.Queue.T]int;                                              
 var moverPath3781438: MoverPath;                                                                   
 var Queue.tail3781532: [Queue]int;                                                                 
 var Queue._state3781532: [Queue]State;                                                             
 var Array.Queue.T._length3781371: [Array.Queue.T]int;                                              
 var tmp213781419: int;                                                                             
 var tmp243781551: int;                                                                             
 var tmp213781532: int;                                                                             
 var tmp30: Array.Queue.A;                                                                          
 var moverPath3781551: MoverPath;                                                                   
 var tmp173781438: bool;                                                                            
 var tmp223781428: Array.Queue.T;                                                                   
 var x3781371: int;                                                                                 
 var tmp183781365: int;                                                                             
 var tmp19: int;                                                                                    
 var tmp223781559: Array.Queue.T;                                                                   
 var Queue._state3781438: [Queue]State;                                                             
 var tmp273781551: Array.Queue.T;                                                                   
 var tmp223781452: Array.Queue.T;                                                                   
 var Queue.tail3781365: [Queue]int;                                                                 
 var Array.Queue.A._length3781398: [Array.Queue.A]int;                                              
 var _pc3781469: Phase;                                                                             
 var tmp203781428: int;                                                                             
 var tmp213781398_post: int;                                                                        
 var Array.Queue.A._length3781365: [Array.Queue.A]int;                                              
 var Queue.head3781387: [Queue]int;                                                                 
 var tmp233781452: Array.Queue.T;                                                                   
 var this3781452: Queue;                                                                            
 var Queue._lock3781551: [Queue]Tid;                                                                
 var tmp193781428: int;                                                                             
 var x3781469: int;                                                                                 
 var Queue._state3781371: [Queue]State;                                                             
 var $recorded.state3781428: int;                                                                   
 var Queue.head3781469: [Queue]int;                                                                 
 var Queue.spec3781428: [Queue]Array.Queue.A;                                                       
 var moverPath3781387: MoverPath;                                                                   
 var path3781452: int;                                                                              
 var Array.Queue.T._elems3781559: [Array.Queue.T]([int]int);                                        
 var tmp223781438: Array.Queue.T;                                                                   
 var Array.Queue.T._state3781371: [Array.Queue.T]State;                                             
 var Array.Queue.T._elems3781532: [Array.Queue.T]([int]int);                                        
 var Queue.elems3781371: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._elems3781398: [Array.Queue.T]([int]int);                                        
 var this3781438: Queue;                                                                            
 var Queue.head3781365: [Queue]int;                                                                 
 var tmp183781428: int;                                                                             
 var Queue._state3781398_post: [Queue]State;                                                        
 var tmp223781387: Array.Queue.T;                                                                   
 var Queue._state3781559: [Queue]State;                                                             
 var tid3781398: Tid;                                                                               
 var Queue._state3781365: [Queue]State;                                                             
 var tid3781371: Tid;                                                                               
 var tmp283781541: int;                                                                             
 var tmp213781559: int;                                                                             
 var tmp243781469: int;                                                                             
 var x3781365: int;                                                                                 
 var tmp283781532: int;                                                                             
 var Array.Queue.T._state3781365: [Array.Queue.T]State;                                             
 var tmp223781541: Array.Queue.T;                                                                   
 var tmp193781398: int;                                                                             
 var Queue._lock3781398: [Queue]Tid;                                                                
 var Array.Queue.T._state3781541: [Array.Queue.T]State;                                             
 var tmp20: int;                                                                                    
 var tmp193781438: int;                                                                             
 var path3781387: int;                                                                              
 var Array.Queue.A._elems3781398_post: [Array.Queue.A]([int]int);                                   
 var this3781428: Queue;                                                                            
 var tid3781452: Tid;                                                                               
 var Array.Queue.T._length3781532: [Array.Queue.T]int;                                              
 var tid3781469: Tid;                                                                               
 var moverPath3781371: MoverPath;                                                                   
 var Queue._state3781541: [Queue]State;                                                             
 var tmp173781365: bool;                                                                            
 var Queue._lock3781371: [Queue]Tid;                                                                
 var tmp183781559: int;                                                                             
 var tmp253781551: int;                                                                             
 var Array.Queue.T._length3781419: [Array.Queue.T]int;                                              
 var Array.Queue.T._state3781551: [Array.Queue.T]State;                                             
 var _pc3781532: Phase;                                                                             
 var tmp263781551: int;                                                                             
 var Queue.spec3781551: [Queue]Array.Queue.A;                                                       
 var tmp24: int;                                                                                    
 var Queue.head3781551: [Queue]int;                                                                 
 var x3781541: int;                                                                                 
 var tmp17: bool;                                                                                   
 var tmp173781371: bool;                                                                            
 var Array.Queue.A._state3781469: [Array.Queue.A]State;                                             
 var Array.Queue.A._length3781469: [Array.Queue.A]int;                                              
 var Queue.spec3781438: [Queue]Array.Queue.A;                                                       
 var moverPath3781419: MoverPath;                                                                   
 var Queue.tail3781387: [Queue]int;                                                                 
 var x3781419: int;                                                                                 
 var tmp193781387: int;                                                                             
 var tid3781365: Tid;                                                                               
 var Queue.tail3781419: [Queue]int;                                                                 
 var this3781365: Queue;                                                                            
 var mover3781371: Mover;                                                                           
 var tmp22: Array.Queue.T;                                                                          
 var Array.Queue.A._elems3781398: [Array.Queue.A]([int]int);                                        
 var tmp203781541: int;                                                                             
 var Array.Queue.T._state3781428: [Array.Queue.T]State;                                             
 var _pc3781541: Phase;                                                                             
 var Array.Queue.T._state3781532: [Array.Queue.T]State;                                             
 var x3781398_post: int;                                                                            
 var Queue._state3781551: [Queue]State;                                                             
 var x3781387: int;                                                                                 
 var tmp25: int;                                                                                    
 var newSpec: Array.Queue.A;                                                                        
 var tmp273781452: Array.Queue.T;                                                                   
 var Array.Queue.A._length3781551: [Array.Queue.A]int;                                              
 var Queue.spec3781541: [Queue]Array.Queue.A;                                                       
 var tmp173781551: bool;                                                                            
 var tmp203781559: int;                                                                             
 var tmp253781541: int;                                                                             
 var tmp183781438: int;                                                                             
 var tmp203781438: int;                                                                             
 var tmp173781559: bool;                                                                            
 var $recorded.state3781469: int;                                                                   
 var tmp29: int;                                                                                    
 var x3781559: int;                                                                                 
 var moverPath3781428: MoverPath;                                                                   
 var tmp203781398: int;                                                                             
 var tmp273781532: Array.Queue.T;                                                                   
 var x3781452: int;                                                                                 
 var tmp303781532: Array.Queue.A;                                                                   
 var tmp243781541: int;                                                                             
 var Queue.elems3781469: [Queue]Array.Queue.T;                                                      
 var tmp233781532: Array.Queue.T;                                                                   
 var tmp31: int;                                                                                    
 var tmp203781398_post: int;                                                                        
 var Array.Queue.T._length3781452: [Array.Queue.T]int;                                              
 var path3781551: int;                                                                              
 var Queue.elems3781398_post: [Queue]Array.Queue.T;                                                 
 var tmp253781452: int;                                                                             
 var Array.Queue.A._state3781551: [Array.Queue.A]State;                                             
 var tmp173781398_post: bool;                                                                       
 var x3781532: int;                                                                                 
 var Array.Queue.A._state3781365: [Array.Queue.A]State;                                             
 var $recorded.state3781419: int;                                                                   
 var Queue.head3781438: [Queue]int;                                                                 
 var tmp233781551: Array.Queue.T;                                                                   
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
 assert true;                                                                                              // (65.18): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 71.13: bool tmp17;                                                                              
                                                                                                    
                                                                                                    
 // 71.13: int tmp18;                                                                               
                                                                                                    
                                                                                                    
 // 71.13: int tmp19;                                                                               
                                                                                                    
                                                                                                    
 // 71.13: tmp19 := this.tail;                                                                      
                                                                                                    
                                                                                                    
 moverPath3781365 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781365 := m#moverPath(moverPath3781365);                                                     
 path3781365 := p#moverPath(moverPath3781365);                                                      
 assume Queue._state3781365 == Queue._state && Queue.elems3781365 == Queue.elems && Queue.head3781365 == Queue.head && Queue.tail3781365 == Queue.tail && Queue.spec3781365 == Queue.spec && Queue._lock3781365 == Queue._lock && Array.Queue.T._state3781365 == Array.Queue.T._state && Array.Queue.T._elems3781365 == Array.Queue.T._elems && Array.Queue.T._length3781365 == Array.Queue.T._length && Array.Queue.A._state3781365 == Array.Queue.A._state && Array.Queue.A._elems3781365 == Array.Queue.A._elems && Array.Queue.A._length3781365 == Array.Queue.A._length && tmp193781365 == tmp19 && tmp183781365 == tmp18 && tmp173781365 == tmp17 && x3781365 == x && this3781365 == this && tid3781365 == tid && _pc3781365 == _pc;
 assume $recorded.state3781365 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (71.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781365);                                                              
 assert _pc != PhaseError;                                                                                 // (71.13): Reduction failure
 tmp19 := Queue.tail[this];                                                                         
                                                                                                    
 // 71.13: int tmp20;                                                                               
                                                                                                    
                                                                                                    
 // 71.13: tmp20 := this.head;                                                                      
                                                                                                    
                                                                                                    
 moverPath3781371 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781371 := m#moverPath(moverPath3781371);                                                     
 path3781371 := p#moverPath(moverPath3781371);                                                      
 assume Queue._state3781371 == Queue._state && Queue.elems3781371 == Queue.elems && Queue.head3781371 == Queue.head && Queue.tail3781371 == Queue.tail && Queue.spec3781371 == Queue.spec && Queue._lock3781371 == Queue._lock && Array.Queue.T._state3781371 == Array.Queue.T._state && Array.Queue.T._elems3781371 == Array.Queue.T._elems && Array.Queue.T._length3781371 == Array.Queue.T._length && Array.Queue.A._state3781371 == Array.Queue.A._state && Array.Queue.A._elems3781371 == Array.Queue.A._elems && Array.Queue.A._length3781371 == Array.Queue.A._length && tmp203781371 == tmp20 && tmp193781371 == tmp19 && tmp183781371 == tmp18 && tmp173781371 == tmp17 && x3781371 == x && this3781371 == this && tid3781371 == tid && _pc3781371 == _pc;
 assume $recorded.state3781371 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (71.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781371);                                                              
 assert _pc != PhaseError;                                                                                 // (71.13): Reduction failure
 tmp20 := Queue.head[this];                                                                         
                                                                                                    
 // 71.13: tmp18 = tmp19 - tmp20;                                                                   
                                                                                                    
 tmp18 := (tmp19-tmp20);                                                                            
                                                                                                    
 // 71.13: int tmp21;                                                                               
                                                                                                    
                                                                                                    
 // 71.13: [Queue.T{this}] tmp22;                                                                   
                                                                                                    
                                                                                                    
 // 71.13: tmp22 := this.elems;                                                                     
                                                                                                    
                                                                                                    
 moverPath3781387 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3781387 := m#moverPath(moverPath3781387);                                                     
 path3781387 := p#moverPath(moverPath3781387);                                                      
 assume Queue._state3781387 == Queue._state && Queue.elems3781387 == Queue.elems && Queue.head3781387 == Queue.head && Queue.tail3781387 == Queue.tail && Queue.spec3781387 == Queue.spec && Queue._lock3781387 == Queue._lock && Array.Queue.T._state3781387 == Array.Queue.T._state && Array.Queue.T._elems3781387 == Array.Queue.T._elems && Array.Queue.T._length3781387 == Array.Queue.T._length && Array.Queue.A._state3781387 == Array.Queue.A._state && Array.Queue.A._elems3781387 == Array.Queue.A._elems && Array.Queue.A._length3781387 == Array.Queue.A._length && tmp223781387 == tmp22 && tmp213781387 == tmp21 && tmp203781387 == tmp20 && tmp193781387 == tmp19 && tmp183781387 == tmp18 && tmp173781387 == tmp17 && x3781387 == x && this3781387 == this && tid3781387 == tid && _pc3781387 == _pc;
 assume $recorded.state3781387 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (71.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3781387);                                                              
 assert _pc != PhaseError;                                                                                 // (71.13): Reduction failure
 tmp22 := Queue.elems[this];                                                                        
                                                                                                    
 // 71.13: tmp21 = tmp22.length;                                                                    
                                                                                                    
 tmp21 := Array.Queue.T._length[tmp22];                                                             
                                                                                                    
 // 71.13: tmp17 = tmp18 < tmp21;                                                                   
                                                                                                    
 tmp17 := (tmp18<tmp21);                                                                            
 if (tmp17 /* lowered ((Queue.tail[this]-Queue.head[this])<Array.Queue.T._length[Queue.elems[this]]) */) {
                                                                                                    
  // 72.17: yield;                                                                                  
                                                                                                    
  assume Queue._state3781398 == Queue._state && Queue.elems3781398 == Queue.elems && Queue.head3781398 == Queue.head && Queue.tail3781398 == Queue.tail && Queue.spec3781398 == Queue.spec && Queue._lock3781398 == Queue._lock && Array.Queue.T._state3781398 == Array.Queue.T._state && Array.Queue.T._elems3781398 == Array.Queue.T._elems && Array.Queue.T._length3781398 == Array.Queue.T._length && Array.Queue.A._state3781398 == Array.Queue.A._state && Array.Queue.A._elems3781398 == Array.Queue.A._elems && Array.Queue.A._length3781398 == Array.Queue.A._length && tmp223781398 == tmp22 && tmp213781398 == tmp21 && tmp203781398 == tmp20 && tmp193781398 == tmp19 && tmp183781398 == tmp18 && tmp173781398 == tmp17 && x3781398 == x && this3781398 == this && tid3781398 == tid;
  assume $recorded.state3781398 == 1;                                                               
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  call Yield(tid);                                                                                  
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  assume  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (72.17): Object invariant may not hold.
  _pc := PreCommit;                                                                                 
  assume Queue._state3781398_post == Queue._state && Queue.elems3781398_post == Queue.elems && Queue.head3781398_post == Queue.head && Queue.tail3781398_post == Queue.tail && Queue.spec3781398_post == Queue.spec && Queue._lock3781398_post == Queue._lock && Array.Queue.T._state3781398_post == Array.Queue.T._state && Array.Queue.T._elems3781398_post == Array.Queue.T._elems && Array.Queue.T._length3781398_post == Array.Queue.T._length && Array.Queue.A._state3781398_post == Array.Queue.A._state && Array.Queue.A._elems3781398_post == Array.Queue.A._elems && Array.Queue.A._length3781398_post == Array.Queue.A._length && tmp223781398_post == tmp22 && tmp213781398_post == tmp21 && tmp203781398_post == tmp20 && tmp193781398_post == tmp19 && tmp183781398_post == tmp18 && tmp173781398_post == tmp17 && x3781398_post == x && this3781398_post == this && tid3781398_post == tid;
  assume $recorded.state3781398_post == 1;                                                          
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (73.31): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assume Queue._lock[this] == Tid.null;                                                             
  _pc := transition(_pc, _R);                                                                       
  assert _pc != PhaseError;                                                                                // (73.31): Reduction failure
  Queue._lock[this] := tid;                                                                         
                                                                                                    
  // 74.17: assume this.tail - this.head < this.elems.length;                                       
                                                                                                    
  assume ((Queue.tail[this]-Queue.head[this])<Array.Queue.T._length[Queue.elems[this]]);            
                                                                                                    
  // 75.17: [Queue.T{this}] tmp23;                                                                  
                                                                                                    
                                                                                                    
  // 75.17: tmp23 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3781419 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781419 := m#moverPath(moverPath3781419);                                                    
  path3781419 := p#moverPath(moverPath3781419);                                                     
  assume Queue._state3781419 == Queue._state && Queue.elems3781419 == Queue.elems && Queue.head3781419 == Queue.head && Queue.tail3781419 == Queue.tail && Queue.spec3781419 == Queue.spec && Queue._lock3781419 == Queue._lock && Array.Queue.T._state3781419 == Array.Queue.T._state && Array.Queue.T._elems3781419 == Array.Queue.T._elems && Array.Queue.T._length3781419 == Array.Queue.T._length && Array.Queue.A._state3781419 == Array.Queue.A._state && Array.Queue.A._elems3781419 == Array.Queue.A._elems && Array.Queue.A._length3781419 == Array.Queue.A._length && tmp233781419 == tmp23 && tmp223781419 == tmp22 && tmp213781419 == tmp21 && tmp203781419 == tmp20 && tmp193781419 == tmp19 && tmp183781419 == tmp18 && tmp173781419 == tmp17 && x3781419 == x && this3781419 == this && tid3781419 == tid && _pc3781419 == _pc;
  assume $recorded.state3781419 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (75.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781419);                                                             
  assert _pc != PhaseError;                                                                                // (75.17): Reduction failure
  tmp23 := Queue.elems[this];                                                                       
                                                                                                    
  // 75.17: int tmp24;                                                                              
                                                                                                    
                                                                                                    
  // 75.17: int tmp25;                                                                              
                                                                                                    
                                                                                                    
  // 75.17: tmp25 := this.tail;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781428 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781428 := m#moverPath(moverPath3781428);                                                    
  path3781428 := p#moverPath(moverPath3781428);                                                     
  assume Queue._state3781428 == Queue._state && Queue.elems3781428 == Queue.elems && Queue.head3781428 == Queue.head && Queue.tail3781428 == Queue.tail && Queue.spec3781428 == Queue.spec && Queue._lock3781428 == Queue._lock && Array.Queue.T._state3781428 == Array.Queue.T._state && Array.Queue.T._elems3781428 == Array.Queue.T._elems && Array.Queue.T._length3781428 == Array.Queue.T._length && Array.Queue.A._state3781428 == Array.Queue.A._state && Array.Queue.A._elems3781428 == Array.Queue.A._elems && Array.Queue.A._length3781428 == Array.Queue.A._length && tmp253781428 == tmp25 && tmp243781428 == tmp24 && tmp233781428 == tmp23 && tmp223781428 == tmp22 && tmp213781428 == tmp21 && tmp203781428 == tmp20 && tmp193781428 == tmp19 && tmp183781428 == tmp18 && tmp173781428 == tmp17 && x3781428 == x && this3781428 == this && tid3781428 == tid && _pc3781428 == _pc;
  assume $recorded.state3781428 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (75.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781428);                                                             
  assert _pc != PhaseError;                                                                                // (75.17): Reduction failure
  tmp25 := Queue.tail[this];                                                                        
                                                                                                    
  // 75.17: int tmp26;                                                                              
                                                                                                    
                                                                                                    
  // 75.17: [Queue.T{this}] tmp27;                                                                  
                                                                                                    
                                                                                                    
  // 75.17: tmp27 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3781438 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781438 := m#moverPath(moverPath3781438);                                                    
  path3781438 := p#moverPath(moverPath3781438);                                                     
  assume Queue._state3781438 == Queue._state && Queue.elems3781438 == Queue.elems && Queue.head3781438 == Queue.head && Queue.tail3781438 == Queue.tail && Queue.spec3781438 == Queue.spec && Queue._lock3781438 == Queue._lock && Array.Queue.T._state3781438 == Array.Queue.T._state && Array.Queue.T._elems3781438 == Array.Queue.T._elems && Array.Queue.T._length3781438 == Array.Queue.T._length && Array.Queue.A._state3781438 == Array.Queue.A._state && Array.Queue.A._elems3781438 == Array.Queue.A._elems && Array.Queue.A._length3781438 == Array.Queue.A._length && tmp273781438 == tmp27 && tmp263781438 == tmp26 && tmp253781438 == tmp25 && tmp243781438 == tmp24 && tmp233781438 == tmp23 && tmp223781438 == tmp22 && tmp213781438 == tmp21 && tmp203781438 == tmp20 && tmp193781438 == tmp19 && tmp183781438 == tmp18 && tmp173781438 == tmp17 && x3781438 == x && this3781438 == this && tid3781438 == tid && _pc3781438 == _pc;
  assume $recorded.state3781438 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (75.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781438);                                                             
  assert _pc != PhaseError;                                                                                // (75.17): Reduction failure
  tmp27 := Queue.elems[this];                                                                       
                                                                                                    
  // 75.17: tmp26 = tmp27.length;                                                                   
                                                                                                    
  tmp26 := Array.Queue.T._length[tmp27];                                                            
                                                                                                    
  // 75.17: tmp24 = tmp25 % tmp26;                                                                  
                                                                                                    
  tmp24 := MOD(tmp25, tmp26);                                                                       
                                                                                                    
  // 75.17: tmp23[tmp24] := x;                                                                      
                                                                                                    
                                                                                                    
  moverPath3781452 := WriteEval.Array.Queue.T(tid: Tid,this: Queue,tmp23: Array.Queue.T,tmp24: int,x: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781452 := m#moverPath(moverPath3781452);                                                    
  path3781452 := p#moverPath(moverPath3781452);                                                     
  assume Queue._state3781452 == Queue._state && Queue.elems3781452 == Queue.elems && Queue.head3781452 == Queue.head && Queue.tail3781452 == Queue.tail && Queue.spec3781452 == Queue.spec && Queue._lock3781452 == Queue._lock && Array.Queue.T._state3781452 == Array.Queue.T._state && Array.Queue.T._elems3781452 == Array.Queue.T._elems && Array.Queue.T._length3781452 == Array.Queue.T._length && Array.Queue.A._state3781452 == Array.Queue.A._state && Array.Queue.A._elems3781452 == Array.Queue.A._elems && Array.Queue.A._length3781452 == Array.Queue.A._length && tmp273781452 == tmp27 && tmp263781452 == tmp26 && tmp253781452 == tmp25 && tmp243781452 == tmp24 && tmp233781452 == tmp23 && tmp223781452 == tmp22 && tmp213781452 == tmp21 && tmp203781452 == tmp20 && tmp193781452 == tmp19 && tmp183781452 == tmp18 && tmp173781452 == tmp17 && x3781452 == x && this3781452 == this && tid3781452 == tid && _pc3781452 == _pc;
  assume $recorded.state3781452 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp23 != Array.Queue.T.null;                                                              
  } else {                                                                                          
   assert tmp23 != Array.Queue.T.null;                                                                     // (75.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp24;                                                                               
  } else {                                                                                          
   assert 0 <= tmp24;                                                                                      // (75.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp24 < Array.Queue.T._length[tmp23];                                                     
  } else {                                                                                          
   assert tmp24 < Array.Queue.T._length[tmp23];                                                            // (75.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781452);                                                             
  assert _pc != PhaseError;                                                                                // (75.17): Reduction failure
  Array.Queue.T._elems[tmp23][tmp24] := x;                                                          
                                                                                                    
  // 76.17: [Queue.A{this}] newSpec;                                                                
                                                                                                    
                                                                                                    
  // 76.17: int tmp28;                                                                              
                                                                                                    
                                                                                                    
  // 76.17: int tmp29;                                                                              
                                                                                                    
                                                                                                    
  // 76.17: [Queue.A{this}] tmp30;                                                                  
                                                                                                    
                                                                                                    
  // 76.17: tmp30 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781469 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781469 := m#moverPath(moverPath3781469);                                                    
  path3781469 := p#moverPath(moverPath3781469);                                                     
  assume Queue._state3781469 == Queue._state && Queue.elems3781469 == Queue.elems && Queue.head3781469 == Queue.head && Queue.tail3781469 == Queue.tail && Queue.spec3781469 == Queue.spec && Queue._lock3781469 == Queue._lock && Array.Queue.T._state3781469 == Array.Queue.T._state && Array.Queue.T._elems3781469 == Array.Queue.T._elems && Array.Queue.T._length3781469 == Array.Queue.T._length && Array.Queue.A._state3781469 == Array.Queue.A._state && Array.Queue.A._elems3781469 == Array.Queue.A._elems && Array.Queue.A._length3781469 == Array.Queue.A._length && tmp303781469 == tmp30 && tmp293781469 == tmp29 && tmp283781469 == tmp28 && newSpec3781469 == newSpec && tmp273781469 == tmp27 && tmp263781469 == tmp26 && tmp253781469 == tmp25 && tmp243781469 == tmp24 && tmp233781469 == tmp23 && tmp223781469 == tmp22 && tmp213781469 == tmp21 && tmp203781469 == tmp20 && tmp193781469 == tmp19 && tmp183781469 == tmp18 && tmp173781469 == tmp17 && x3781469 == x && this3781469 == this && tid3781469 == tid && _pc3781469 == _pc;
  assume $recorded.state3781469 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (76.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781469);                                                             
  assert _pc != PhaseError;                                                                                // (76.17): Reduction failure
  tmp30 := Queue.spec[this];                                                                        
                                                                                                    
  // 76.17: tmp29 = tmp30.length;                                                                   
                                                                                                    
  tmp29 := Array.Queue.A._length[tmp30];                                                            
                                                                                                    
  // 76.17: tmp28 = tmp29 + 1;                                                                      
                                                                                                    
  tmp28 := (tmp29+1);                                                                               
                                                                                                    
  // 76.17: newSpec = new [Queue.A{this}](tmp28);                                                   
                                                                                                    
  havoc newSpec;                                                                                    
  assume isFresh(Array.Queue.A._state[newSpec]);                                                    
  assume Array.Queue.A._length[newSpec] == tmp28;                                                   
  assume Array.Queue.A._this[newSpec] == this;                                                      
  Array.Queue.A._state[newSpec] := LOCAL(tid);                                                      
  assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[newSpec][_i] == 0);                   
                                                                                                    
  // 77.17: assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
                                                                                                    
  assume (forall i: int ::  ((((0<=i)&&(i<(Queue.tail[this]-Queue.head[this])))==>(Array.Queue.A._elems[newSpec][i]==Array.Queue.A._elems[Queue.spec[this]][i]))));
                                                                                                    
  // 78.17: assume newSpec[this.tail % this.elems.length] == x;                                     
                                                                                                    
  assume (Array.Queue.A._elems[newSpec][MOD(Queue.tail[this], Array.Queue.T._length[Queue.elems[this]])]==x);
                                                                                                    
                                                                                                    
  // 79.17: this.spec := newSpec;                                                                   
                                                                                                    
                                                                                                    
  moverPath3781532 := WriteEval.Queue.spec(tid: Tid,this: Queue,newSpec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781532 := m#moverPath(moverPath3781532);                                                    
  path3781532 := p#moverPath(moverPath3781532);                                                     
  assume Queue._state3781532 == Queue._state && Queue.elems3781532 == Queue.elems && Queue.head3781532 == Queue.head && Queue.tail3781532 == Queue.tail && Queue.spec3781532 == Queue.spec && Queue._lock3781532 == Queue._lock && Array.Queue.T._state3781532 == Array.Queue.T._state && Array.Queue.T._elems3781532 == Array.Queue.T._elems && Array.Queue.T._length3781532 == Array.Queue.T._length && Array.Queue.A._state3781532 == Array.Queue.A._state && Array.Queue.A._elems3781532 == Array.Queue.A._elems && Array.Queue.A._length3781532 == Array.Queue.A._length && tmp303781532 == tmp30 && tmp293781532 == tmp29 && tmp283781532 == tmp28 && newSpec3781532 == newSpec && tmp273781532 == tmp27 && tmp263781532 == tmp26 && tmp253781532 == tmp25 && tmp243781532 == tmp24 && tmp233781532 == tmp23 && tmp223781532 == tmp22 && tmp213781532 == tmp21 && tmp203781532 == tmp20 && tmp193781532 == tmp19 && tmp183781532 == tmp18 && tmp173781532 == tmp17 && x3781532 == x && this3781532 == this && tid3781532 == tid && _pc3781532 == _pc;
  assume $recorded.state3781532 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (79.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3781532);                                                             
  assert _pc != PhaseError;                                                                                // (79.17): Reduction failure
  Queue.spec[this] := newSpec;                                                                      
  if (isLocal(Array.Queue.A._state[newSpec], tid)) {                                                
   Array.Queue.A._state[newSpec] := SHARED();                                                       
   if (isLocal(Queue._state[Array.Queue.A._this[newSpec]], tid)) {                                  
    Queue._state[Array.Queue.A._this[newSpec]] := SHARED();                                         
    assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[newSpec]]]);            // (79.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
    assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[newSpec]]]);             // (79.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
   }                                                                                                
  }                                                                                                 
                                                                                                    
                                                                                                    
  // 80.17: int tmp31;                                                                              
                                                                                                    
                                                                                                    
  // 80.17: int tmp32;                                                                              
                                                                                                    
                                                                                                    
  // 80.17: tmp32 := this.tail;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781541 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781541 := m#moverPath(moverPath3781541);                                                    
  path3781541 := p#moverPath(moverPath3781541);                                                     
  assume Queue._state3781541 == Queue._state && Queue.elems3781541 == Queue.elems && Queue.head3781541 == Queue.head && Queue.tail3781541 == Queue.tail && Queue.spec3781541 == Queue.spec && Queue._lock3781541 == Queue._lock && Array.Queue.T._state3781541 == Array.Queue.T._state && Array.Queue.T._elems3781541 == Array.Queue.T._elems && Array.Queue.T._length3781541 == Array.Queue.T._length && Array.Queue.A._state3781541 == Array.Queue.A._state && Array.Queue.A._elems3781541 == Array.Queue.A._elems && Array.Queue.A._length3781541 == Array.Queue.A._length && tmp323781541 == tmp32 && tmp313781541 == tmp31 && tmp303781541 == tmp30 && tmp293781541 == tmp29 && tmp283781541 == tmp28 && newSpec3781541 == newSpec && tmp273781541 == tmp27 && tmp263781541 == tmp26 && tmp253781541 == tmp25 && tmp243781541 == tmp24 && tmp233781541 == tmp23 && tmp223781541 == tmp22 && tmp213781541 == tmp21 && tmp203781541 == tmp20 && tmp193781541 == tmp19 && tmp183781541 == tmp18 && tmp173781541 == tmp17 && x3781541 == x && this3781541 == this && tid3781541 == tid && _pc3781541 == _pc;
  assume $recorded.state3781541 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (80.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3781541);                                                             
  assert _pc != PhaseError;                                                                                // (80.17): Reduction failure
  tmp32 := Queue.tail[this];                                                                        
                                                                                                    
  // 80.17: tmp31 = tmp32 + 1;                                                                      
                                                                                                    
  tmp31 := (tmp32+1);                                                                               
                                                                                                    
                                                                                                    
  // 80.17: this.tail := tmp31;                                                                     
                                                                                                    
                                                                                                    
  moverPath3781551 := WriteEval.Queue.tail(tid: Tid,this: Queue,tmp31: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3781551 := m#moverPath(moverPath3781551);                                                    
  path3781551 := p#moverPath(moverPath3781551);                                                     
  assume Queue._state3781551 == Queue._state && Queue.elems3781551 == Queue.elems && Queue.head3781551 == Queue.head && Queue.tail3781551 == Queue.tail && Queue.spec3781551 == Queue.spec && Queue._lock3781551 == Queue._lock && Array.Queue.T._state3781551 == Array.Queue.T._state && Array.Queue.T._elems3781551 == Array.Queue.T._elems && Array.Queue.T._length3781551 == Array.Queue.T._length && Array.Queue.A._state3781551 == Array.Queue.A._state && Array.Queue.A._elems3781551 == Array.Queue.A._elems && Array.Queue.A._length3781551 == Array.Queue.A._length && tmp323781551 == tmp32 && tmp313781551 == tmp31 && tmp303781551 == tmp30 && tmp293781551 == tmp29 && tmp283781551 == tmp28 && newSpec3781551 == newSpec && tmp273781551 == tmp27 && tmp263781551 == tmp26 && tmp253781551 == tmp25 && tmp243781551 == tmp24 && tmp233781551 == tmp23 && tmp223781551 == tmp22 && tmp213781551 == tmp21 && tmp203781551 == tmp20 && tmp193781551 == tmp19 && tmp183781551 == tmp18 && tmp173781551 == tmp17 && x3781551 == x && this3781551 == this && tid3781551 == tid && _pc3781551 == _pc;
  assume $recorded.state3781551 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (80.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3781551);                                                             
  assert _pc != PhaseError;                                                                                // (80.17): Reduction failure
  Queue.tail[this] := tmp31;                                                                        
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (81.13): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (81.13): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (81.13): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
 } else {                                                                                           
 }                                                                                                  
                                                                                                    
 // 70.32: // return;                                                                               
                                                                                                    
 assume Queue._state3781559 == Queue._state && Queue.elems3781559 == Queue.elems && Queue.head3781559 == Queue.head && Queue.tail3781559 == Queue.tail && Queue.spec3781559 == Queue.spec && Queue._lock3781559 == Queue._lock && Array.Queue.T._state3781559 == Array.Queue.T._state && Array.Queue.T._elems3781559 == Array.Queue.T._elems && Array.Queue.T._length3781559 == Array.Queue.T._length && Array.Queue.A._state3781559 == Array.Queue.A._state && Array.Queue.A._elems3781559 == Array.Queue.A._elems && Array.Queue.A._length3781559 == Array.Queue.A._length && tmp223781559 == tmp22 && tmp213781559 == tmp21 && tmp203781559 == tmp20 && tmp193781559 == tmp19 && tmp183781559 == tmp18 && tmp173781559 == tmp17 && x3781559 == x && this3781559 == this && tid3781559 == tid;
 assume $recorded.state3781559 == 1;                                                                
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (70.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (70.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (70.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (70.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (70.32): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.T ***/                                                                       
                                                                                                    
type Array.Queue.T;                                                                                 
const unique Array.Queue.T.null: Array.Queue.T;                                                     
var Array.Queue.T._state: [Array.Queue.T]State;                                                     
                                                                                                    
const Array.Queue.T._this : [Array.Queue.T]Queue;                                                   
const Array.Queue.T._length : [Array.Queue.T]int;                                                   
var Array.Queue.T._elems  : [Array.Queue.T]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.T :: Array.Queue.T._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.A ***/                                                                       
                                                                                                    
type Array.Queue.A;                                                                                 
const unique Array.Queue.A.null: Array.Queue.A;                                                     
var Array.Queue.A._state: [Array.Queue.A]State;                                                     
                                                                                                    
const Array.Queue.A._this : [Array.Queue.A]Queue;                                                   
const Array.Queue.A._length : [Array.Queue.A]int;                                                   
var Array.Queue.A._elems  : [Array.Queue.A]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.A :: Array.Queue.A._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Queue  :: _i == Queue.null <==> isNull(Queue._state[_i])) &&                          
  (forall _i: Array.Queue.T  :: _i == Array.Queue.T.null <==> isNull(Array.Queue.T._state[_i])) &&  
  (forall _i: Array.Queue.A  :: _i == Array.Queue.A.null <==> isNull(Array.Queue.A._state[_i])) &&  
  (forall _t: Tid, _i: Array.Queue.T  :: ValidTid(_t) && isAccessible(Array.Queue.T._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.T._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Queue.A  :: ValidTid(_t) && isAccessible(Array.Queue.A._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.A._this[_i]], _t)) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.T._state[Queue.elems[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.T._state[Queue.elems[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.elems[_i] } Array.Queue.T._this[Queue.elems[_i]] == _i) &&           
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.A._state[Queue.spec[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.A._state[Queue.spec[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.spec[_i] } Array.Queue.A._this[Queue.spec[_i]] == _i) &&             
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.elems[x] := havocValue;                                                                      
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.elems[x];                                                                        
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.elems[x] := havocValue;                                                                      
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.head[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.head[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.head[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (14.5): Queue.tail failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (14.5): Queue.tail failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.tail[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (14.5): Queue.tail failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (14.5): Queue.tail failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (14.5): Queue.tail failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.tail[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.tail[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (14.5): Queue.tail failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (24.5): Queue.spec failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (24.5): Queue.spec failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.spec[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (24.5): Queue.spec failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (24.5): Queue.spec failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (24.5): Queue.spec failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.spec[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.spec[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (24.5): Queue.spec failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (23.5): Array Array.Queue.A failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (23.5): Array Array.Queue.A failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (23.5): Array Array.Queue.A failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (23.5): Array Array.Queue.A failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (23.5): Array Array.Queue.A failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (23.5): Array Array.Queue.A failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires ValidTid(tid);                                                                             
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures Y(tid , old(Queue._state), old(Queue.elems), old(Queue.head), old(Queue.tail), old(Queue.spec), old(Queue._lock), old(Array.Queue.T._state), old(Array.Queue.T._elems), old(Array.Queue.T._length), old(Array.Queue.A._state), old(Array.Queue.A._elems), old(Array.Queue.A._length) , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
                                                                                                    
// Queue.elems:                                                                                     
                                                                                                    
function {:inline} Y_Queue.elems(tid : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.elems[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.elems(u: Tid,this: Queue,newValue: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, Queue.elems[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var newValue_pre: Array.Queue.T;                                                                    
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var newValue_post: Array.Queue.T;                                                                   
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.elems(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.head:                                                                                      
                                                                                                    
function {:inline} Y_Queue.head(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.head[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.head(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, Queue.head[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.33): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.head(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.tail:                                                                                      
                                                                                                    
function {:inline} Y_Queue.tail(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.tail[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.tail(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, Queue.tail[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (14.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (14.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (14.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (14.33): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (14.33): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.tail(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.spec:                                                                                      
                                                                                                    
function {:inline} Y_Queue.spec(tid : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.spec[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.spec(u: Tid,this: Queue,newValue: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, Queue.spec[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (24.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (24.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (24.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (24.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (24.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var newValue_pre: Array.Queue.A;                                                                    
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var newValue_post: Array.Queue.A;                                                                   
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.spec(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue._lock:                                                                                     
                                                                                                    
function {:inline} Y_Queue._lock(tid : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue._lock[this] == newValue))
 &&(((Queue._lock[this]==tid)==(newValue==tid)))                                                    
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue._lock(u: Tid,this: Queue,newValue: Tid,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
 assume leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _N);
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, Queue._lock[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Transitive(tid : Tid, this: Queue, newValue : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var newValue_pre: Tid;                                                                              
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var newValue_post: Tid;                                                                             
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue._lock(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.T:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.T(tid : Tid, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.T._this[athis];                                                            
 ((isAccessible(Array.Queue.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.T(tid: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.T(u: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, Array.Queue.T._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Transitive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.T._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var athis_pre: Array.Queue.T;                                                                       
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var athis_post: Array.Queue.T;                                                                      
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.T(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.A:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.A(tid : Tid, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.A._this[athis];                                                            
 ((isAccessible(Array.Queue.A._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.A(tid: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.A._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.A(u: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, Array.Queue.A._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Transitive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774432(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (23.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774450(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (23.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774462(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (23.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774471(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (23.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3774509(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (23.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.A._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var athis_pre: Array.Queue.A;                                                                       
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var athis_post: Array.Queue.A;                                                                      
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.A(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int): bool
{                                                                                                   
 (forall this: Queue :: Y_Queue.elems(tid : Tid, this, Queue.elems_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.head(tid : Tid, this, Queue.head_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.tail(tid : Tid, this, Queue.tail_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.spec(tid : Tid, this, Queue.spec_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue._lock(tid : Tid, this, Queue._lock_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.T, index: int :: Y_Array.Queue.T(tid : Tid, athis, index, Array.Queue.T._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.A, index: int :: Y_Array.Queue.A(tid : Tid, athis, index, Array.Queue.A._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall _i : Queue :: isShared(Queue._state[_i]) ==> isShared(Queue._state_p[_i]))              
 && (forall _i : Queue :: isLocal(Queue._state[_i], tid) <==> isLocal(Queue._state_p[_i], tid))     
 && (forall _i : Array.Queue.T :: isShared(Array.Queue.T._state[_i]) ==> isShared(Array.Queue.T._state_p[_i]))
 && (forall _i : Array.Queue.T :: Array.Queue.T._length[_i] == Array.Queue.T._length_p[_i])         
 && (forall _i : Array.Queue.T :: isLocal(Array.Queue.T._state[_i], tid) <==> isLocal(Array.Queue.T._state_p[_i], tid))
 && (forall _i : Array.Queue.A :: isShared(Array.Queue.A._state[_i]) ==> isShared(Array.Queue.A._state_p[_i]))
 && (forall _i : Array.Queue.A :: Array.Queue.A._length[_i] == Array.Queue.A._length_p[_i])         
 && (forall _i : Array.Queue.A :: isLocal(Array.Queue.A._state[_i], tid) <==> isLocal(Array.Queue.A._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 1257.1-1565.2: (Method:32.5)
// 1271.1-1271.24: (32.5): Bad tid
// 1279.1-1279.368: (32.5): Object invariant may not hold.
// 1280.1-1280.368: (32.5): Object invariant may not hold.
// 1281.1-1281.368: (32.5): Object invariant may not hold.
// 1282.1-1282.368: (32.5): Object invariant may not hold.
// 1283.1-1283.368: (32.5): Object invariant may not hold.
// 1286.1-1286.358: (32.5): Object invariant may not hold.
// 1287.1-1287.358: (32.5): Object invariant may not hold.
// 1288.1-1288.358: (32.5): Object invariant may not hold.
// 1289.1-1289.358: (32.5): Object invariant may not hold.
// 1290.1-1290.358: (32.5): Object invariant may not hold.
// 1407.1-1407.279: (32.5): Can only have right-mover memory accesses in requires clause
// 1408.1-1408.278: (32.5): Can only have right-mover memory accesses in requires clause
// 1410.2-1413.49: (class anchor.sink.Assume:32.5)
// 1414.2-1417.31: (class anchor.sink.Assume:32.5)
// 1418.2-1421.31: (class anchor.sink.Assume:32.5)
// 1422.2-1425.48: (class anchor.sink.Assume:32.5)
// 1426.2-1428.2: (class anchor.sink.VarDeclStmt:33.9)
// 1429.2-1432.12: (class anchor.sink.Assign:33.9)
// 1434.2-1450.27: (class anchor.sink.Write:33.9)
// 1446.1-1446.29: (33.9): Cannot have potential null deference in left-mover part.
// 1449.1-1449.27: (33.9): Reduction failure
// 1451.2-1453.2: (class anchor.sink.VarDeclStmt:34.9)
// 1454.2-1457.12: (class anchor.sink.Assign:34.9)
// 1459.2-1475.27: (class anchor.sink.Write:34.9)
// 1471.1-1471.29: (34.9): Cannot have potential null deference in left-mover part.
// 1474.1-1474.27: (34.9): Reduction failure
// 1476.2-1478.2: (class anchor.sink.VarDeclStmt:35.9)
// 1479.2-1487.79: (class anchor.sink.AAlloc:35.9)
// 1488.2-1490.2: (class anchor.sink.VarDeclStmt:36.9)
// 1491.2-1499.78: (class anchor.sink.AAlloc:36.9)
// 1500.2-1553.89: (class anchor.sink.LocalWrites:37.9)
// 1503.1-1503.26: (37.9): Local Write block must appear pre commit.
// 1504.2-1522.29: (class anchor.sink.Write:37.9)
// 1516.1-1516.29: (37.9): Cannot have potential null deference in left-mover part.
// 1520.1-1520.27: (37.9): Reduction failure
// 1521.1-1521.26: (37.9): Local Write block can only include right-movers.
// 1523.2-1541.27: (class anchor.sink.Write:37.29)
// 1535.1-1535.29: (37.29): Cannot have potential null deference in left-mover part.
// 1539.1-1539.27: (37.29): Reduction failure
// 1540.1-1540.26: (37.29): Local Write block can only include right-movers.
// 1542.1-1542.51: (37.9): Can only have local designators in Local Write block.
// 1543.1-1543.50: (37.29): Can only have local designators in Local Write block.
// 1549.1-1549.91: (37.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
// 1550.1-1550.90: (37.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
// 1552.1-1552.90: (37.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
// 1553.1-1553.89: (37.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
// 1554.2-1564.9: (class anchor.sink.Return:32.21)
// 1559.1-1559.358: (32.21): Object invariant may not hold.
// 1560.1-1560.358: (32.21): Object invariant may not hold.
// 1561.1-1561.358: (32.21): Object invariant may not hold.
// 1562.1-1562.358: (32.21): Object invariant may not hold.
// 1563.1-1563.358: (32.21): Object invariant may not hold.
// 1566.1-2421.2: (Method:41.5)
// 1581.1-1581.24: (41.5): Bad tid
// 1582.1-1582.39: (41.5): this is not global
// 1587.1-1587.359: (41.5): Object invariant may not hold.
// 1588.1-1588.359: (41.5): Object invariant may not hold.
// 1589.1-1589.359: (41.5): Object invariant may not hold.
// 1590.1-1590.359: (41.5): Object invariant may not hold.
// 1591.1-1591.359: (41.5): Object invariant may not hold.
// 1594.1-1594.358: (41.5): Object invariant may not hold.
// 1595.1-1595.358: (41.5): Object invariant may not hold.
// 1596.1-1596.358: (41.5): Object invariant may not hold.
// 1597.1-1597.358: (41.5): Object invariant may not hold.
// 1598.1-1598.358: (41.5): Object invariant may not hold.
// 2038.1-2038.14: (41.18): Can only have right-mover memory accesses in requires clause
// 2040.2-2042.2: (class anchor.sink.VarDeclStmt:47.9)
// 2043.2-2045.2: (class anchor.sink.VarDeclStmt:47.9)
// 2046.2-2048.2: (class anchor.sink.VarDeclStmt:47.9)
// 2049.2-2066.27: (class anchor.sink.Read:47.9)
// 2061.1-2061.29: (47.9): Cannot have potential null deference in left-mover part.
// 2065.1-2065.27: (47.9): Reduction failure
// 2067.2-2069.2: (class anchor.sink.VarDeclStmt:47.9)
// 2070.2-2087.27: (class anchor.sink.Read:47.9)
// 2082.1-2082.29: (47.9): Cannot have potential null deference in left-mover part.
// 2086.1-2086.27: (47.9): Reduction failure
// 2088.2-2091.22: (class anchor.sink.Assign:47.9)
// 2092.2-2095.19: (class anchor.sink.Assign:47.9)
// 2097.3-2115.43: (class anchor.sink.Yield:48.13)
// 2102.1-2102.359: (48.13): Object invariant may not hold.
// 2103.1-2103.359: (48.13): Object invariant may not hold.
// 2104.1-2104.359: (48.13): Object invariant may not hold.
// 2105.1-2105.359: (48.13): Object invariant may not hold.
// 2106.1-2106.359: (48.13): Object invariant may not hold.
// 2108.1-2108.359: (48.13): Object invariant may not hold.
// 2109.1-2109.359: (48.13): Object invariant may not hold.
// 2110.1-2110.359: (48.13): Object invariant may not hold.
// 2111.1-2111.359: (48.13): Object invariant may not hold.
// 2112.1-2112.359: (48.13): Object invariant may not hold.
// 2119.1-2119.30: (49.27): Cannot have potential null deference in left-mover part.
// 2123.1-2123.28: (49.27): Reduction failure
// 2125.3-2128.50: (class anchor.sink.Assume:50.17)
// 2129.3-2131.3: (class anchor.sink.VarDeclStmt:51.17)
// 2132.3-2134.3: (class anchor.sink.VarDeclStmt:51.17)
// 2135.3-2152.29: (class anchor.sink.Read:51.17)
// 2147.1-2147.30: (51.17): Cannot have potential null deference in left-mover part.
// 2151.1-2151.28: (51.17): Reduction failure
// 2153.3-2155.3: (class anchor.sink.VarDeclStmt:51.17)
// 2156.3-2158.3: (class anchor.sink.VarDeclStmt:51.17)
// 2159.3-2176.28: (class anchor.sink.Read:51.17)
// 2171.1-2171.30: (51.17): Cannot have potential null deference in left-mover part.
// 2175.1-2175.28: (51.17): Reduction failure
// 2177.3-2179.3: (class anchor.sink.VarDeclStmt:51.17)
// 2180.3-2182.3: (class anchor.sink.VarDeclStmt:51.17)
// 2183.3-2200.30: (class anchor.sink.Read:51.17)
// 2195.1-2195.30: (51.17): Cannot have potential null deference in left-mover part.
// 2199.1-2199.28: (51.17): Reduction failure
// 2201.3-2204.41: (class anchor.sink.Assign:51.17)
// 2205.3-2208.28: (class anchor.sink.Assign:51.17)
// 2209.3-2236.46: (class anchor.sink.ARead:51.17)
// 2221.1-2221.38: (51.17): Cannot have potential null deference in left-mover part.
// 2226.1-2226.21: (51.17): index < 0.
// 2231.1-2231.46: (51.17): index is >= length.
// 2235.1-2235.28: (51.17): Reduction failure
// 2237.3-2239.3: (class anchor.sink.VarDeclStmt:52.17)
// 2240.3-2242.3: (class anchor.sink.VarDeclStmt:52.17)
// 2243.3-2245.3: (class anchor.sink.VarDeclStmt:52.17)
// 2246.3-2248.3: (class anchor.sink.VarDeclStmt:52.17)
// 2249.3-2266.29: (class anchor.sink.Read:52.17)
// 2261.1-2261.30: (52.17): Cannot have potential null deference in left-mover part.
// 2265.1-2265.28: (52.17): Reduction failure
// 2267.3-2270.41: (class anchor.sink.Assign:52.17)
// 2271.3-2274.22: (class anchor.sink.Assign:52.17)
// 2275.3-2283.82: (class anchor.sink.AAlloc:52.17)
// 2284.3-2287.172: (class anchor.sink.Assume:53.17)
// 2289.3-2314.3: (class anchor.sink.Write:54.17)
// 2301.1-2301.30: (54.17): Cannot have potential null deference in left-mover part.
// 2304.1-2304.28: (54.17): Reduction failure
// 2310.1-2310.96: (54.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
// 2311.1-2311.95: (54.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
// 2315.3-2317.3: (class anchor.sink.VarDeclStmt:55.17)
// 2318.3-2320.3: (class anchor.sink.VarDeclStmt:55.17)
// 2321.3-2338.29: (class anchor.sink.Read:55.17)
// 2333.1-2333.30: (55.17): Cannot have potential null deference in left-mover part.
// 2337.1-2337.28: (55.17): Reduction failure
// 2339.3-2342.22: (class anchor.sink.Assign:55.17)
// 2344.3-2360.29: (class anchor.sink.Write:55.17)
// 2356.1-2356.30: (55.17): Cannot have potential null deference in left-mover part.
// 2359.1-2359.28: (55.17): Reduction failure
// 2364.1-2364.30: (57.13): Cannot have potential null deference in left-mover part.
// 2366.1-2366.35: (57.13): lock not held
// 2368.1-2368.28: (57.13): Reduction failure
// 2370.3-2381.10: (class anchor.sink.Return:56.17)
// 2376.1-2376.359: (56.17): Object invariant may not hold.
// 2377.1-2377.359: (56.17): Object invariant may not hold.
// 2378.1-2378.359: (56.17): Object invariant may not hold.
// 2379.1-2379.359: (56.17): Object invariant may not hold.
// 2380.1-2380.359: (56.17): Object invariant may not hold.
// 2385.1-2385.30: (57.13): Cannot have potential null deference in left-mover part.
// 2387.1-2387.35: (57.13): lock not held
// 2389.1-2389.28: (57.13): Reduction failure
// 2392.3-2395.18: (class anchor.sink.Assume:59.13)
// 2396.3-2407.10: (class anchor.sink.Return:60.13)
// 2402.1-2402.359: (60.13): Object invariant may not hold.
// 2403.1-2403.359: (60.13): Object invariant may not hold.
// 2404.1-2404.359: (60.13): Object invariant may not hold.
// 2405.1-2405.359: (60.13): Object invariant may not hold.
// 2406.1-2406.359: (60.13): Object invariant may not hold.
// 2409.2-2420.9: (class anchor.sink.Return:46.26)
// 2415.1-2415.358: (46.26): Object invariant may not hold.
// 2416.1-2416.358: (46.26): Object invariant may not hold.
// 2417.1-2417.358: (46.26): Object invariant may not hold.
// 2418.1-2418.358: (46.26): Object invariant may not hold.
// 2419.1-2419.358: (46.26): Object invariant may not hold.
// 2422.1-3254.2: (Method:65.5)
// 2436.1-2436.24: (65.5): Bad tid
// 2437.1-2437.39: (65.5): this is not global
// 2442.1-2442.359: (65.5): Object invariant may not hold.
// 2443.1-2443.359: (65.5): Object invariant may not hold.
// 2444.1-2444.359: (65.5): Object invariant may not hold.
// 2445.1-2445.359: (65.5): Object invariant may not hold.
// 2446.1-2446.359: (65.5): Object invariant may not hold.
// 2449.1-2449.358: (65.5): Object invariant may not hold.
// 2450.1-2450.358: (65.5): Object invariant may not hold.
// 2451.1-2451.358: (65.5): Object invariant may not hold.
// 2452.1-2452.358: (65.5): Object invariant may not hold.
// 2453.1-2453.358: (65.5): Object invariant may not hold.
// 2880.1-2880.14: (65.18): Can only have right-mover memory accesses in requires clause
// 2882.2-2884.2: (class anchor.sink.VarDeclStmt:71.13)
// 2885.2-2887.2: (class anchor.sink.VarDeclStmt:71.13)
// 2888.2-2890.2: (class anchor.sink.VarDeclStmt:71.13)
// 2891.2-2908.28: (class anchor.sink.Read:71.13)
// 2903.1-2903.29: (71.13): Cannot have potential null deference in left-mover part.
// 2907.1-2907.27: (71.13): Reduction failure
// 2909.2-2911.2: (class anchor.sink.VarDeclStmt:71.13)
// 2912.2-2929.28: (class anchor.sink.Read:71.13)
// 2924.1-2924.29: (71.13): Cannot have potential null deference in left-mover part.
// 2928.1-2928.27: (71.13): Reduction failure
// 2930.2-2933.25: (class anchor.sink.Assign:71.13)
// 2934.2-2936.2: (class anchor.sink.VarDeclStmt:71.13)
// 2937.2-2939.2: (class anchor.sink.VarDeclStmt:71.13)
// 2940.2-2957.29: (class anchor.sink.Read:71.13)
// 2952.1-2952.29: (71.13): Cannot have potential null deference in left-mover part.
// 2956.1-2956.27: (71.13): Reduction failure
// 2958.2-2961.40: (class anchor.sink.Assign:71.13)
// 2962.2-2965.25: (class anchor.sink.Assign:71.13)
// 2967.3-2985.43: (class anchor.sink.Yield:72.17)
// 2972.1-2972.359: (72.17): Object invariant may not hold.
// 2973.1-2973.359: (72.17): Object invariant may not hold.
// 2974.1-2974.359: (72.17): Object invariant may not hold.
// 2975.1-2975.359: (72.17): Object invariant may not hold.
// 2976.1-2976.359: (72.17): Object invariant may not hold.
// 2978.1-2978.359: (72.17): Object invariant may not hold.
// 2979.1-2979.359: (72.17): Object invariant may not hold.
// 2980.1-2980.359: (72.17): Object invariant may not hold.
// 2981.1-2981.359: (72.17): Object invariant may not hold.
// 2982.1-2982.359: (72.17): Object invariant may not hold.
// 2989.1-2989.30: (73.31): Cannot have potential null deference in left-mover part.
// 2993.1-2993.28: (73.31): Reduction failure
// 2995.3-2998.89: (class anchor.sink.Assume:74.17)
// 2999.3-3001.3: (class anchor.sink.VarDeclStmt:75.17)
// 3002.3-3019.30: (class anchor.sink.Read:75.17)
// 3014.1-3014.30: (75.17): Cannot have potential null deference in left-mover part.
// 3018.1-3018.28: (75.17): Reduction failure
// 3020.3-3022.3: (class anchor.sink.VarDeclStmt:75.17)
// 3023.3-3025.3: (class anchor.sink.VarDeclStmt:75.17)
// 3026.3-3043.29: (class anchor.sink.Read:75.17)
// 3038.1-3038.30: (75.17): Cannot have potential null deference in left-mover part.
// 3042.1-3042.28: (75.17): Reduction failure
// 3044.3-3046.3: (class anchor.sink.VarDeclStmt:75.17)
// 3047.3-3049.3: (class anchor.sink.VarDeclStmt:75.17)
// 3050.3-3067.30: (class anchor.sink.Read:75.17)
// 3062.1-3062.30: (75.17): Cannot have potential null deference in left-mover part.
// 3066.1-3066.28: (75.17): Reduction failure
// 3068.3-3071.41: (class anchor.sink.Assign:75.17)
// 3072.3-3075.30: (class anchor.sink.Assign:75.17)
// 3076.3-3103.43: (class anchor.sink.AWrite:75.17)
// 3088.1-3088.39: (75.17): Cannot have potential null deference in left-mover part.
// 3093.1-3093.22: (75.17): index < 0.
// 3098.1-3098.48: (75.17): index is >= length.
// 3102.1-3102.28: (75.17): Reduction failure
// 3104.3-3106.3: (class anchor.sink.VarDeclStmt:76.17)
// 3107.3-3109.3: (class anchor.sink.VarDeclStmt:76.17)
// 3110.3-3112.3: (class anchor.sink.VarDeclStmt:76.17)
// 3113.3-3115.3: (class anchor.sink.VarDeclStmt:76.17)
// 3116.3-3133.29: (class anchor.sink.Read:76.17)
// 3128.1-3128.30: (76.17): Cannot have potential null deference in left-mover part.
// 3132.1-3132.28: (76.17): Reduction failure
// 3134.3-3137.41: (class anchor.sink.Assign:76.17)
// 3138.3-3141.22: (class anchor.sink.Assign:76.17)
// 3142.3-3150.82: (class anchor.sink.AAlloc:76.17)
// 3151.3-3154.164: (class anchor.sink.Assume:77.17)
// 3155.3-3158.110: (class anchor.sink.Assume:78.17)
// 3160.3-3185.3: (class anchor.sink.Write:79.17)
// 3172.1-3172.30: (79.17): Cannot have potential null deference in left-mover part.
// 3175.1-3175.28: (79.17): Reduction failure
// 3181.1-3181.96: (79.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
// 3182.1-3182.95: (79.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
// 3186.3-3188.3: (class anchor.sink.VarDeclStmt:80.17)
// 3189.3-3191.3: (class anchor.sink.VarDeclStmt:80.17)
// 3192.3-3209.29: (class anchor.sink.Read:80.17)
// 3204.1-3204.30: (80.17): Cannot have potential null deference in left-mover part.
// 3208.1-3208.28: (80.17): Reduction failure
// 3210.3-3213.22: (class anchor.sink.Assign:80.17)
// 3215.3-3231.29: (class anchor.sink.Write:80.17)
// 3227.1-3227.30: (80.17): Cannot have potential null deference in left-mover part.
// 3230.1-3230.28: (80.17): Reduction failure
// 3235.1-3235.30: (81.13): Cannot have potential null deference in left-mover part.
// 3237.1-3237.35: (81.13): lock not held
// 3239.1-3239.28: (81.13): Reduction failure
// 3243.2-3253.9: (class anchor.sink.Return:70.32)
// 3248.1-3248.358: (70.32): Object invariant may not hold.
// 3249.1-3249.358: (70.32): Object invariant may not hold.
// 3250.1-3250.358: (70.32): Object invariant may not hold.
// 3251.1-3251.358: (70.32): Object invariant may not hold.
// 3252.1-3252.358: (70.32): Object invariant may not hold.
// 3440.1-3440.34: (8.5): Queue.elems failed Write-Write Right-Mover Check
// 3493.1-3493.30: (8.5): Queue.elems failed Write-Read Right-Mover Check
// 3550.1-3550.34: (8.5): Queue.elems failed Write-Write Left-Mover Check
// 3604.1-3604.30: (8.5): Queue.elems failed Write-Read Left-Mover Check
// 3655.1-3655.34: (8.5): Queue.elems failed Read-Write Right-Mover Check
// 3709.1-3709.34: (8.5): Queue.elems failed Read-Write Left-Mover Check
// 3762.1-3762.34: (10.5): Queue.head failed Write-Write Right-Mover Check
// 3815.1-3815.30: (10.5): Queue.head failed Write-Read Right-Mover Check
// 3872.1-3872.34: (10.5): Queue.head failed Write-Write Left-Mover Check
// 3926.1-3926.30: (10.5): Queue.head failed Write-Read Left-Mover Check
// 3977.1-3977.34: (10.5): Queue.head failed Read-Write Right-Mover Check
// 4031.1-4031.34: (10.5): Queue.head failed Read-Write Left-Mover Check
// 4084.1-4084.34: (14.5): Queue.tail failed Write-Write Right-Mover Check
// 4137.1-4137.30: (14.5): Queue.tail failed Write-Read Right-Mover Check
// 4194.1-4194.34: (14.5): Queue.tail failed Write-Write Left-Mover Check
// 4248.1-4248.30: (14.5): Queue.tail failed Write-Read Left-Mover Check
// 4299.1-4299.34: (14.5): Queue.tail failed Read-Write Right-Mover Check
// 4353.1-4353.34: (14.5): Queue.tail failed Read-Write Left-Mover Check
// 4406.1-4406.34: (24.5): Queue.spec failed Write-Write Right-Mover Check
// 4459.1-4459.30: (24.5): Queue.spec failed Write-Read Right-Mover Check
// 4516.1-4516.34: (24.5): Queue.spec failed Write-Write Left-Mover Check
// 4570.1-4570.30: (24.5): Queue.spec failed Write-Read Left-Mover Check
// 4621.1-4621.34: (24.5): Queue.spec failed Read-Write Right-Mover Check
// 4675.1-4675.34: (24.5): Queue.spec failed Read-Write Left-Mover Check
// 4732.1-4732.34: (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
// 4789.1-4789.30: (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
// 4850.1-4850.34: (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
// 4908.1-4908.30: (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
// 4963.1-4963.34: (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
// 5021.1-5021.34: (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
// 5078.1-5078.34: (23.5): Array Array.Queue.A failed Write-Write Right-Mover Check
// 5135.1-5135.30: (23.5): Array Array.Queue.A failed Write-Read Right-Mover Check
// 5196.1-5196.34: (23.5): Array Array.Queue.A failed Write-Write Left-Mover Check
// 5254.1-5254.30: (23.5): Array Array.Queue.A failed Write-Read Left-Mover Check
// 5309.1-5309.34: (23.5): Array Array.Queue.A failed Read-Write Right-Mover Check
// 5367.1-5367.34: (23.5): Array Array.Queue.A failed Read-Write Left-Mover Check
// 5454.1-5454.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5455.1-5455.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5456.1-5456.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
// 5576.1-5576.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
// 5701.1-5701.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
// 5702.1-5702.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
// 5789.1-5789.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
// 5790.1-5790.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
// 5791.1-5791.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
// 5877.1-5877.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
// 5878.1-5878.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
// 5879.1-5879.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
// 5967.1-5967.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5968.1-5968.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5969.1-5969.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6089.1-6089.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
// 6214.1-6214.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
// 6215.1-6215.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
// 6302.1-6302.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
// 6303.1-6303.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
// 6304.1-6304.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
// 6390.1-6390.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
// 6391.1-6391.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
// 6392.1-6392.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
// 6480.1-6480.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
// 6481.1-6481.101: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
// 6482.1-6482.158: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6602.1-6602.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
// 6727.1-6727.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
// 6728.1-6728.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
// 6815.1-6815.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
// 6816.1-6816.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
// 6817.1-6817.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
// 6903.1-6903.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
// 6904.1-6904.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
// 6905.1-6905.99: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
// 6993.1-6993.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
// 6994.1-6994.101: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
// 6995.1-6995.158: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
// 7115.1-7115.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
// 7240.1-7240.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
// 7241.1-7241.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
// 7328.1-7328.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
// 7329.1-7329.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
// 7330.1-7330.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
// 7416.1-7416.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
// 7417.1-7417.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
// 7418.1-7418.99: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
// 7511.1-7511.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
// 7512.1-7512.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
// 7513.1-7513.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
// 7640.1-7640.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 7772.1-7772.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 7773.1-7773.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 7865.1-7865.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 7866.1-7866.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 7867.1-7867.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 7958.1-7958.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
// 7959.1-7959.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
// 7960.1-7960.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
// 8053.1-8053.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
// 8054.1-8054.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
// 8055.1-8055.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
// 8182.1-8182.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 8314.1-8314.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 8315.1-8315.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 8407.1-8407.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 8408.1-8408.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 8409.1-8409.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 8500.1-8500.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
// 8501.1-8501.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
// 8502.1-8502.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
// 8590.1-8590.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
// 8591.1-8591.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
// 8592.1-8592.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
// 8712.1-8712.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
// 8837.1-8837.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
// 8838.1-8838.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
// 8925.1-8925.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
// 8926.1-8926.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
// 8927.1-8927.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
// 9013.1-9013.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
// 9014.1-9014.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
// 9015.1-9015.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
// 9103.1-9103.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
// 9104.1-9104.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
// 9105.1-9105.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
// 9225.1-9225.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
// 9350.1-9350.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
// 9351.1-9351.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
// 9438.1-9438.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
// 9439.1-9439.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
// 9440.1-9440.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
// 9526.1-9526.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
// 9527.1-9527.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
// 9528.1-9528.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
// 9616.1-9616.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
// 9617.1-9617.101: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
// 9618.1-9618.158: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
// 9738.1-9738.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
// 9863.1-9863.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
// 9864.1-9864.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
// 9951.1-9951.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
// 9952.1-9952.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
// 9953.1-9953.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
// 10039.1-10039.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
// 10040.1-10040.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
// 10041.1-10041.99: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
// 10129.1-10129.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
// 10130.1-10130.101: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
// 10131.1-10131.158: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
// 10251.1-10251.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
// 10376.1-10376.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
// 10377.1-10377.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
// 10464.1-10464.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
// 10465.1-10465.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
// 10466.1-10466.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
// 10552.1-10552.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
// 10553.1-10553.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
// 10554.1-10554.99: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
// 10647.1-10647.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
// 10648.1-10648.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
// 10649.1-10649.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
// 10776.1-10776.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 10908.1-10908.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 10909.1-10909.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 11001.1-11001.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 11002.1-11002.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 11003.1-11003.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 11094.1-11094.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
// 11095.1-11095.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
// 11096.1-11096.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
// 11189.1-11189.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
// 11190.1-11190.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
// 11191.1-11191.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
// 11318.1-11318.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 11450.1-11450.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 11451.1-11451.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 11543.1-11543.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 11544.1-11544.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 11545.1-11545.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 11636.1-11636.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
// 11637.1-11637.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
// 11638.1-11638.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
// 11726.1-11726.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
// 11727.1-11727.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
// 11728.1-11728.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
// 11848.1-11848.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
// 11973.1-11973.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
// 11974.1-11974.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
// 12061.1-12061.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
// 12062.1-12062.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
// 12063.1-12063.146: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
// 12149.1-12149.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
// 12150.1-12150.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
// 12151.1-12151.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
// 12239.1-12239.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12240.1-12240.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12241.1-12241.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12361.1-12361.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
// 12486.1-12486.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
// 12487.1-12487.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
// 12574.1-12574.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
// 12575.1-12575.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
// 12576.1-12576.146: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
// 12662.1-12662.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
// 12663.1-12663.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
// 12664.1-12664.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
// 12752.1-12752.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12753.1-12753.101: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12754.1-12754.158: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12874.1-12874.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
// 12999.1-12999.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
// 13000.1-13000.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
// 13087.1-13087.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
// 13088.1-13088.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
// 13089.1-13089.146: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
// 13175.1-13175.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
// 13176.1-13176.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
// 13177.1-13177.99: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
// 13265.1-13265.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
// 13266.1-13266.101: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
// 13267.1-13267.158: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
// 13387.1-13387.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
// 13512.1-13512.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
// 13513.1-13513.144: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
// 13600.1-13600.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
// 13601.1-13601.136: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
// 13602.1-13602.146: (14.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
// 13688.1-13688.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
// 13689.1-13689.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
// 13690.1-13690.99: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
// 13783.1-13783.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
// 13784.1-13784.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
// 13785.1-13785.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
// 13912.1-13912.140: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 14044.1-14044.144: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 14045.1-14045.144: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 14137.1-14137.136: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 14138.1-14138.136: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 14139.1-14139.144: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 14230.1-14230.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
// 14231.1-14231.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
// 14232.1-14232.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
// 14325.1-14325.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
// 14326.1-14326.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
// 14327.1-14327.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
// 14454.1-14454.140: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 14586.1-14586.144: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 14587.1-14587.144: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 14679.1-14679.136: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 14680.1-14680.136: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 14681.1-14681.144: (14.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 14772.1-14772.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
// 14773.1-14773.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
// 14774.1-14774.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
// 14862.1-14862.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
// 14863.1-14863.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
// 14864.1-14864.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
// 14984.1-14984.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
// 15109.1-15109.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
// 15110.1-15110.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
// 15197.1-15197.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
// 15198.1-15198.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
// 15199.1-15199.146: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
// 15285.1-15285.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
// 15286.1-15286.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
// 15287.1-15287.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
// 15375.1-15375.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15376.1-15376.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15377.1-15377.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
// 15497.1-15497.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
// 15622.1-15622.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
// 15623.1-15623.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
// 15710.1-15710.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
// 15711.1-15711.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
// 15712.1-15712.146: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
// 15798.1-15798.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
// 15799.1-15799.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
// 15800.1-15800.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
// 15888.1-15888.140: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15889.1-15889.101: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15890.1-15890.158: (14.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16010.1-16010.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
// 16135.1-16135.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
// 16136.1-16136.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
// 16223.1-16223.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
// 16224.1-16224.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
// 16225.1-16225.146: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
// 16311.1-16311.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
// 16312.1-16312.136: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
// 16313.1-16313.99: (14.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
// 16401.1-16401.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
// 16402.1-16402.101: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
// 16403.1-16403.158: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16523.1-16523.140: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
// 16648.1-16648.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
// 16649.1-16649.144: (24.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
// 16736.1-16736.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
// 16737.1-16737.136: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
// 16738.1-16738.146: (24.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
// 16824.1-16824.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
// 16825.1-16825.136: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
// 16826.1-16826.99: (24.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
// 16919.1-16919.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
// 16920.1-16920.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
// 16921.1-16921.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
// 17048.1-17048.140: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 17180.1-17180.144: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 17181.1-17181.144: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 17273.1-17273.136: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 17274.1-17274.136: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 17275.1-17275.144: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 17366.1-17366.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
// 17367.1-17367.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
// 17368.1-17368.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
// 17461.1-17461.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
// 17462.1-17462.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
// 17463.1-17463.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
// 17590.1-17590.140: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 17722.1-17722.144: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 17723.1-17723.144: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 17815.1-17815.136: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 17816.1-17816.136: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 17817.1-17817.144: (24.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 17908.1-17908.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
// 17909.1-17909.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
// 17910.1-17910.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
// 18003.1-18003.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18004.1-18004.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18005.1-18005.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18132.1-18132.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
// 18264.1-18264.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
// 18265.1-18265.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
// 18357.1-18357.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
// 18358.1-18358.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
// 18359.1-18359.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
// 18450.1-18450.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 18451.1-18451.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 18452.1-18452.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 18545.1-18545.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18546.1-18546.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18547.1-18547.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18674.1-18674.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
// 18806.1-18806.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
// 18807.1-18807.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
// 18899.1-18899.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
// 18900.1-18900.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
// 18901.1-18901.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
// 18992.1-18992.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 18993.1-18993.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 18994.1-18994.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19087.1-19087.140: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19088.1-19088.101: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19089.1-19089.156: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 19216.1-19216.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
// 19348.1-19348.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
// 19349.1-19349.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
// 19441.1-19441.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
// 19442.1-19442.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
// 19443.1-19443.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
// 19534.1-19534.136: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 19535.1-19535.136: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 19536.1-19536.99: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19629.1-19629.140: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19630.1-19630.101: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19631.1-19631.156: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 19758.1-19758.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
// 19890.1-19890.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
// 19891.1-19891.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
// 19983.1-19983.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
// 19984.1-19984.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
// 19985.1-19985.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
// 20076.1-20076.136: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 20077.1-20077.136: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 20078.1-20078.99: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 20176.1-20176.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 20177.1-20177.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 20178.1-20178.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 20312.1-20312.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 20451.1-20451.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 20452.1-20452.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 20549.1-20549.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 20550.1-20550.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 20551.1-20551.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 20647.1-20647.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 20648.1-20648.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 20649.1-20649.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 20747.1-20747.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 20748.1-20748.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 20749.1-20749.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 20883.1-20883.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 21022.1-21022.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 21023.1-21023.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 21120.1-21120.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 21121.1-21121.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 21122.1-21122.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 21218.1-21218.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 21219.1-21219.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 21220.1-21220.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 21313.1-21313.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21314.1-21314.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21315.1-21315.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 21442.1-21442.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
// 21574.1-21574.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
// 21575.1-21575.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
// 21667.1-21667.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
// 21668.1-21668.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
// 21669.1-21669.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
// 21760.1-21760.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 21761.1-21761.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 21762.1-21762.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 21855.1-21855.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21856.1-21856.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21857.1-21857.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 21984.1-21984.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
// 22116.1-22116.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
// 22117.1-22117.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
// 22209.1-22209.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
// 22210.1-22210.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
// 22211.1-22211.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
// 22302.1-22302.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22303.1-22303.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22304.1-22304.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 22397.1-22397.140: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 22398.1-22398.101: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 22399.1-22399.156: (14.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 22526.1-22526.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
// 22658.1-22658.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
// 22659.1-22659.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
// 22751.1-22751.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
// 22752.1-22752.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
// 22753.1-22753.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
// 22844.1-22844.136: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22845.1-22845.136: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22846.1-22846.99: (14.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 22939.1-22939.140: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 22940.1-22940.101: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 22941.1-22941.156: (24.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 23068.1-23068.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
// 23200.1-23200.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
// 23201.1-23201.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
// 23293.1-23293.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
// 23294.1-23294.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
// 23295.1-23295.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
// 23386.1-23386.136: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 23387.1-23387.136: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 23388.1-23388.99: (24.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 23486.1-23486.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 23487.1-23487.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 23488.1-23488.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 23622.1-23622.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 23761.1-23761.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 23762.1-23762.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 23859.1-23859.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 23860.1-23860.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 23861.1-23861.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 23957.1-23957.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 23958.1-23958.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 23959.1-23959.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 24057.1-24057.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 24058.1-24058.101: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 24059.1-24059.156: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 24193.1-24193.140: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 24332.1-24332.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 24333.1-24333.144: (23.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 24430.1-24430.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 24431.1-24431.136: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 24432.1-24432.144: (23.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 24528.1-24528.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 24529.1-24529.136: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 24530.1-24530.99: (23.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 24537.1-24537.359: (<undefined position>): Object invariant may not hold.
// 24538.1-24538.359: (<undefined position>): Object invariant may not hold.
// 24539.1-24539.359: (<undefined position>): Object invariant may not hold.
// 24540.1-24540.359: (<undefined position>): Object invariant may not hold.
// 24541.1-24541.359: (<undefined position>): Object invariant may not hold.
// 24554.1-24554.358: (<undefined position>): Object invariant may not hold.
// 24555.1-24555.358: (<undefined position>): Object invariant may not hold.
// 24556.1-24556.358: (<undefined position>): Object invariant may not hold.
// 24557.1-24557.358: (<undefined position>): Object invariant may not hold.
// 24558.1-24558.358: (<undefined position>): Object invariant may not hold.
// 24572.1-24598.2: (8.24): yields_as clause for Queue.elems is not valid
// 24603.1-24626.2: (8.24): yields_as clause for Queue.elems is not reflexive
// 24632.1-24632.359: (8.24): Object invariant may not hold.
// 24633.1-24633.359: (8.24): Object invariant may not hold.
// 24634.1-24634.359: (8.24): Object invariant may not hold.
// 24635.1-24635.359: (8.24): Object invariant may not hold.
// 24636.1-24636.359: (8.24): Object invariant may not hold.
// 24637.1-24683.2: (8.24): yields_as clause for Queue.elems is not transitive
// 24696.1-24722.2: (10.33): yields_as clause for Queue.head is not valid
// 24727.1-24750.2: (10.33): yields_as clause for Queue.head is not reflexive
// 24756.1-24756.359: (10.33): Object invariant may not hold.
// 24757.1-24757.359: (10.33): Object invariant may not hold.
// 24758.1-24758.359: (10.33): Object invariant may not hold.
// 24759.1-24759.359: (10.33): Object invariant may not hold.
// 24760.1-24760.359: (10.33): Object invariant may not hold.
// 24761.1-24807.2: (10.33): yields_as clause for Queue.head is not transitive
// 24820.1-24846.2: (14.33): yields_as clause for Queue.tail is not valid
// 24851.1-24874.2: (14.33): yields_as clause for Queue.tail is not reflexive
// 24880.1-24880.359: (14.33): Object invariant may not hold.
// 24881.1-24881.359: (14.33): Object invariant may not hold.
// 24882.1-24882.359: (14.33): Object invariant may not hold.
// 24883.1-24883.359: (14.33): Object invariant may not hold.
// 24884.1-24884.359: (14.33): Object invariant may not hold.
// 24885.1-24931.2: (14.33): yields_as clause for Queue.tail is not transitive
// 24944.1-24970.2: (24.32): yields_as clause for Queue.spec is not valid
// 24975.1-24998.2: (24.32): yields_as clause for Queue.spec is not reflexive
// 25004.1-25004.359: (24.32): Object invariant may not hold.
// 25005.1-25005.359: (24.32): Object invariant may not hold.
// 25006.1-25006.359: (24.32): Object invariant may not hold.
// 25007.1-25007.359: (24.32): Object invariant may not hold.
// 25008.1-25008.359: (24.32): Object invariant may not hold.
// 25009.1-25055.2: (24.32): yields_as clause for Queue.spec is not transitive
// 25069.1-25095.2: (7.32): yields_as clause for Queue._lock is not valid
// 25100.1-25123.2: (7.32): yields_as clause for Queue._lock is not reflexive
// 25129.1-25129.359: (3.1): Object invariant may not hold.
// 25130.1-25130.359: (3.1): Object invariant may not hold.
// 25131.1-25131.359: (3.1): Object invariant may not hold.
// 25132.1-25132.359: (3.1): Object invariant may not hold.
// 25133.1-25133.359: (3.1): Object invariant may not hold.
// 25134.1-25180.2: (7.32): yields_as clause for Queue._lock is not transitive
// 25190.1-25222.2: (6.28): yields_as clause for Array.Queue.T is not valid
// 25223.1-25252.2: (6.28): yields_as clause for Array.Queue.T is not reflexive
// 25257.1-25257.359: (6.28): Object invariant may not hold.
// 25258.1-25258.359: (6.28): Object invariant may not hold.
// 25259.1-25259.359: (6.28): Object invariant may not hold.
// 25260.1-25260.359: (6.28): Object invariant may not hold.
// 25261.1-25261.359: (6.28): Object invariant may not hold.
// 25262.1-25312.2: (6.28): yields_as clause for Array.Queue.T is not transitive
// 25322.1-25354.2: (23.28): yields_as clause for Array.Queue.A is not valid
// 25355.1-25384.2: (23.28): yields_as clause for Array.Queue.A is not reflexive
// 25389.1-25389.359: (23.28): Object invariant may not hold.
// 25390.1-25390.359: (23.28): Object invariant may not hold.
// 25391.1-25391.359: (23.28): Object invariant may not hold.
// 25392.1-25392.359: (23.28): Object invariant may not hold.
// 25393.1-25393.359: (23.28): Object invariant may not hold.
// 25394.1-25444.2: (23.28): yields_as clause for Array.Queue.A is not transitive
