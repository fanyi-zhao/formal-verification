                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/fasttrack-alias.anchor:                 
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class LockState {                                                                               
      array VC_LockState = int[isLocal(this, tid) ? B : E]                                          
                                                                                                    
       [LockState.VC_LockState{this}] vc isLocal(this, tid) ? B : E                                 
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [LockState.VC_LockState{this}].null;                                      
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void copy(LockState st) {                                                                     
        [LockState.VC_LockState{st}] tmp1;                                                          
        tmp1 := st.vc;                                                                              
        int tmp2;                                                                                   
        tmp2 = 0;                                                                                   
        int tmp3;                                                                                   
        tmp3 = 0;                                                                                   
        tmp1[tmp2] := tmp3;                                                                         
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
    class ThreadState {                                                                             
      array VC_ThreadState = int[isLocal(this, tid) ? B : E]                                        
                                                                                                    
       [ThreadState.VC_ThreadState{this}] vc isLocal(this, tid) ? B : E                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void get() {                                                                                  
        [ThreadState.VC_ThreadState{this}] vc2;                                                     
        vc2 := this.vc;                                                                             
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
      requires isLocal(this, tid);                                                                  
                                                                                                    
      public void acq() {                                                                           
        this.get()                                                                                  
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class LockState {                                                                               
      array VC_LockState = int[isLocal(this, tid) ? B : E]                                          
                                                                                                    
       [LockState.VC_LockState{this}] vc isLocal(this, tid) ? B : E                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [LockState.VC_LockState{this}].null;                                      
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void copy(LockState st) {                                                                     
        [LockState.VC_LockState{st}] tmp1;                                                          
        tmp1 := st.vc;                                                                              
        int tmp2;                                                                                   
        tmp2 = 0;                                                                                   
        int tmp3;                                                                                   
        tmp3 = 0;                                                                                   
        tmp1[tmp2] := tmp3;                                                                         
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class ThreadState {                                                                             
      array VC_ThreadState = int[isLocal(this, tid) ? B : E]                                        
                                                                                                    
       [ThreadState.VC_ThreadState{this}] vc isLocal(this, tid) ? B : E                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void get() {                                                                                  
        [ThreadState.VC_ThreadState{this}] vc2;                                                     
        vc2 := this.vc;                                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires isLocal(this, tid);                                                                  
                                                                                                    
      public void acq() {                                                                           
        this.get()                                                                                  
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class LockState {                                                                               
      array VC_LockState = int[isLocal(this, tid) ? B : E]                                          
                                                                                                    
       [LockState.VC_LockState{this}] vc isLocal(this, tid) ? B : E                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [LockState.VC_LockState{this}].null;                                      
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void copy(LockState st) {                                                                     
        [LockState.VC_LockState{st}] tmp1;                                                          
        tmp1 := st.vc;                                                                              
        int tmp2;                                                                                   
        tmp2 = 0;                                                                                   
        int tmp3;                                                                                   
        tmp3 = 0;                                                                                   
        tmp1[tmp2] := tmp3;                                                                         
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class ThreadState {                                                                             
      array VC_ThreadState = int[isLocal(this, tid) ? B : E]                                        
                                                                                                    
       [ThreadState.VC_ThreadState{this}] vc isLocal(this, tid) ? B : E                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void get() {                                                                                  
        [ThreadState.VC_ThreadState{this}] vc2;                                                     
        vc2 := this.vc;                                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires isLocal(this, tid);                                                                  
                                                                                                    
      public void acq() {                                                                           
        {                                                                                           
          inlined this.get();                                                                       
          exit$135: {                                                                               
            ThreadState this$135;                                                                   
            this$135 = this;                                                                        
            {                                                                                       
              [ThreadState.VC_ThreadState{this$135}] vc2$135;                                       
              vc2$135 := this$135.vc;                                                               
              {                                                                                     
                break exit$135;                                                                     
              }                                                                                     
            }                                                                                       
          }                                                                                         
          inlined return;                                                                           
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class LockState {                                                                               
      array VC_LockState = int[isLocal(this, tid) ? B : E]                                          
                                                                                                    
       [LockState.VC_LockState{this}] vc isLocal(this, tid) ? B : E                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [LockState.VC_LockState{this}].null;                                      
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void copy(LockState st) {                                                                     
        [LockState.VC_LockState{st}] tmp1;                                                          
        tmp1 := st.vc;                                                                              
        int tmp2;                                                                                   
        tmp2 = 0;                                                                                   
        int tmp3;                                                                                   
        tmp3 = 0;                                                                                   
        tmp1[tmp2] := tmp3;                                                                         
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class ThreadState {                                                                             
      array VC_ThreadState = int[isLocal(this, tid) ? B : E]                                        
                                                                                                    
       [ThreadState.VC_ThreadState{this}] vc isLocal(this, tid) ? B : E                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.vc == [ThreadState.VC_ThreadState{this}].null;                                  
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void get() {                                                                                  
        [ThreadState.VC_ThreadState{this}] vc2;                                                     
        vc2 := this.vc;                                                                             
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
      requires isLocal(this, tid);                                                                  
                                                                                                    
      public void acq() {                                                                           
        {                                                                                           
          inlined this.get();                                                                       
          exit$135: {                                                                               
            ThreadState this$135;                                                                   
            this$135 = this;                                                                        
            {                                                                                       
              [ThreadState.VC_ThreadState{this$135}] vc2$135;                                       
              vc2$135 := this$135.vc;                                                               
              {                                                                                     
                break exit$135;                                                                     
              }                                                                                     
            }                                                                                       
          }                                                                                         
          inlined return;                                                                           
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl LockState ***/                                                                      
                                                                                                    
type LockState;                                                                                     
const unique LockState.null: LockState;                                                             
var LockState._state: [LockState]State;                                                             
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var LockState.vc: [LockState]Array.LockState.VC_LockState;                                          
                                                                                                    
function {:inline} ReadEval.LockState.vc(tid: Tid,this : LockState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.LockState.VC_LockState.null;                                                
 if (isLocal(LockState._state[this], tid)) then                                                     
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.LockState.vc(tid: Tid,this : LockState,newValue: Array.LockState.VC_LockState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(LockState._state[this], tid)) then                                                     
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var LockState._lock: [LockState]Tid;                                                                
                                                                                                    
function {:inline} ReadEval.LockState._lock(tid: Tid,this : LockState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(LockState._state[this], tid)) then                                                     
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((LockState._lock[this]==tid)) then                                                           
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((LockState._lock[this]==Tid.null)&&(newValue==tid))) then                                   
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((LockState._lock[this]==tid)&&(newValue==Tid.null))) then                                  
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.LockState._lock(tid: Tid,this : LockState,newValue: Tid,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(LockState._state[this], tid)) then                                                     
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((LockState._lock[this]==tid)) then                                                           
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((LockState._lock[this]==Tid.null)&&(newValue==tid))) then                                   
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((LockState._lock[this]==tid)&&(newValue==Tid.null))) then                                  
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/*** Array Array.LockState.VC_LockState ***/                                                        
                                                                                                    
type Array.LockState.VC_LockState;                                                                  
const unique Array.LockState.VC_LockState.null: Array.LockState.VC_LockState;                       
var Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State;                       
                                                                                                    
const Array.LockState.VC_LockState._this : [Array.LockState.VC_LockState]LockState;                 
const Array.LockState.VC_LockState._length : [Array.LockState.VC_LockState]int;                     
var Array.LockState.VC_LockState._elems  : [Array.LockState.VC_LockState]([int]int);                
                                                                                                    
axiom (forall $this : Array.LockState.VC_LockState :: Array.LockState.VC_LockState._length[$this] >= 0);
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.LockState.VC_LockState: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.LockState.VC_LockState(tid: Tid,this : LockState,athis : Array.LockState.VC_LockState,index : int,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(LockState._state[this], tid)) then                                                     
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.LockState.VC_LockState: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.LockState.VC_LockState(tid: Tid,this : LockState,athis : Array.LockState.VC_LockState,index : int,newValue: int,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(LockState._state[this], tid)) then                                                     
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl ThreadState ***/                                                                    
                                                                                                    
type ThreadState;                                                                                   
const unique ThreadState.null: ThreadState;                                                         
var ThreadState._state: [ThreadState]State;                                                         
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState;                                  
                                                                                                    
function {:inline} ReadEval.ThreadState.vc(tid: Tid,this : ThreadState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.ThreadState.VC_ThreadState.null;                                            
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState.vc(tid: Tid,this : ThreadState,newValue: Array.ThreadState.VC_ThreadState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var ThreadState._lock: [ThreadState]Tid;                                                            
                                                                                                    
function {:inline} ReadEval.ThreadState._lock(tid: Tid,this : ThreadState,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((ThreadState._lock[this]==tid)) then                                                         
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((ThreadState._lock[this]==Tid.null)&&(newValue==tid))) then                                 
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((ThreadState._lock[this]==tid)&&(newValue==Tid.null))) then                                
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.ThreadState._lock(tid: Tid,this : ThreadState,newValue: Tid,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((ThreadState._lock[this]==tid)) then                                                         
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((ThreadState._lock[this]==Tid.null)&&(newValue==tid))) then                                 
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((ThreadState._lock[this]==tid)&&(newValue==Tid.null))) then                                
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  ThreadState.acq(tid:Tid, this : ThreadState)                                             
modifies LockState._state;                                                                          
modifies LockState.vc;                                                                              
modifies LockState._lock;                                                                           
modifies Array.LockState.VC_LockState._state;                                                       
modifies Array.LockState.VC_LockState._elems;                                                       
modifies ThreadState._state;                                                                        
modifies ThreadState.vc;                                                                            
modifies ThreadState._lock;                                                                         
modifies Array.ThreadState.VC_ThreadState._state;                                                   
modifies Array.ThreadState.VC_ThreadState._elems;                                                   
                                                                                                    
requires ValidTid(tid);                                                                                    // (21.5): Bad tid
requires isShared(ThreadState._state[this]);                                                               // (21.5): this is not global
                                                                                                    
requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
requires isLocal(ThreadState._state[this], tid);                                                    
                                                                                                    
                                                                                                    
ensures StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
{                                                                                                   
 var path1670354: int;                                                                              
 var vc2$1351670354: Array.ThreadState.VC_ThreadState;                                              
 var Array.LockState.VC_LockState._elems1670354: [Array.LockState.VC_LockState]([int]int);          
 var Array.ThreadState.VC_ThreadState._elems1670364: [Array.ThreadState.VC_ThreadState]([int]int);  
 var LockState._lock1670354: [LockState]Tid;                                                        
 var LockState.vc1670354: [LockState]Array.LockState.VC_LockState;                                  
 var $recorded.state1670354: int;                                                                   
 var Array.LockState.VC_LockState._state1670354: [Array.LockState.VC_LockState]State;               
 var $recorded.state1670364: int;                                                                   
 var Array.LockState.VC_LockState._state1670364: [Array.LockState.VC_LockState]State;               
 var ThreadState.vc1670354: [ThreadState]Array.ThreadState.VC_ThreadState;                          
 var Array.ThreadState.VC_ThreadState._state1670354: [Array.ThreadState.VC_ThreadState]State;       
 var $pc1670364: Phase;                                                                             
 var Array.ThreadState.VC_ThreadState._length1670364: [Array.ThreadState.VC_ThreadState]int;        
 var LockState._lock1670364: [LockState]Tid;                                                        
 var this$1351670354: ThreadState;                                                                  
 var moverPath1670354: MoverPath;                                                                   
 var this$135: ThreadState;                                                                         
 var $pc1670354: Phase;                                                                             
 var mover1670354: Mover;                                                                           
 var LockState.vc1670364: [LockState]Array.LockState.VC_LockState;                                  
 var ThreadState._state1670364: [ThreadState]State;                                                 
 var Array.ThreadState.VC_ThreadState._elems1670354: [Array.ThreadState.VC_ThreadState]([int]int);  
 var ThreadState._lock1670354: [ThreadState]Tid;                                                    
 var this1670354: ThreadState;                                                                      
 var ThreadState._lock1670364: [ThreadState]Tid;                                                    
 var ThreadState.vc1670364: [ThreadState]Array.ThreadState.VC_ThreadState;                          
 var Array.ThreadState.VC_ThreadState._length1670354: [Array.ThreadState.VC_ThreadState]int;        
 var Array.LockState.VC_LockState._elems1670364: [Array.LockState.VC_LockState]([int]int);          
 var Array.ThreadState.VC_ThreadState._state1670364: [Array.ThreadState.VC_ThreadState]State;       
 var LockState._state1670354: [LockState]State;                                                     
 var Array.LockState.VC_LockState._length1670354: [Array.LockState.VC_LockState]int;                
 var Array.LockState.VC_LockState._length1670364: [Array.LockState.VC_LockState]int;                
 var tid1670354: Tid;                                                                               
 var ThreadState._state1670354: [ThreadState]State;                                                 
 var LockState._state1670364: [LockState]State;                                                     
 var this1670364: ThreadState;                                                                      
 var tid1670364: Tid;                                                                               
 var vc2$135: Array.ThreadState.VC_ThreadState;                                                     
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
 assert true;                                                                                              // (21.14): Can only have right-mover memory accesses in requires clause
                                                                                                    
 // inlined: this.get()}                                                                            
 exit$135_top:                                                                                      
                                                                                                    
 // 23.9: ThreadState this$135;                                                                     
                                                                                                    
                                                                                                    
 // 23.9: this$135 = this;                                                                          
                                                                                                    
 this$135 := this;                                                                                  
                                                                                                    
 // 18.7: [ThreadState.VC_ThreadState{this$135}] vc2$135;                                           
                                                                                                    
                                                                                                    
 // 18.7: vc2$135 := this$135.vc;                                                                   
                                                                                                    
                                                                                                    
 moverPath1670354 := ReadEval.ThreadState.vc(tid: Tid,this$135: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 mover1670354 := m#moverPath(moverPath1670354);                                                     
 path1670354 := p#moverPath(moverPath1670354);                                                      
 assume LockState._state1670354 == LockState._state && LockState.vc1670354 == LockState.vc && LockState._lock1670354 == LockState._lock && Array.LockState.VC_LockState._state1670354 == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems1670354 == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length1670354 == Array.LockState.VC_LockState._length && ThreadState._state1670354 == ThreadState._state && ThreadState.vc1670354 == ThreadState.vc && ThreadState._lock1670354 == ThreadState._lock && Array.ThreadState.VC_ThreadState._state1670354 == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems1670354 == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length1670354 == Array.ThreadState.VC_ThreadState._length && vc2$1351670354 == vc2$135 && this$1351670354 == this$135 && this1670354 == this && tid1670354 == tid && $pc1670354 == $pc;
 assume $recorded.state1670354 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$135 != ThreadState.null;                                                              
 } else {                                                                                           
  assert this$135 != ThreadState.null;                                                                     // (18.7): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover1670354);                                                              
 assert $pc != PhaseError;                                                                                 // (18.7): Reduction failure
 vc2$135 := ThreadState.vc[this$135];                                                               
                                                                                                    
 // 17.16: break exit$135;                                                                          
                                                                                                    
 goto exit$135_bottom;                                                                              
 exit$135_bottom:                                                                                   
                                                                                                    
 // 22.23: // return;                                                                               
                                                                                                    
 assume LockState._state1670364 == LockState._state && LockState.vc1670364 == LockState.vc && LockState._lock1670364 == LockState._lock && Array.LockState.VC_LockState._state1670364 == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems1670364 == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length1670364 == Array.LockState.VC_LockState._length && ThreadState._state1670364 == ThreadState._state && ThreadState.vc1670364 == ThreadState.vc && ThreadState._lock1670364 == ThreadState._lock && Array.ThreadState.VC_ThreadState._state1670364 == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems1670364 == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length1670364 == Array.ThreadState.VC_ThreadState._length && this1670364 == this && tid1670364 == tid;
 assume $recorded.state1670364 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.ThreadState.VC_ThreadState ***/                                                    
                                                                                                    
type Array.ThreadState.VC_ThreadState;                                                              
const unique Array.ThreadState.VC_ThreadState.null: Array.ThreadState.VC_ThreadState;               
var Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State;               
                                                                                                    
const Array.ThreadState.VC_ThreadState._this : [Array.ThreadState.VC_ThreadState]ThreadState;       
const Array.ThreadState.VC_ThreadState._length : [Array.ThreadState.VC_ThreadState]int;             
var Array.ThreadState.VC_ThreadState._elems  : [Array.ThreadState.VC_ThreadState]([int]int);        
                                                                                                    
axiom (forall $this : Array.ThreadState.VC_ThreadState :: Array.ThreadState.VC_ThreadState._length[$this] >= 0);
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.ThreadState.VC_ThreadState: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.ThreadState.VC_ThreadState(tid: Tid,this : ThreadState,athis : Array.ThreadState.VC_ThreadState,index : int,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.ThreadState.VC_ThreadState: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.ThreadState.VC_ThreadState(tid: Tid,this : ThreadState,athis : Array.ThreadState.VC_ThreadState,index : int,newValue: int,LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(ThreadState._state[this], tid)) then                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(LockState._state: [LockState]State,LockState.vc: [LockState]Array.LockState.VC_LockState,LockState._lock: [LockState]Tid,Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State,Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int),Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int,ThreadState._state: [ThreadState]State,ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState,ThreadState._lock: [ThreadState]Tid,Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State,Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int),Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int) returns (bool) {
  true &&                                                                                           
  (forall _i: LockState  :: _i == LockState.null <==> isNull(LockState._state[_i])) &&              
  (forall _i: Array.LockState.VC_LockState  :: _i == Array.LockState.VC_LockState.null <==> isNull(Array.LockState.VC_LockState._state[_i])) &&
  (forall _i: ThreadState  :: _i == ThreadState.null <==> isNull(ThreadState._state[_i])) &&        
  (forall _i: Array.ThreadState.VC_ThreadState  :: _i == Array.ThreadState.VC_ThreadState.null <==> isNull(Array.ThreadState.VC_ThreadState._state[_i])) &&
  (forall _t: Tid, _i: Array.LockState.VC_LockState  :: ValidTid(_t) && isAccessible(Array.LockState.VC_LockState._state[_i], _t) ==> isAccessible(LockState._state[Array.LockState.VC_LockState._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.ThreadState.VC_ThreadState  :: ValidTid(_t) && isAccessible(Array.ThreadState.VC_ThreadState._state[_i], _t) ==> isAccessible(ThreadState._state[Array.ThreadState.VC_ThreadState._this[_i]], _t)) &&
  (forall _i: LockState ::  (isShared(LockState._state[_i]) ==> isSharedAssignable(Array.LockState.VC_LockState._state[LockState.vc[_i]]))) &&
  (forall _i: LockState ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(LockState._state[_i],_t) ==> isLocalAssignable(Array.LockState.VC_LockState._state[LockState.vc[_i]], _t)))) &&
  (forall _i: LockState :: { LockState.vc[_i] } Array.LockState.VC_LockState._this[LockState.vc[_i]] == _i) &&
  (forall _i: ThreadState ::  (isShared(ThreadState._state[_i]) ==> isSharedAssignable(Array.ThreadState.VC_ThreadState._state[ThreadState.vc[_i]]))) &&
  (forall _i: ThreadState ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(ThreadState._state[_i],_t) ==> isLocalAssignable(Array.ThreadState.VC_ThreadState._state[ThreadState.vc[_i]], _t)))) &&
  (forall _i: ThreadState :: { ThreadState.vc[_i] } Array.ThreadState.VC_ThreadState._this[ThreadState.vc[_i]] == _i) &&
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.LockState.vc(u: Tid,x: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.3): LockState.vc failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.LockState.vc(u: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.3): LockState.vc failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.LockState.VC_LockState;                                                     
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == LockState.vc[x];                                                                       
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 LockState.vc[x] := havocValue;                                                                     
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.LockState.vc(u: Tid,x: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.3): LockState.vc failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.LockState.VC_LockState;                                                     
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == LockState.vc[x];                                                                       
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.LockState.vc(u: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.3): LockState.vc failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.LockState.vc(u: Tid,x: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.3): LockState.vc failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, x: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[x], u);                                                     
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.LockState.VC_LockState;                                                     
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == LockState.vc[x];                                                                       
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 LockState.vc[x] := havocValue;                                                                     
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.LockState.vc(u: Tid,x: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.3): LockState.vc failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (2.3): Array Array.LockState.VC_LockState failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (2.3): Array Array.LockState.VC_LockState failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume w == Array.LockState.VC_LockState._elems[x][i];                                             
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := havocValue;                                           
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (2.3): Array Array.LockState.VC_LockState failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume w == Array.LockState.VC_LockState._elems[x][i];                                             
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (2.3): Array Array.LockState.VC_LockState failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (2.3): Array Array.LockState.VC_LockState failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[x], u);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
 assume w == Array.LockState.VC_LockState._elems[x][i];                                             
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.LockState.VC_LockState._elems[x][i] := havocValue;                                           
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (2.3): Array Array.LockState.VC_LockState failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (15.5): ThreadState.vc failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.ThreadState.vc(u: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (15.5): ThreadState.vc failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 ThreadState.vc[x] := havocValue;                                                                   
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (15.5): ThreadState.vc failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.ThreadState.vc(u: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (15.5): ThreadState.vc failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (15.5): ThreadState.vc failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, x: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[x], u);                                                   
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.ThreadState.VC_ThreadState;                                                 
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == ThreadState.vc[x];                                                                     
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 ThreadState.vc[x] := havocValue;                                                                   
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,x: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (15.5): ThreadState.vc failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := havocValue;                                       
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (13.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], u);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Array.ThreadState.VC_ThreadState._elems[x][i];                                         
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.ThreadState.VC_ThreadState._elems[x][i] := havocValue;                                       
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (13.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.LockState.vc.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: LockState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies LockState.vc;                                                                             
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.LockState.vc.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: LockState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies LockState.vc;                                                                             
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.LockState.vc.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: LockState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies LockState.vc;                                                                             
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.LockState.vc.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: LockState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies LockState.vc;                                                                             
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[y] := w;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.LockState.vc.LockState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: LockState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies LockState.vc;                                                                             
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.LockState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies LockState.vc;                                                                             
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.LockState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies LockState.vc;                                                                             
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.LockState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies LockState.vc;                                                                             
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.LockState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies LockState.vc;                                                                             
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.LockState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies LockState.vc;                                                                             
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.LockState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: LockState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies LockState.vc;                                                                             
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.LockState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: LockState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies LockState.vc;                                                                             
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.LockState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: LockState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies LockState.vc;                                                                             
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: Array.LockState.VC_LockState;                                                           
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.LockState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: LockState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies LockState.vc;                                                                             
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: Array.LockState.VC_LockState;                                                           
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.LockState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: LockState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies LockState.vc;                                                                             
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: Array.LockState.VC_LockState;                                                           
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.LockState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies LockState.vc;                                                                             
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.LockState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies LockState.vc;                                                                             
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.LockState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies LockState.vc;                                                                             
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.LockState.VC_LockState;                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: LockState;                                                                              
 var v_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := LockState.vc[x];                                                                           
 LockState.vc[x] := v;                                                                              
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 LockState.vc[x] := tmpV;                                                                           
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.LockState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies LockState.vc;                                                                             
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.LockState.vc(t: Tid,x: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.LockState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.LockState.VC_LockState, w: int, w0: int, x: LockState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(LockState._state[x], t);                                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies LockState.vc;                                                                             
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: Array.LockState.VC_LockState;                                                           
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var x_pre: LockState;                                                                              
 var LockState._lock_pre: [LockState]Tid;                                                           
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var v_post: Array.LockState.VC_LockState;                                                          
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var x_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.LockState.vc(t: Tid,x: LockState,v: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[x] := v;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.LockState.VC_LockState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.LockState.VC_LockState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.LockState.VC_LockState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.LockState.VC_LockState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[y] := w;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.LockState.VC_LockState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByU := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.LockState.VC_LockState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.LockState.VC_LockState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.LockState.VC_LockState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.LockState.VC_LockState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.LockState.VC_LockState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.LockState.VC_LockState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.LockState.VC_LockState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.LockState.VC_LockState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.LockState.VC_LockState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.LockState.VC_LockState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.LockState.VC_LockState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.LockState.VC_LockState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.LockState.VC_LockState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var x_mid: Array.LockState.VC_LockState;                                                           
 var x_owner_mid: LockState;                                                                        
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.LockState.VC_LockState._elems[x][i];                                                 
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.LockState.VC_LockState._elems[x][i] := tmpV;                                                 
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.LockState.VC_LockState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.LockState.VC_LockState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: LockState, x: Array.LockState.VC_LockState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[x], t);                                  
 requires Array.LockState.VC_LockState._this[x] == x_owner;                                         
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.LockState.VC_LockState._elems;                                                      
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var x_owner_pre: LockState;                                                                        
 var x_pre: Array.LockState.VC_LockState;                                                           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.LockState.VC_LockState;                                                          
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
 var x_owner_post: LockState;                                                                       
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.LockState.VC_LockState(t: Tid,x_owner: LockState,x: Array.LockState.VC_LockState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[x][i] := v;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.LockState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: ThreadState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(LockState._state[y], u);                                                     
 modifies ThreadState.vc;                                                                           
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.LockState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: ThreadState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(LockState._state[y], u);                                                     
 modifies ThreadState.vc;                                                                           
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.LockState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: ThreadState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(LockState._state[y], u);                                                     
 modifies ThreadState.vc;                                                                           
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.LockState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: ThreadState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(LockState._state[y], u);                                                     
 modifies ThreadState.vc;                                                                           
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[y] := w;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.LockState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x: ThreadState, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(LockState._state[y], u);                                                     
 modifies ThreadState.vc;                                                                           
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var y_pre: LockState;                                                                              
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies ThreadState.vc;                                                                           
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies ThreadState.vc;                                                                           
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies ThreadState.vc;                                                                           
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies ThreadState.vc;                                                                           
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies ThreadState.vc;                                                                           
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.ThreadState.vc(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x: ThreadState, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies ThreadState.vc;                                                                           
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : Array.ThreadState.VC_ThreadState;                                                       
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var x_mid: ThreadState;                                                                            
 var t_mid: Tid;                                                                                    
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := ThreadState.vc[x];                                                                         
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 ThreadState.vc[x] := tmpV;                                                                         
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.ThreadState.vc(t: Tid,x: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.ThreadState.vc.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: Array.ThreadState.VC_ThreadState, w: int, w0: int, x: ThreadState, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(ThreadState._state[x], t);                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies ThreadState.vc;                                                                           
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var x_pre: ThreadState;                                                                            
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var v_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var v_post: Array.ThreadState.VC_ThreadState;                                                      
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var x_post: ThreadState;                                                                           
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.ThreadState.vc(t: Tid,x: ThreadState,v: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[x] := v;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var w0_mid: Array.LockState.VC_LockState;                                                          
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var y_mid: LockState;                                                                              
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var w_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 LockState.vc[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var x_owner_pre: ThreadState;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.LockState.vc(u: Tid,y: LockState,w: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 LockState.vc[y] := w;                                                                              
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.LockState.vc(t: Tid, u: Tid, v: int, w: Array.LockState.VC_LockState, w0: Array.LockState.VC_LockState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: LockState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(LockState._state[y], u);                                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies LockState.vc;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var x_owner_pre: ThreadState;                                                                      
 var y_pre: LockState;                                                                              
 var v_pre: int;                                                                                    
 var w0_pre: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var w_pre: Array.LockState.VC_LockState;                                                           
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var w0_post: Array.LockState.VC_LockState;                                                         
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var w_post: Array.LockState.VC_LockState;                                                          
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var y_post: LockState;                                                                             
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.LockState.vc(u: Tid,y: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var y_owner_mid: LockState;                                                                        
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var y_mid: Array.LockState.VC_LockState;                                                           
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.LockState.VC_LockState._elems[y][j] := w;                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.Array.LockState.VC_LockState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: LockState, y: Array.LockState.VC_LockState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.LockState.VC_LockState._state[y], u);                                  
 requires Array.LockState.VC_LockState._this[y] == y_owner;                                         
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.LockState.VC_LockState._elems;                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_owner_pre: LockState;                                                                        
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: Array.LockState.VC_LockState;                                                           
                                                                                                    
 var y_owner_post: LockState;                                                                       
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var y_post: Array.LockState.VC_LockState;                                                          
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.LockState.VC_LockState(u: Tid,y_owner: LockState,y: Array.LockState.VC_LockState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var w_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var y_mid: ThreadState;                                                                            
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var LockState._lock_mid: [LockState]Tid;                                                           
 var w0_mid: Array.ThreadState.VC_ThreadState;                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 ThreadState.vc[y] := w;                                                                            
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.ThreadState.vc(u: Tid,y: ThreadState,w: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 ThreadState.vc[y] := w;                                                                            
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.ThreadState.vc(t: Tid, u: Tid, v: int, w: Array.ThreadState.VC_ThreadState, w0: Array.ThreadState.VC_ThreadState, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y: ThreadState)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(ThreadState._state[y], u);                                                   
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies ThreadState.vc;                                                                           
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.ThreadState.VC_ThreadState;                                                      
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var w_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_pre: ThreadState;                                                                            
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var w0_post: Array.ThreadState.VC_ThreadState;                                                     
 var LockState._state_post: [LockState]State;                                                       
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var y_post: ThreadState;                                                                           
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.ThreadState.vc(u: Tid,y: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
                                                                                                    
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var t_mid: Tid;                                                                                    
 var x_owner_mid: ThreadState;                                                                      
 var y_owner_mid: ThreadState;                                                                      
 var u_mid: Tid;                                                                                    
 var ThreadState._lock_mid: [ThreadState]Tid;                                                       
 var i_mid: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_mid: [Array.ThreadState.VC_ThreadState]int;           
 var Array.ThreadState.VC_ThreadState._state_mid: [Array.ThreadState.VC_ThreadState]State;          
 var $recorded.state_mid: int;                                                                      
 var LockState.vc_mid: [LockState]Array.LockState.VC_LockState;                                     
 var ThreadState._state_mid: [ThreadState]State;                                                    
 var Array.LockState.VC_LockState._state_mid: [Array.LockState.VC_LockState]State;                  
 var w_mid: int;                                                                                    
 var y_mid: Array.ThreadState.VC_ThreadState;                                                       
 var ThreadState.vc_mid: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var LockState._state_mid: [LockState]State;                                                        
 var Array.ThreadState.VC_ThreadState._elems_mid: [Array.ThreadState.VC_ThreadState]([int]int);     
 var v_mid: int;                                                                                    
 var Array.LockState.VC_LockState._length_mid: [Array.LockState.VC_LockState]int;                   
 var j_mid: int;                                                                                    
 var x_mid: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._elems_mid: [Array.LockState.VC_LockState]([int]int);             
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var LockState._lock_mid: [LockState]Tid;                                                           
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.ThreadState.VC_ThreadState._elems[x][i];                                             
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_mid == LockState._state && LockState.vc_mid == LockState.vc && LockState._lock_mid == LockState._lock && Array.LockState.VC_LockState._state_mid == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_mid == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_mid == Array.LockState.VC_LockState._length && ThreadState._state_mid == ThreadState._state && ThreadState.vc_mid == ThreadState.vc && ThreadState._lock_mid == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_mid == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_mid == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_mid == Array.ThreadState.VC_ThreadState._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.ThreadState.VC_ThreadState._elems[x][i] := tmpV;                                             
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 _writeByTPost := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,w: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[y][j] := w;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.ThreadState.VC_ThreadState._elems.Array.ThreadState.VC_ThreadState._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: ThreadState, x: Array.ThreadState.VC_ThreadState, i: int, y_owner: ThreadState, y: Array.ThreadState.VC_ThreadState, j: int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[x], t);                              
 requires Array.ThreadState.VC_ThreadState._this[x] == x_owner;                                     
 requires isAccessible(Array.ThreadState.VC_ThreadState._state[y], u);                              
 requires Array.ThreadState.VC_ThreadState._this[y] == y_owner;                                     
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
 modifies Array.ThreadState.VC_ThreadState._elems;                                                  
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var x_owner_pre: ThreadState;                                                                      
 var v_pre: int;                                                                                    
 var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;           
 var y_pre: Array.ThreadState.VC_ThreadState;                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                  
 var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;          
 var LockState._lock_pre: [LockState]Tid;                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                             
 var x_pre: Array.ThreadState.VC_ThreadState;                                                       
 var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                   
 var LockState._state_pre: [LockState]State;                                                        
 var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                     
 var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);             
 var $pc_pre: Phase;                                                                                
 var ThreadState._state_pre: [ThreadState]State;                                                    
 var ThreadState._lock_pre: [ThreadState]Tid;                                                       
 var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);     
 var t_pre: Tid;                                                                                    
 var y_owner_pre: ThreadState;                                                                      
                                                                                                    
 var $recorded.state_post: int;                                                                     
 var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                            
 var w0_post: int;                                                                                  
 var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                    
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                  
 var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);    
 var y_post: Array.ThreadState.VC_ThreadState;                                                      
 var ThreadState._lock_post: [ThreadState]Tid;                                                      
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var x_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;         
 var y_owner_post: ThreadState;                                                                     
 var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;          
 var LockState._state_post: [LockState]State;                                                       
 var w_post: int;                                                                                   
 var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);            
 var v_post: int;                                                                                   
 var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                 
 var ThreadState._state_post: [ThreadState]State;                                                   
 var x_post: Array.ThreadState.VC_ThreadState;                                                      
 var LockState._lock_post: [LockState]Tid;                                                          
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.ThreadState.VC_ThreadState(t: Tid,x_owner: ThreadState,x: Array.ThreadState.VC_ThreadState,i: int,v: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.ThreadState.VC_ThreadState._elems[x][i] := v;                                                
 assume LockState._state_post == LockState._state && LockState.vc_post == LockState.vc && LockState._lock_post == LockState._lock && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length && ThreadState._state_post == ThreadState._state && ThreadState.vc_post == ThreadState.vc && ThreadState._lock_post == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.ThreadState.VC_ThreadState(u: Tid,y_owner: ThreadState,y: Array.ThreadState.VC_ThreadState,j: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
requires ValidTid(tid);                                                                             
modifies LockState._state;                                                                          
modifies LockState.vc;                                                                              
modifies LockState._lock;                                                                           
modifies Array.LockState.VC_LockState._state;                                                       
modifies Array.LockState.VC_LockState._elems;                                                       
modifies ThreadState._state;                                                                        
modifies ThreadState.vc;                                                                            
modifies ThreadState._lock;                                                                         
modifies Array.ThreadState.VC_ThreadState._state;                                                   
modifies Array.ThreadState.VC_ThreadState._elems;                                                   
ensures StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
ensures Y(tid , old(LockState._state), old(LockState.vc), old(LockState._lock), old(Array.LockState.VC_LockState._state), old(Array.LockState.VC_LockState._elems), old(Array.LockState.VC_LockState._length), old(ThreadState._state), old(ThreadState.vc), old(ThreadState._lock), old(Array.ThreadState.VC_ThreadState._state), old(Array.ThreadState.VC_ThreadState._elems), old(Array.ThreadState.VC_ThreadState._length) , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
                                                                                                    
// LockState.vc:                                                                                    
                                                                                                    
function {:inline} Y_LockState.vc(tid : Tid, this: LockState, newValue: Array.LockState.VC_LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(LockState._state[this], tid) && leq(m#moverPath(ReadEval.LockState.vc(tid: Tid,this: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (LockState.vc[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_LockState.vc(tid : Tid, this: LockState, newValue: Array.LockState.VC_LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_LockState.vc.Subsumes.W(tid : Tid, u : Tid, this: LockState, newValue: Array.LockState.VC_LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var u_yield: Tid;                                                                                   
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var newValue_yield: Array.LockState.VC_LockState;                                                   
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
 assume isAccessible(LockState._state[this], u);                                                    
 assume !isError(m#moverPath(WriteEval.LockState.vc(u: Tid,this: LockState,newValue: Array.LockState.VC_LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_LockState.vc(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_LockState.vc.Reflexive(tid : Tid, this: LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_LockState.vc(tid, this, LockState.vc[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_LockState.vc.Transitive(tid : Tid, this: LockState, newValue : Array.LockState.VC_LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var newValue_pre: Array.LockState.VC_LockState;                                                     
var LockState._lock_pre: [LockState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
var this_pre: LockState;                                                                            
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var newValue_post: Array.LockState.VC_LockState;                                                    
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var ThreadState._state_post: [ThreadState]State;                                                    
var this_post: LockState;                                                                           
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_LockState.vc(tid, this, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_LockState.vc(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// LockState._lock:                                                                                 
                                                                                                    
function {:inline} Y_LockState._lock(tid : Tid, this: LockState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(LockState._state[this], tid) && leq(m#moverPath(ReadEval.LockState._lock(tid: Tid,this: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (LockState._lock[this] == newValue))
 &&(((LockState._lock[this]==tid)==(newValue==tid)))                                                
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_LockState._lock(tid : Tid, this: LockState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_LockState._lock.Subsumes.W(tid : Tid, u : Tid, this: LockState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var newValue_yield: Tid;                                                                            
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var u_yield: Tid;                                                                                   
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
 assume isAccessible(LockState._state[this], u);                                                    
 assume !isError(m#moverPath(WriteEval.LockState._lock(u: Tid,this: LockState,newValue: Tid,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
 assume leq(m#moverPath(ReadEval.LockState._lock(tid: Tid,this: LockState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _N);
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_LockState._lock(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_LockState._lock.Reflexive(tid : Tid, this: LockState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_LockState._lock(tid, this, LockState._lock[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_LockState._lock.Transitive(tid : Tid, this: LockState, newValue : Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var LockState._lock_pre: [LockState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var newValue_pre: Tid;                                                                              
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
var this_pre: LockState;                                                                            
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var newValue_post: Tid;                                                                             
var ThreadState._state_post: [ThreadState]State;                                                    
var this_post: LockState;                                                                           
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(LockState._state[this], tid);                                                  
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_LockState._lock(tid, this, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_LockState._lock(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// Array.LockState.VC_LockState:                                                                    
                                                                                                    
function {:inline} Y_Array.LockState.VC_LockState(tid : Tid, athis: Array.LockState.VC_LockState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.LockState.VC_LockState._this[athis];                                             
 ((isAccessible(Array.LockState.VC_LockState._state[athis], tid) && leq(m#moverPath(ReadEval.Array.LockState.VC_LockState(tid: Tid,Array.LockState.VC_LockState._this[athis]: LockState,athis: Array.LockState.VC_LockState,index: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (Array.LockState.VC_LockState._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.LockState.VC_LockState(tid : Tid, athis: Array.LockState.VC_LockState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.LockState.VC_LockState._this[athis];                                             
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.LockState.VC_LockState.Subsumes.W(tid : Tid, u : Tid, this: LockState, athis: Array.LockState.VC_LockState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.LockState.VC_LockState._this[athis];                                        
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var athis_yield: Array.LockState.VC_LockState;                                                      
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var index_yield: int;                                                                               
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.LockState.VC_LockState._state[athis], u);                                
 assume !isError(m#moverPath(WriteEval.Array.LockState.VC_LockState(u: Tid,Array.LockState.VC_LockState._this[athis]: LockState,athis: Array.LockState.VC_LockState,index: int,newValue: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.LockState.VC_LockState(tid, athis, index, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.LockState.VC_LockState.Reflexive(tid : Tid, this: LockState, athis: Array.LockState.VC_LockState, index: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.LockState.VC_LockState._this[athis];                                        
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var this_yield: LockState;                                                                          
var athis_yield: Array.LockState.VC_LockState;                                                      
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var index_yield: int;                                                                               
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.LockState.VC_LockState._state[athis], tid);                              
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.LockState.VC_LockState(tid, athis, index, Array.LockState.VC_LockState._elems[athis][index] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.LockState.VC_LockState.Transitive(tid : Tid, this: LockState, athis: Array.LockState.VC_LockState, index: int, newValue : int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
                                                                                                    
 requires this == Array.LockState.VC_LockState._this[athis];                                        
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var LockState._lock_pre: [LockState]Tid;                                                            
var index_pre: int;                                                                                 
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var athis_pre: Array.LockState.VC_LockState;                                                        
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
var this_pre: LockState;                                                                            
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var athis_post: Array.LockState.VC_LockState;                                                       
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var index_post: int;                                                                                
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var ThreadState._state_post: [ThreadState]State;                                                    
var this_post: LockState;                                                                           
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.LockState.VC_LockState._state[athis], tid);                              
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_Array.LockState.VC_LockState(tid, athis, index, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assert Y_Array.LockState.VC_LockState(tid, athis, index, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// ThreadState.vc:                                                                                  
                                                                                                    
function {:inline} Y_ThreadState.vc(tid : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState.vc(tid: Tid,this: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState.vc[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState.vc(tid : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: Array.ThreadState.VC_ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var newValue_yield: Array.ThreadState.VC_ThreadState;                                               
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState.vc(u: Tid,this: ThreadState,newValue: Array.ThreadState.VC_ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.vc(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Reflexive(tid : Tid, this: ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState.vc(tid, this, ThreadState.vc[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState.vc.Transitive(tid : Tid, this: ThreadState, newValue : Array.ThreadState.VC_ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var LockState._lock_pre: [LockState]Tid;                                                            
var newValue_pre: Array.ThreadState.VC_ThreadState;                                                 
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var newValue_post: Array.ThreadState.VC_ThreadState;                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var this_post: ThreadState;                                                                         
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var ThreadState._state_post: [ThreadState]State;                                                    
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState.vc(tid, this, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState.vc(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// ThreadState._lock:                                                                               
                                                                                                    
function {:inline} Y_ThreadState._lock(tid : Tid, this: ThreadState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 ((isAccessible(ThreadState._state[this], tid) && leq(m#moverPath(ReadEval.ThreadState._lock(tid: Tid,this: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (ThreadState._lock[this] == newValue))
 &&(((ThreadState._lock[this]==tid)==(newValue==tid)))                                              
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_ThreadState._lock(tid : Tid, this: ThreadState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, newValue: Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var newValue_yield: Tid;                                                                            
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var u_yield: Tid;                                                                                   
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume isAccessible(ThreadState._state[this], u);                                                  
 assume !isError(m#moverPath(WriteEval.ThreadState._lock(u: Tid,this: ThreadState,newValue: Tid,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
 assume leq(m#moverPath(ReadEval.ThreadState._lock(tid: Tid,this: ThreadState,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _N);
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState._lock(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Reflexive(tid : Tid, this: ThreadState , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_ThreadState._lock(tid, this, ThreadState._lock[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_ThreadState._lock.Transitive(tid : Tid, this: ThreadState, newValue : Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var LockState._lock_pre: [LockState]Tid;                                                            
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var newValue_pre: Tid;                                                                              
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var this_post: ThreadState;                                                                         
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var newValue_post: Tid;                                                                             
var ThreadState._state_post: [ThreadState]State;                                                    
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(ThreadState._state[this], tid);                                                
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_ThreadState._lock(tid, this, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_ThreadState._lock(tid, this, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
// Array.ThreadState.VC_ThreadState:                                                                
                                                                                                    
function {:inline} Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.ThreadState.VC_ThreadState._this[athis];                                         
 ((isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid) && leq(m#moverPath(ReadEval.Array.ThreadState.VC_ThreadState(tid: Tid,Array.ThreadState.VC_ThreadState._this[athis]: ThreadState,athis: Array.ThreadState.VC_ThreadState,index: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)), _R)) ==> (Array.ThreadState.VC_ThreadState._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
(var this := Array.ThreadState.VC_ThreadState._this[athis];                                         
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Subsumes.W(tid : Tid, u : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int, newValue: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var athis_yield: Array.ThreadState.VC_ThreadState;                                                  
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var index_yield: int;                                                                               
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], u);                            
 assume !isError(m#moverPath(WriteEval.Array.ThreadState.VC_ThreadState(u: Tid,Array.ThreadState.VC_ThreadState._this[athis]: ThreadState,athis: Array.ThreadState.VC_ThreadState,index: int,newValue: int,LockState._state,LockState.vc,LockState._lock,Array.LockState.VC_LockState._state,Array.LockState.VC_LockState._elems,Array.LockState.VC_LockState._length,ThreadState._state,ThreadState.vc,ThreadState._lock,Array.ThreadState.VC_ThreadState._state,Array.ThreadState.VC_ThreadState._elems,Array.ThreadState.VC_ThreadState._length)));
                                                                                                    
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Reflexive(tid : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
{                                                                                                   
var Array.ThreadState.VC_ThreadState._length_yield: [Array.ThreadState.VC_ThreadState]int;          
var Array.LockState.VC_LockState._elems_yield: [Array.LockState.VC_LockState]([int]int);            
var LockState.vc_yield: [LockState]Array.LockState.VC_LockState;                                    
var tid_yield: Tid;                                                                                 
var ThreadState._state_yield: [ThreadState]State;                                                   
var Array.LockState.VC_LockState._length_yield: [Array.LockState.VC_LockState]int;                  
var $pc_yield: Phase;                                                                               
var ThreadState._lock_yield: [ThreadState]Tid;                                                      
var LockState._lock_yield: [LockState]Tid;                                                          
var Array.ThreadState.VC_ThreadState._state_yield: [Array.ThreadState.VC_ThreadState]State;         
var athis_yield: Array.ThreadState.VC_ThreadState;                                                  
var this_yield: ThreadState;                                                                        
var Array.LockState.VC_LockState._state_yield: [Array.LockState.VC_LockState]State;                 
var index_yield: int;                                                                               
var LockState._state_yield: [LockState]State;                                                       
var Array.ThreadState.VC_ThreadState._elems_yield: [Array.ThreadState.VC_ThreadState]([int]int);    
var $recorded.state_yield: int;                                                                     
var ThreadState.vc_yield: [ThreadState]Array.ThreadState.VC_ThreadState;                            
                                                                                                    
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid);                          
assume LockState._state_yield == LockState._state && LockState.vc_yield == LockState.vc && LockState._lock_yield == LockState._lock && Array.LockState.VC_LockState._state_yield == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_yield == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_yield == Array.LockState.VC_LockState._length && ThreadState._state_yield == ThreadState._state && ThreadState.vc_yield == ThreadState.vc && ThreadState._lock_yield == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_yield == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_yield == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_yield == Array.ThreadState.VC_ThreadState._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, Array.ThreadState.VC_ThreadState._elems[athis][index] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.ThreadState.VC_ThreadState.Transitive(tid : Tid, this: ThreadState, athis: Array.ThreadState.VC_ThreadState, index: int, newValue : int , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int)
 requires StateInvariant(LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
 requires StateInvariant(LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
                                                                                                    
 requires this == Array.ThreadState.VC_ThreadState._this[athis];                                    
 requires ValidTid(tid);                                                                            
{                                                                                                   
var this_pre: ThreadState;                                                                          
var Array.ThreadState.VC_ThreadState._length_pre: [Array.ThreadState.VC_ThreadState]int;            
var $recorded.state_pre: int;                                                                       
var Array.LockState.VC_LockState._state_pre: [Array.LockState.VC_LockState]State;                   
var Array.ThreadState.VC_ThreadState._state_pre: [Array.ThreadState.VC_ThreadState]State;           
var LockState._lock_pre: [LockState]Tid;                                                            
var index_pre: int;                                                                                 
var tid_pre: Tid;                                                                                   
var ThreadState.vc_pre: [ThreadState]Array.ThreadState.VC_ThreadState;                              
var Array.LockState.VC_LockState._length_pre: [Array.LockState.VC_LockState]int;                    
var LockState._state_pre: [LockState]State;                                                         
var LockState.vc_pre: [LockState]Array.LockState.VC_LockState;                                      
var Array.LockState.VC_LockState._elems_pre: [Array.LockState.VC_LockState]([int]int);              
var $pc_pre: Phase;                                                                                 
var ThreadState._state_pre: [ThreadState]State;                                                     
var ThreadState._lock_pre: [ThreadState]Tid;                                                        
var athis_pre: Array.ThreadState.VC_ThreadState;                                                    
var Array.ThreadState.VC_ThreadState._elems_pre: [Array.ThreadState.VC_ThreadState]([int]int);      
                                                                                                    
var $recorded.state_post: int;                                                                      
var ThreadState.vc_post: [ThreadState]Array.ThreadState.VC_ThreadState;                             
var LockState.vc_post: [LockState]Array.LockState.VC_LockState;                                     
var Array.LockState.VC_LockState._length_post: [Array.LockState.VC_LockState]int;                   
var Array.ThreadState.VC_ThreadState._elems_post: [Array.ThreadState.VC_ThreadState]([int]int);     
var ThreadState._lock_post: [ThreadState]Tid;                                                       
var $pc_post: Phase;                                                                                
var Array.ThreadState.VC_ThreadState._state_post: [Array.ThreadState.VC_ThreadState]State;          
var tid_post: Tid;                                                                                  
var Array.ThreadState.VC_ThreadState._length_post: [Array.ThreadState.VC_ThreadState]int;           
var LockState._state_post: [LockState]State;                                                        
var Array.LockState.VC_LockState._elems_post: [Array.LockState.VC_LockState]([int]int);             
var this_post: ThreadState;                                                                         
var index_post: int;                                                                                
var Array.LockState.VC_LockState._state_post: [Array.LockState.VC_LockState]State;                  
var ThreadState._state_post: [ThreadState]State;                                                    
var athis_post: Array.ThreadState.VC_ThreadState;                                                   
var LockState._lock_post: [LockState]Tid;                                                           
                                                                                                    
assume LockState._state_pre == LockState._state && LockState.vc_pre == LockState.vc && LockState._lock_pre == LockState._lock && Array.LockState.VC_LockState._state_pre == Array.LockState.VC_LockState._state && Array.LockState.VC_LockState._elems_pre == Array.LockState.VC_LockState._elems && Array.LockState.VC_LockState._length_pre == Array.LockState.VC_LockState._length && ThreadState._state_pre == ThreadState._state && ThreadState.vc_pre == ThreadState.vc && ThreadState._lock_pre == ThreadState._lock && Array.ThreadState.VC_ThreadState._state_pre == Array.ThreadState.VC_ThreadState._state && Array.ThreadState.VC_ThreadState._elems_pre == Array.ThreadState.VC_ThreadState._elems && Array.ThreadState.VC_ThreadState._length_pre == Array.ThreadState.VC_ThreadState._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume LockState._state_post == LockState._state_p && LockState.vc_post == LockState.vc_p && LockState._lock_post == LockState._lock_p && Array.LockState.VC_LockState._state_post == Array.LockState.VC_LockState._state_p && Array.LockState.VC_LockState._elems_post == Array.LockState.VC_LockState._elems_p && Array.LockState.VC_LockState._length_post == Array.LockState.VC_LockState._length_p && ThreadState._state_post == ThreadState._state_p && ThreadState.vc_post == ThreadState.vc_p && ThreadState._lock_post == ThreadState._lock_p && Array.ThreadState.VC_ThreadState._state_post == Array.ThreadState.VC_ThreadState._state_p && Array.ThreadState.VC_ThreadState._elems_post == Array.ThreadState.VC_ThreadState._elems_p && Array.ThreadState.VC_ThreadState._length_post == Array.ThreadState.VC_ThreadState._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.ThreadState.VC_ThreadState._state[athis], tid);                          
 assume Y(tid , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assume Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , LockState._state_p, LockState.vc_p, LockState._lock_p, Array.LockState.VC_LockState._state_p, Array.LockState.VC_LockState._elems_p, Array.LockState.VC_LockState._length_p, ThreadState._state_p, ThreadState.vc_p, ThreadState._lock_p, Array.ThreadState.VC_ThreadState._state_p, Array.ThreadState.VC_ThreadState._elems_p, Array.ThreadState.VC_ThreadState._length_p);
 assert Y_Array.ThreadState.VC_ThreadState(tid, athis, index, newValue , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , LockState._state: [LockState]State, LockState.vc: [LockState]Array.LockState.VC_LockState, LockState._lock: [LockState]Tid, Array.LockState.VC_LockState._state: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length: [Array.LockState.VC_LockState]int, ThreadState._state: [ThreadState]State, ThreadState.vc: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length: [Array.ThreadState.VC_ThreadState]int , LockState._state_p: [LockState]State, LockState.vc_p: [LockState]Array.LockState.VC_LockState, LockState._lock_p: [LockState]Tid, Array.LockState.VC_LockState._state_p: [Array.LockState.VC_LockState]State, Array.LockState.VC_LockState._elems_p: [Array.LockState.VC_LockState]([int]int), Array.LockState.VC_LockState._length_p: [Array.LockState.VC_LockState]int, ThreadState._state_p: [ThreadState]State, ThreadState.vc_p: [ThreadState]Array.ThreadState.VC_ThreadState, ThreadState._lock_p: [ThreadState]Tid, Array.ThreadState.VC_ThreadState._state_p: [Array.ThreadState.VC_ThreadState]State, Array.ThreadState.VC_ThreadState._elems_p: [Array.ThreadState.VC_ThreadState]([int]int), Array.ThreadState.VC_ThreadState._length_p: [Array.ThreadState.VC_ThreadState]int): bool
{                                                                                                   
 (forall this: LockState :: Y_LockState.vc(tid : Tid, this, LockState.vc_p[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: LockState :: Y_LockState._lock(tid : Tid, this, LockState._lock_p[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: ThreadState :: Y_ThreadState.vc(tid : Tid, this, ThreadState.vc_p[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall this: ThreadState :: Y_ThreadState._lock(tid : Tid, this, ThreadState._lock_p[this] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall athis: Array.LockState.VC_LockState, index: int :: Y_Array.LockState.VC_LockState(tid : Tid, athis, index, Array.LockState.VC_LockState._elems_p[athis][index] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall athis: Array.ThreadState.VC_ThreadState, index: int :: Y_Array.ThreadState.VC_ThreadState(tid : Tid, athis, index, Array.ThreadState.VC_ThreadState._elems_p[athis][index] , LockState._state, LockState.vc, LockState._lock, Array.LockState.VC_LockState._state, Array.LockState.VC_LockState._elems, Array.LockState.VC_LockState._length, ThreadState._state, ThreadState.vc, ThreadState._lock, Array.ThreadState.VC_ThreadState._state, Array.ThreadState.VC_ThreadState._elems, Array.ThreadState.VC_ThreadState._length))
 && (forall _i : LockState :: isShared(LockState._state[_i]) ==> isShared(LockState._state_p[_i]))  
 && (forall _i : LockState :: isLocal(LockState._state[_i], tid) <==> isLocal(LockState._state_p[_i], tid))
 && (forall _i : ThreadState :: isShared(ThreadState._state[_i]) ==> isShared(ThreadState._state_p[_i]))
 && (forall _i : ThreadState :: isLocal(ThreadState._state[_i], tid) <==> isLocal(ThreadState._state_p[_i], tid))
 && (forall _i : Array.LockState.VC_LockState :: isShared(Array.LockState.VC_LockState._state[_i]) ==> isShared(Array.LockState.VC_LockState._state_p[_i]))
 && (forall _i : Array.LockState.VC_LockState :: Array.LockState.VC_LockState._length[_i] == Array.LockState.VC_LockState._length_p[_i])
 && (forall _i : Array.LockState.VC_LockState :: isLocal(Array.LockState.VC_LockState._state[_i], tid) <==> isLocal(Array.LockState.VC_LockState._state_p[_i], tid))
 && (forall _i : Array.ThreadState.VC_ThreadState :: isShared(Array.ThreadState.VC_ThreadState._state[_i]) ==> isShared(Array.ThreadState.VC_ThreadState._state_p[_i]))
 && (forall _i : Array.ThreadState.VC_ThreadState :: Array.ThreadState.VC_ThreadState._length[_i] == Array.ThreadState.VC_ThreadState._length_p[_i])
 && (forall _i : Array.ThreadState.VC_ThreadState :: isLocal(Array.ThreadState.VC_ThreadState._state[_i], tid) <==> isLocal(Array.ThreadState.VC_ThreadState._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 800.1-909.2: (Method:21.5)
// 814.1-814.24: (21.5): Bad tid
// 815.1-815.45: (21.5): this is not global
// 866.1-866.14: (21.14): Can only have right-mover memory accesses in requires clause
// 870.2-872.2: (class anchor.sink.VarDeclStmt:23.9)
// 873.2-876.19: (class anchor.sink.Assign:23.9)
// 877.2-879.2: (class anchor.sink.VarDeclStmt:18.7)
// 880.2-897.38: (class anchor.sink.Read:18.7)
// 892.1-892.39: (18.7): Cannot have potential null deference in left-mover part.
// 896.1-896.27: (18.7): Reduction failure
// 898.2-901.23: (class anchor.sink.Break:17.16)
// 903.2-908.9: (class anchor.sink.Return:22.23)
// 1053.1-1053.34: (4.3): LockState.vc failed Write-Write Right-Mover Check
// 1128.1-1128.30: (4.3): LockState.vc failed Write-Read Right-Mover Check
// 1207.1-1207.34: (4.3): LockState.vc failed Write-Write Left-Mover Check
// 1283.1-1283.30: (4.3): LockState.vc failed Write-Read Left-Mover Check
// 1356.1-1356.34: (4.3): LockState.vc failed Read-Write Right-Mover Check
// 1432.1-1432.34: (4.3): LockState.vc failed Read-Write Left-Mover Check
// 1513.1-1513.34: (2.3): Array Array.LockState.VC_LockState failed Write-Write Right-Mover Check
// 1594.1-1594.30: (2.3): Array Array.LockState.VC_LockState failed Write-Read Right-Mover Check
// 1679.1-1679.34: (2.3): Array Array.LockState.VC_LockState failed Write-Write Left-Mover Check
// 1761.1-1761.30: (2.3): Array Array.LockState.VC_LockState failed Write-Read Left-Mover Check
// 1840.1-1840.34: (2.3): Array Array.LockState.VC_LockState failed Read-Write Right-Mover Check
// 1922.1-1922.34: (2.3): Array Array.LockState.VC_LockState failed Read-Write Left-Mover Check
// 1997.1-1997.34: (15.5): ThreadState.vc failed Write-Write Right-Mover Check
// 2072.1-2072.30: (15.5): ThreadState.vc failed Write-Read Right-Mover Check
// 2151.1-2151.34: (15.5): ThreadState.vc failed Write-Write Left-Mover Check
// 2227.1-2227.30: (15.5): ThreadState.vc failed Write-Read Left-Mover Check
// 2300.1-2300.34: (15.5): ThreadState.vc failed Read-Write Right-Mover Check
// 2376.1-2376.34: (15.5): ThreadState.vc failed Read-Write Left-Mover Check
// 2457.1-2457.34: (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Right-Mover Check
// 2538.1-2538.30: (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Right-Mover Check
// 2623.1-2623.34: (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Write Left-Mover Check
// 2705.1-2705.30: (13.5): Array Array.ThreadState.VC_ThreadState failed Write-Read Left-Mover Check
// 2784.1-2784.34: (13.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Right-Mover Check
// 2866.1-2866.34: (13.5): Array Array.ThreadState.VC_ThreadState failed Read-Write Left-Mover Check
// 2953.1-2953.140: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.1)
// 2954.1-2954.101: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.2)
// 2955.1-2955.158: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case A.3)
// 3075.1-3075.140: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case C)
// 3200.1-3200.144: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case D)
// 3201.1-3201.144: (4.3): LockState.vc is not Write-Write Stable with respect to LockState.vc (case R)
// 3288.1-3288.136: (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case F)
// 3289.1-3289.136: (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case H)
// 3290.1-3290.146: (4.3): LockState.vc is not Read-Write Stable with respect to LockState.vc (case I)
// 3376.1-3376.136: (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case J)
// 3377.1-3377.136: (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case K)
// 3378.1-3378.99: (4.3): LockState.vc is not Write-Read Stable with respect to LockState.vc (case L)
// 3471.1-3471.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.1)
// 3472.1-3472.101: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.2)
// 3473.1-3473.156: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case A.3)
// 3600.1-3600.140: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
// 3732.1-3732.144: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
// 3733.1-3733.144: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
// 3825.1-3825.136: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
// 3826.1-3826.136: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
// 3827.1-3827.144: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
// 3918.1-3918.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case J)
// 3919.1-3919.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case K)
// 3920.1-3920.99: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to LockState.vc (case L)
// 4008.1-4008.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.1)
// 4009.1-4009.101: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.2)
// 4010.1-4010.156: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case A.3)
// 4130.1-4130.140: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
// 4255.1-4255.144: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
// 4256.1-4256.144: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
// 4343.1-4343.136: (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
// 4344.1-4344.136: (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
// 4345.1-4345.144: (4.3): LockState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
// 4431.1-4431.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case J)
// 4432.1-4432.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case K)
// 4433.1-4433.99: (15.5): ThreadState.vc is not Write-Read Stable with respect to LockState.vc (case L)
// 4526.1-4526.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.1)
// 4527.1-4527.101: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.2)
// 4528.1-4528.156: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case A.3)
// 4655.1-4655.140: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 4787.1-4787.144: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 4788.1-4788.144: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 4880.1-4880.136: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 4881.1-4881.136: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 4882.1-4882.144: (4.3): LockState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 4973.1-4973.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case J)
// 4974.1-4974.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case K)
// 4975.1-4975.99: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to LockState.vc (case L)
// 5068.1-5068.140: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
// 5069.1-5069.101: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
// 5070.1-5070.156: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
// 5197.1-5197.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case C)
// 5329.1-5329.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case D)
// 5330.1-5330.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to LockState.vc (case R)
// 5422.1-5422.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case F)
// 5423.1-5423.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case H)
// 5424.1-5424.144: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to LockState.vc (case I)
// 5515.1-5515.136: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
// 5516.1-5516.136: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
// 5517.1-5517.99: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
// 5615.1-5615.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
// 5616.1-5616.101: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
// 5617.1-5617.156: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
// 5751.1-5751.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
// 5890.1-5890.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
// 5891.1-5891.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
// 5988.1-5988.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
// 5989.1-5989.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
// 5990.1-5990.144: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
// 6086.1-6086.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
// 6087.1-6087.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
// 6088.1-6088.99: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
// 6181.1-6181.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
// 6182.1-6182.101: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
// 6183.1-6183.156: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
// 6310.1-6310.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case C)
// 6442.1-6442.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case D)
// 6443.1-6443.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case R)
// 6535.1-6535.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case F)
// 6536.1-6536.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case H)
// 6537.1-6537.144: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to ThreadState.vc (case I)
// 6628.1-6628.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
// 6629.1-6629.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
// 6630.1-6630.99: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
// 6728.1-6728.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.1)
// 6729.1-6729.101: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.2)
// 6730.1-6730.156: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case A.3)
// 6864.1-6864.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 7003.1-7003.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 7004.1-7004.144: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 7101.1-7101.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 7102.1-7102.136: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 7103.1-7103.144: (2.3): Array Array.LockState.VC_LockState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 7199.1-7199.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case J)
// 7200.1-7200.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case K)
// 7201.1-7201.99: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.LockState.VC_LockState (case L)
// 7289.1-7289.140: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 7290.1-7290.101: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 7291.1-7291.156: (4.3): LockState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 7411.1-7411.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case C)
// 7536.1-7536.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case D)
// 7537.1-7537.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to LockState.vc (case R)
// 7624.1-7624.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case F)
// 7625.1-7625.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case H)
// 7626.1-7626.144: (15.5): ThreadState.vc is not Read-Write Stable with respect to LockState.vc (case I)
// 7712.1-7712.136: (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
// 7713.1-7713.136: (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
// 7714.1-7714.99: (4.3): LockState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
// 7807.1-7807.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 7808.1-7808.101: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 7809.1-7809.156: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 7936.1-7936.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
// 8068.1-8068.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
// 8069.1-8069.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
// 8161.1-8161.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
// 8162.1-8162.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
// 8163.1-8163.144: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
// 8254.1-8254.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case J)
// 8255.1-8255.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case K)
// 8256.1-8256.99: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to ThreadState.vc (case L)
// 8344.1-8344.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 8345.1-8345.101: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 8346.1-8346.158: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 8466.1-8466.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case C)
// 8591.1-8591.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case D)
// 8592.1-8592.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to ThreadState.vc (case R)
// 8679.1-8679.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case F)
// 8680.1-8680.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case H)
// 8681.1-8681.146: (15.5): ThreadState.vc is not Read-Write Stable with respect to ThreadState.vc (case I)
// 8767.1-8767.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case J)
// 8768.1-8768.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case K)
// 8769.1-8769.99: (15.5): ThreadState.vc is not Write-Read Stable with respect to ThreadState.vc (case L)
// 8862.1-8862.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.1)
// 8863.1-8863.101: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.2)
// 8864.1-8864.156: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case A.3)
// 8991.1-8991.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 9123.1-9123.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 9124.1-9124.144: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 9216.1-9216.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 9217.1-9217.136: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 9218.1-9218.144: (15.5): ThreadState.vc is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 9309.1-9309.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case J)
// 9310.1-9310.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case K)
// 9311.1-9311.99: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to ThreadState.vc (case L)
// 9404.1-9404.140: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 9405.1-9405.101: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 9406.1-9406.156: (4.3): LockState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 9533.1-9533.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case C)
// 9665.1-9665.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case D)
// 9666.1-9666.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to LockState.vc (case R)
// 9758.1-9758.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case F)
// 9759.1-9759.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case H)
// 9760.1-9760.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to LockState.vc (case I)
// 9851.1-9851.136: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 9852.1-9852.136: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 9853.1-9853.99: (4.3): LockState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 9951.1-9951.140: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 9952.1-9952.101: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 9953.1-9953.156: (2.3): Array Array.LockState.VC_LockState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 10087.1-10087.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case C)
// 10226.1-10226.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case D)
// 10227.1-10227.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.LockState.VC_LockState (case R)
// 10324.1-10324.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case F)
// 10325.1-10325.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case H)
// 10326.1-10326.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.LockState.VC_LockState (case I)
// 10422.1-10422.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 10423.1-10423.136: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 10424.1-10424.99: (2.3): Array Array.LockState.VC_LockState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 10517.1-10517.140: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 10518.1-10518.101: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 10519.1-10519.156: (15.5): ThreadState.vc is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 10646.1-10646.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case C)
// 10778.1-10778.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case D)
// 10779.1-10779.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to ThreadState.vc (case R)
// 10871.1-10871.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case F)
// 10872.1-10872.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case H)
// 10873.1-10873.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to ThreadState.vc (case I)
// 10964.1-10964.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 10965.1-10965.136: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 10966.1-10966.99: (15.5): ThreadState.vc is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 11064.1-11064.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.1)
// 11065.1-11065.101: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.2)
// 11066.1-11066.156: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case A.3)
// 11200.1-11200.140: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case C)
// 11339.1-11339.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case D)
// 11340.1-11340.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case R)
// 11437.1-11437.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case F)
// 11438.1-11438.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case H)
// 11439.1-11439.144: (13.5): Array Array.ThreadState.VC_ThreadState is not Read-Write Stable with respect to Array Array.ThreadState.VC_ThreadState (case I)
// 11535.1-11535.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case J)
// 11536.1-11536.136: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case K)
// 11537.1-11537.99: (13.5): Array Array.ThreadState.VC_ThreadState is not Write-Read Stable with respect to Array Array.ThreadState.VC_ThreadState (case L)
// 11575.1-11603.2: (4.3): yields_as clause for LockState.vc is not valid
// 11608.1-11631.2: (4.3): yields_as clause for LockState.vc is not reflexive
// 11637.1-11683.2: (4.3): yields_as clause for LockState.vc is not transitive
// 11703.1-11731.2: (7.32): yields_as clause for LockState._lock is not valid
// 11736.1-11759.2: (7.32): yields_as clause for LockState._lock is not reflexive
// 11765.1-11811.2: (7.32): yields_as clause for LockState._lock is not transitive
// 11829.1-11861.2: (2.3): yields_as clause for Array.LockState.VC_LockState is not valid
// 11862.1-11891.2: (2.3): yields_as clause for Array.LockState.VC_LockState is not reflexive
// 11896.1-11946.2: (2.3): yields_as clause for Array.LockState.VC_LockState is not transitive
// 11965.1-11993.2: (15.5): yields_as clause for ThreadState.vc is not valid
// 11998.1-12021.2: (15.5): yields_as clause for ThreadState.vc is not reflexive
// 12027.1-12073.2: (15.5): yields_as clause for ThreadState.vc is not transitive
// 12093.1-12121.2: (7.32): yields_as clause for ThreadState._lock is not valid
// 12126.1-12149.2: (7.32): yields_as clause for ThreadState._lock is not reflexive
// 12155.1-12201.2: (7.32): yields_as clause for ThreadState._lock is not transitive
// 12219.1-12251.2: (13.5): yields_as clause for Array.ThreadState.VC_ThreadState is not valid
// 12252.1-12281.2: (13.5): yields_as clause for Array.ThreadState.VC_ThreadState is not reflexive
// 12286.1-12336.2: (13.5): yields_as clause for Array.ThreadState.VC_ThreadState is not transitive
