                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/fzhao12/Synchronicity/workspace/Synchronicity/tests/coarse-list.sink:                        
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Node {                                                                                    
       int key isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
    }                                                                                               
    class CoarseList {                                                                              
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Node tail isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
                                                                                                    
      requires this == global;                                                                      
      {                                                                                             
                                                                                                    
      }                                                                                             
      public boolean add(int item) {                                                                
        Node pred;                                                                                  
        Node curr;                                                                                  
        int key;                                                                                    
        key = item;                                                                                 
        synchronized (this) {                                                                       
          pred := this.head;                                                                        
          curr := pred.next;                                                                        
          int curr_key;                                                                             
          curr_key := curr.key;                                                                     
          boolean z;                                                                                
          z = curr_key < key;                                                                       
          while (z)                                                                                 
            invariant isShared(curr);                                                               
            invariant isShared(pred);                                                               
            {                                                                                       
            pred = curr;                                                                            
            curr := curr.next;                                                                      
            curr_key := curr.key;                                                                   
            z = curr_key < key;                                                                     
          }                                                                                         
          z = key == curr_key;                                                                      
          if (z) {                                                                                  
             return false;                                                                          
          } else {                                                                                  
            Node node;                                                                              
            node = new Node();                                                                      
            node.key := item;                                                                       
            node.item := item;                                                                      
            node.next := curr;                                                                      
            pred.next := node;                                                                      
             return true;                                                                           
          }                                                                                         
        }                                                                                           
        // return false;                                                                            
      }                                                                                             
                                                                                                    
    }                                                                                               
    CoarseList global;                                                                              
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Node {                                                                                    
       int key isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class CoarseList {                                                                              
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Node tail isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
      requires this == global;                                                                      
      {                                                                                             
                                                                                                    
      }                                                                                             
      public boolean add(int item) {                                                                
        Node pred;                                                                                  
        Node curr;                                                                                  
        int key;                                                                                    
        key = item;                                                                                 
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            pred := this.head;                                                                      
            curr := pred.next;                                                                      
            int curr_key;                                                                           
            curr_key := curr.key;                                                                   
            boolean z;                                                                              
            z = curr_key < key;                                                                     
            while (z)                                                                               
              invariant isShared(curr);                                                             
              invariant isShared(pred);                                                             
              invariant holds(this, tid);                                                           
              {                                                                                     
              pred = curr;                                                                          
              curr := curr.next;                                                                    
              curr_key := curr.key;                                                                 
              z = curr_key < key;                                                                   
            }                                                                                       
            z = key == curr_key;                                                                    
            if (z) {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return false;                                                                      
              }                                                                                     
            } else {                                                                                
              Node node;                                                                            
              node = new Node();                                                                    
              node.key := item;                                                                     
              node.item := item;                                                                    
              node.next := curr;                                                                    
              pred.next := node;                                                                    
              {                                                                                     
                release(this);                                                                      
                 return true;                                                                       
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return false;                                                                          
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    CoarseList global;                                                                              
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Node {                                                                                    
       int key isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class CoarseList {                                                                              
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Node tail isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
      requires this == global;                                                                      
      {                                                                                             
                                                                                                    
      }                                                                                             
      public boolean add(int item) {                                                                
        Node pred;                                                                                  
        Node curr;                                                                                  
        int key;                                                                                    
        key = item;                                                                                 
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            pred := this.head;                                                                      
            curr := pred.next;                                                                      
            int curr_key;                                                                           
            curr_key := curr.key;                                                                   
            boolean z;                                                                              
            z = curr_key < key;                                                                     
            while (z)                                                                               
              invariant isShared(curr);                                                             
              invariant isShared(pred);                                                             
              invariant holds(this, tid);                                                           
              {                                                                                     
              pred = curr;                                                                          
              curr := curr.next;                                                                    
              curr_key := curr.key;                                                                 
              z = curr_key < key;                                                                   
            }                                                                                       
            z = key == curr_key;                                                                    
            if (z) {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return false;                                                                      
              }                                                                                     
            } else {                                                                                
              Node node;                                                                            
              node = new Node();                                                                    
              node.key := item;                                                                     
              node.item := item;                                                                    
              node.next := curr;                                                                    
              pred.next := node;                                                                    
              {                                                                                     
                release(this);                                                                      
                 return true;                                                                       
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return false;                                                                          
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    CoarseList global;                                                                              
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Node {                                                                                    
       int key isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class CoarseList {                                                                              
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Node tail isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(global, tid) ? B : E                                                                 
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
      requires this == global;                                                                      
      {                                                                                             
                                                                                                    
      }                                                                                             
      public boolean add(int item) {                                                                
        Node pred;                                                                                  
        Node curr;                                                                                  
        int key;                                                                                    
        key = item;                                                                                 
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            pred := this.head;                                                                      
            curr := pred.next;                                                                      
            int curr_key;                                                                           
            curr_key := curr.key;                                                                   
            boolean z;                                                                              
            z = curr_key < key;                                                                     
            while (z)                                                                               
              invariant isShared(curr);                                                             
              invariant isShared(pred);                                                             
              invariant holds(this, tid);                                                           
              {                                                                                     
              pred = curr;                                                                          
              curr := curr.next;                                                                    
              curr_key := curr.key;                                                                 
              z = curr_key < key;                                                                   
            }                                                                                       
            z = key == curr_key;                                                                    
            if (z) {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return false;                                                                      
              }                                                                                     
            } else {                                                                                
              Node node;                                                                            
              node = new Node();                                                                    
              node.key := item;                                                                     
              node.item := item;                                                                    
              node.next := curr;                                                                    
              pred.next := node;                                                                    
              {                                                                                     
                release(this);                                                                      
                 return true;                                                                       
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return false;                                                                          
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    CoarseList global;                                                                              
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Node ***/                                                                           
                                                                                                    
type Node;                                                                                          
const unique Node.null: Node;                                                                       
var Node._state: [Node]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.key: [Node]int;                                                                            
                                                                                                    
function {:inline} ReadEval.Node.key(tid: Tid,this : Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.key(tid: Tid,this : Node,newValue: int,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.item: [Node]int;                                                                           
                                                                                                    
function {:inline} ReadEval.Node.item(tid: Tid,this : Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.item(tid: Tid,this : Node,newValue: int,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.next: [Node]Node;                                                                          
                                                                                                    
function {:inline} ReadEval.Node.next(tid: Tid,this : Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Node.null;                                                                        
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.next(tid: Tid,this : Node,newValue: Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node._lock: [Node]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Node._lock(tid: Tid,this : Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Node._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Node._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Node._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node._lock(tid: Tid,this : Node,newValue: Tid,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Node._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Node._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Node._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl CoarseList ***/                                                                     
                                                                                                    
type CoarseList;                                                                                    
const unique CoarseList.null: CoarseList;                                                           
var CoarseList._state: [CoarseList]State;                                                           
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var CoarseList.head: [CoarseList]Node;                                                              
                                                                                                    
function {:inline} ReadEval.CoarseList.head(tid: Tid,this : CoarseList,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Node.null;                                                                        
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isLocal(CoarseList._state[this], tid)) then                                                   
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.CoarseList.head(tid: Tid,this : CoarseList,newValue: Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isLocal(CoarseList._state[this], tid)) then                                                   
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var CoarseList.tail: [CoarseList]Node;                                                              
                                                                                                    
function {:inline} ReadEval.CoarseList.tail(tid: Tid,this : CoarseList,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Node.null;                                                                        
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isLocal(CoarseList._state[this], tid)) then                                                   
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.CoarseList.tail(tid: Tid,this : CoarseList,newValue: Node,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isLocal(CoarseList._state[this], tid)) then                                                   
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(CoarseList._state[global], tid) && CoarseList._lock[global] == tid)) then       
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var CoarseList._lock: [CoarseList]Tid;                                                              
                                                                                                    
function {:inline} ReadEval.CoarseList._lock(tid: Tid,this : CoarseList,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((CoarseList._lock[this]==tid)) then                                                          
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((CoarseList._lock[this]==Tid.null)&&(newValue==tid))) then                                  
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((CoarseList._lock[this]==tid)&&(newValue==Tid.null))) then                                 
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.CoarseList._lock(tid: Tid,this : CoarseList,newValue: Tid,Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(CoarseList._state[this], tid)) then                                                    
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((CoarseList._lock[this]==tid)) then                                                          
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((CoarseList._lock[this]==Tid.null)&&(newValue==tid))) then                                  
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((CoarseList._lock[this]==tid)&&(newValue==Tid.null))) then                                 
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  CoarseList.add(tid:Tid, this : CoarseList, item : int)                                   
returns ($result : bool)                                                                            
modifies Node._state;                                                                               
modifies Node.key;                                                                                  
modifies Node.item;                                                                                 
modifies Node.next;                                                                                 
modifies Node._lock;                                                                                
modifies CoarseList._state;                                                                         
modifies CoarseList.head;                                                                           
modifies CoarseList.tail;                                                                           
modifies CoarseList._lock;                                                                          
                                                                                                    
requires ValidTid(tid);                                                                                    // (13.5): Bad tid
requires isShared(CoarseList._state[this]);                                                                // (13.5): this is not global
                                                                                                    
requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
requires (this==global);                                                                            
                                                                                                    
                                                                                                    
ensures StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
{                                                                                                   
 var item745864_bottom: int;                                                                        
 var CoarseList.tail745838: [CoarseList]Node;                                                       
 var Node.key745875: [Node]int;                                                                     
 var curr745909: Node;                                                                              
 var Node.key745832: [Node]int;                                                                     
 var Node._lock745832: [Node]Tid;                                                                   
 var Node.item745894: [Node]int;                                                                    
 var global745832: CoarseList;                                                                      
 var Node.item745838: [Node]int;                                                                    
 var Node._lock745888: [Node]Tid;                                                                   
 var curr745853: Node;                                                                              
 var node745891: Node;                                                                              
 var $recorded.state745891: int;                                                                    
 var item745875: int;                                                                               
 var pred745864_bottom: Node;                                                                       
 var z745885: bool;                                                                                 
 var path745829: int;                                                                               
 var node745885: Node;                                                                              
 var $result745853: bool;                                                                           
 var $recorded.state745909: int;                                                                    
 var moverPath745856: MoverPath;                                                                    
 var CoarseList.tail745864_bottom: [CoarseList]Node;                                                
 var CoarseList._state745888: [CoarseList]State;                                                    
 var Node._lock745894: [Node]Tid;                                                                   
 var key745875: int;                                                                                
 var pred745875: Node;                                                                              
 var Node._state745832: [Node]State;                                                                
 var $result745875: bool;                                                                           
 var tid745838: Tid;                                                                                
 var curr745864_bottom: Node;                                                                       
 var pred745891: Node;                                                                              
 var $recorded.state745894: int;                                                                    
 var curr_key745875: int;                                                                           
 var global745864_bottom: CoarseList;                                                               
 var CoarseList.head745864: [CoarseList]Node;                                                       
 var Node._state745894: [Node]State;                                                                
 var moverPath745853: MoverPath;                                                                    
 var Node._state745856: [Node]State;                                                                
 var CoarseList._lock745856: [CoarseList]Tid;                                                       
 var z745894: bool;                                                                                 
 var CoarseList._state745864_bottom: [CoarseList]State;                                             
 var $recorded.state745875: int;                                                                    
 var pred745853: Node;                                                                              
 var node: Node;                                                                                    
 var $result745864_bottom: bool;                                                                    
 var pred745894: Node;                                                                              
 var Node.item745885: [Node]int;                                                                    
 var curr_key745891: int;                                                                           
 var $pc745829: Phase;                                                                              
 var item745891: int;                                                                               
 var CoarseList.head745829: [CoarseList]Node;                                                       
 var path745888: int;                                                                               
 var $recorded.state745829: int;                                                                    
 var mover745853: Mover;                                                                            
 var CoarseList._lock745891: [CoarseList]Tid;                                                       
 var $recorded.state745885: int;                                                                    
 var Node.key745856: [Node]int;                                                                     
 var CoarseList.tail745829: [CoarseList]Node;                                                       
 var Node.item745899: [Node]int;                                                                    
 var CoarseList.head745856: [CoarseList]Node;                                                       
 var Node._state745853: [Node]State;                                                                
 var CoarseList._state745894: [CoarseList]State;                                                    
 var key745888: int;                                                                                
 var Node.item745864_bottom: [Node]int;                                                             
 var key745832: int;                                                                                
 var CoarseList._lock745894: [CoarseList]Tid;                                                       
 var $result745891: bool;                                                                           
 var Node.next745829: [Node]Node;                                                                   
 var $result745885: bool;                                                                           
 var Node.next745909: [Node]Node;                                                                   
 var Node._lock745875: [Node]Tid;                                                                   
 var item745885: int;                                                                               
 var $pc745909: Phase;                                                                              
 var this745838: CoarseList;                                                                        
 var $recorded.state745899: int;                                                                    
 var global745899: CoarseList;                                                                      
 var $recorded.state745864_bottom: int;                                                             
 var path745894: int;                                                                               
 var curr_key745856: int;                                                                           
 var moverPath745829: MoverPath;                                                                    
 var global745894: CoarseList;                                                                      
 var Node.next745885: [Node]Node;                                                                   
 var Node.key745899: [Node]int;                                                                     
 var item745832: int;                                                                               
 var z745856: bool;                                                                                 
 var this745888: CoarseList;                                                                        
 var item745864: int;                                                                               
 var tid745856: Tid;                                                                                
 var Node.next745853: [Node]Node;                                                                   
 var Node.key745853: [Node]int;                                                                     
 var global745888: CoarseList;                                                                      
 var CoarseList.tail745899: [CoarseList]Node;                                                       
 var Node._lock745829: [Node]Tid;                                                                   
 var CoarseList._state745885: [CoarseList]State;                                                    
 var $pc745853: Phase;                                                                              
 var Node._state745891: [Node]State;                                                                
 var Node.key745894: [Node]int;                                                                     
 var pred745832: Node;                                                                              
 var curr745875: Node;                                                                              
 var Node.item745864: [Node]int;                                                                    
 var mover745838: Mover;                                                                            
 var $pc745899: Phase;                                                                              
 var $result745864: bool;                                                                           
 var CoarseList._state745864: [CoarseList]State;                                                    
 var CoarseList._state745899: [CoarseList]State;                                                    
 var CoarseList.head745838: [CoarseList]Node;                                                       
 var CoarseList._state745909: [CoarseList]State;                                                    
 var Node.next745864_bottom: [Node]Node;                                                            
 var this745864_bottom: CoarseList;                                                                 
 var z745864_bottom: bool;                                                                          
 var Node.next745838: [Node]Node;                                                                   
 var CoarseList._state745838: [CoarseList]State;                                                    
 var key745899: int;                                                                                
 var CoarseList._state745891: [CoarseList]State;                                                    
 var z745853: bool;                                                                                 
 var Node._lock745864: [Node]Tid;                                                                   
 var Node._lock745909: [Node]Tid;                                                                   
 var CoarseList.tail745832: [CoarseList]Node;                                                       
 var Node.next745875: [Node]Node;                                                                   
 var CoarseList._state745829: [CoarseList]State;                                                    
 var $recorded.state745888: int;                                                                    
 var $pc745894: Phase;                                                                              
 var $result745909: bool;                                                                           
 var curr745832: Node;                                                                              
 var curr745856: Node;                                                                              
 var $result745888: bool;                                                                           
 var CoarseList._lock745864: [CoarseList]Tid;                                                       
 var Node._lock745891: [Node]Tid;                                                                   
 var tid745899: Tid;                                                                                
 var mover745891: Mover;                                                                            
 var key745853: int;                                                                                
 var CoarseList._lock745829: [CoarseList]Tid;                                                       
 var this745909: CoarseList;                                                                        
 var $recorded.state745853: int;                                                                    
 var CoarseList.head745899: [CoarseList]Node;                                                       
 var item745899: int;                                                                               
 var path745838: int;                                                                               
 var Node.next745856: [Node]Node;                                                                   
 var this745832: CoarseList;                                                                        
 var Node._state745888: [Node]State;                                                                
 var mover745894: Mover;                                                                            
 var CoarseList.tail745891: [CoarseList]Node;                                                       
 var Node.next745832: [Node]Node;                                                                   
 var curr: Node;                                                                                    
 var $recorded.state745856: int;                                                                    
 var Node.item745832: [Node]int;                                                                    
 var Node.item745875: [Node]int;                                                                    
 var Node._state745909: [Node]State;                                                                
 var moverPath745894: MoverPath;                                                                    
 var Node.item745909: [Node]int;                                                                    
 var key745909: int;                                                                                
 var pred745856: Node;                                                                              
 var pred745899: Node;                                                                              
 var Node._state745899: [Node]State;                                                                
 var global745909: CoarseList;                                                                      
 var $result745829: bool;                                                                           
 var key745894: int;                                                                                
 var Node._lock745885: [Node]Tid;                                                                   
 var item745894: int;                                                                               
 var tid745909: Tid;                                                                                
 var $pc745864: Phase;                                                                              
 var CoarseList._lock745909: [CoarseList]Tid;                                                       
 var $pc745888: Phase;                                                                              
 var Node._state745885: [Node]State;                                                                
 var curr745838: Node;                                                                              
 var this745894: CoarseList;                                                                        
 var path745891: int;                                                                               
 var global745829: CoarseList;                                                                      
 var $pc745875: Phase;                                                                              
 var key745864_bottom: int;                                                                         
 var Node.next745891: [Node]Node;                                                                   
 var key745838: int;                                                                                
 var curr_key: int;                                                                                 
 var CoarseList.head745875: [CoarseList]Node;                                                       
 var curr_key745888: int;                                                                           
 var CoarseList.tail745856: [CoarseList]Node;                                                       
 var global745875: CoarseList;                                                                      
 var tid745894: Tid;                                                                                
 var CoarseList._lock745875: [CoarseList]Tid;                                                       
 var curr745891: Node;                                                                              
 var key: int;                                                                                      
 var path745832: int;                                                                               
 var Node._lock745899: [Node]Tid;                                                                   
 var CoarseList.tail745875: [CoarseList]Node;                                                       
 var $recorded.state745832: int;                                                                    
 var node745888: Node;                                                                              
 var key745885: int;                                                                                
 var Node.key745909: [Node]int;                                                                     
 var tid745853: Tid;                                                                                
 var Node.key745864_bottom: [Node]int;                                                              
 var CoarseList.tail745853: [CoarseList]Node;                                                       
 var CoarseList.head745832: [CoarseList]Node;                                                       
 var curr745894: Node;                                                                              
 var Node.key745885: [Node]int;                                                                     
 var Node.next745864: [Node]Node;                                                                   
 var CoarseList.tail745885: [CoarseList]Node;                                                       
 var $recorded.state745838: int;                                                                    
 var CoarseList._lock745853: [CoarseList]Tid;                                                       
 var Node.next745899: [Node]Node;                                                                   
 var this745853: CoarseList;                                                                        
 var key745864: int;                                                                                
 var item745838: int;                                                                               
 var phase745864: Phase;                                                                            
 var item745888: int;                                                                               
 var CoarseList._state745875: [CoarseList]State;                                                    
 var tid745829: Tid;                                                                                
 var item745829: int;                                                                               
 var CoarseList._lock745832: [CoarseList]Tid;                                                       
 var curr745899: Node;                                                                              
 var mover745888: Mover;                                                                            
 var curr_key745838: int;                                                                           
 var $pc745885: Phase;                                                                              
 var pred745888: Node;                                                                              
 var key745829: int;                                                                                
 var z745888: bool;                                                                                 
 var tid745891: Tid;                                                                                
 var CoarseList._state745853: [CoarseList]State;                                                    
 var CoarseList.head745888: [CoarseList]Node;                                                       
 var CoarseList.head745853: [CoarseList]Node;                                                       
 var global745864: CoarseList;                                                                      
 var pred745829: Node;                                                                              
 var curr_key745864_bottom: int;                                                                    
 var CoarseList.head745909: [CoarseList]Node;                                                       
 var mover745832: Mover;                                                                            
 var Node.item745829: [Node]int;                                                                    
 var curr_key745864: int;                                                                           
 var $pc745856: Phase;                                                                              
 var curr_key745885: int;                                                                           
 var this745875: CoarseList;                                                                        
 var Node.key745829: [Node]int;                                                                     
 var moverPath745885: MoverPath;                                                                    
 var curr_key745894: int;                                                                           
 var path745856: int;                                                                               
 var $pc745838: Phase;                                                                              
 var global745891: CoarseList;                                                                      
 var curr745829: Node;                                                                              
 var Node.item745856: [Node]int;                                                                    
 var $result745899: bool;                                                                           
 var moverPath745888: MoverPath;                                                                    
 var global745853: CoarseList;                                                                      
 var this745829: CoarseList;                                                                        
 var CoarseList.tail745894: [CoarseList]Node;                                                       
 var item745909: int;                                                                               
 var Node.item745853: [Node]int;                                                                    
 var Node.key745864: [Node]int;                                                                     
 var $pc745891: Phase;                                                                              
 var CoarseList._lock745888: [CoarseList]Tid;                                                       
 var CoarseList._state745856: [CoarseList]State;                                                    
 var Node.item745891: [Node]int;                                                                    
 var Node.key745838: [Node]int;                                                                     
 var mover745856: Mover;                                                                            
 var $result745838: bool;                                                                           
 var Node.key745891: [Node]int;                                                                     
 var $result745856: bool;                                                                           
 var $pc745864_bottom: Phase;                                                                       
 var Node._state745838: [Node]State;                                                                
 var z745899: bool;                                                                                 
 var this745885: CoarseList;                                                                        
 var CoarseList._lock745864_bottom: [CoarseList]Tid;                                                
 var z745891: bool;                                                                                 
 var this745864: CoarseList;                                                                        
 var Node.key745888: [Node]int;                                                                     
 var node745899: Node;                                                                              
 var Node._lock745838: [Node]Tid;                                                                   
 var global745856: CoarseList;                                                                      
 var CoarseList._lock745899: [CoarseList]Tid;                                                       
 var Node.item745888: [Node]int;                                                                    
 var $result745832: bool;                                                                           
 var z: bool;                                                                                       
 var mover745829: Mover;                                                                            
 var path745885: int;                                                                               
 var pred745909: Node;                                                                              
 var tid745832: Tid;                                                                                
 var CoarseList.tail745864: [CoarseList]Node;                                                       
 var z745864: bool;                                                                                 
 var tid745875: Tid;                                                                                
 var this745856: CoarseList;                                                                        
 var moverPath745838: MoverPath;                                                                    
 var CoarseList.head745894: [CoarseList]Node;                                                       
 var pred: Node;                                                                                    
 var Node._lock745864_bottom: [Node]Tid;                                                            
 var CoarseList.head745891: [CoarseList]Node;                                                       
 var Node._lock745853: [Node]Tid;                                                                   
 var node745894: Node;                                                                              
 var Node._state745864_bottom: [Node]State;                                                         
 var CoarseList._lock745885: [CoarseList]Tid;                                                       
 var CoarseList.head745885: [CoarseList]Node;                                                       
 var pred745864: Node;                                                                              
 var this745891: CoarseList;                                                                        
 var curr_key745899: int;                                                                           
 var Node.next745894: [Node]Node;                                                                   
 var z745875: bool;                                                                                 
 var pred745838: Node;                                                                              
 var global745838: CoarseList;                                                                      
 var CoarseList._lock745838: [CoarseList]Tid;                                                       
 var CoarseList.tail745909: [CoarseList]Node;                                                       
 var $recorded.state745864: int;                                                                    
 var key745856: int;                                                                                
 var mover745885: Mover;                                                                            
 var Node._state745875: [Node]State;                                                                
 var tid745864_bottom: Tid;                                                                         
 var item745853: int;                                                                               
 var CoarseList.tail745888: [CoarseList]Node;                                                       
 var $result745894: bool;                                                                           
 var curr745864: Node;                                                                              
 var tid745885: Tid;                                                                                
 var tid745888: Tid;                                                                                
 var Node._state745864: [Node]State;                                                                
 var CoarseList.head745864_bottom: [CoarseList]Node;                                                
 var global745885: CoarseList;                                                                      
 var curr745888: Node;                                                                              
 var Node._state745829: [Node]State;                                                                
 var Node._lock745856: [Node]Tid;                                                                   
 var moverPath745832: MoverPath;                                                                    
 var tid745864: Tid;                                                                                
 var $pc745832: Phase;                                                                              
 var this745899: CoarseList;                                                                        
 var item745856: int;                                                                               
 var curr745885: Node;                                                                              
 var moverPath745891: MoverPath;                                                                    
 var curr_key745853: int;                                                                           
 var pred745885: Node;                                                                              
 var CoarseList._state745832: [CoarseList]State;                                                    
 var Node.next745888: [Node]Node;                                                                   
 var key745891: int;                                                                                
 var path745853: int;                                                                               
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
 assert true;                                                                                              // (13.19): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 15.9: Node pred;                                                                                
                                                                                                    
                                                                                                    
 // 16.9: Node curr;                                                                                
                                                                                                    
                                                                                                    
 // 17.9: int key;                                                                                  
                                                                                                    
                                                                                                    
 // 17.19: key = item;                                                                              
                                                                                                    
 key := item;                                                                                       
 if ($pc == PreCommit) {                                                                            
  assume this != CoarseList.null;                                                                   
 } else {                                                                                           
  assert this != CoarseList.null;                                                                          // (18.22): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume CoarseList._lock[this] == Tid.null;                                                         
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (18.22): Reduction failure
 CoarseList._lock[this] := tid;                                                                     
                                                                                                    
 // 19.13: pred := this.head;                                                                       
                                                                                                    
                                                                                                    
 moverPath745829 := ReadEval.CoarseList.head(tid: Tid,this: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 mover745829 := m#moverPath(moverPath745829);                                                       
 path745829 := p#moverPath(moverPath745829);                                                        
 assume Node._state745829 == Node._state && Node.key745829 == Node.key && Node.item745829 == Node.item && Node.next745829 == Node.next && Node._lock745829 == Node._lock && CoarseList._state745829 == CoarseList._state && CoarseList.head745829 == CoarseList.head && CoarseList.tail745829 == CoarseList.tail && CoarseList._lock745829 == CoarseList._lock && key745829 == key && curr745829 == curr && pred745829 == pred && $result745829 == $result && item745829 == item && this745829 == this && tid745829 == tid && global745829 == global && $pc745829 == $pc;
 assume $recorded.state745829 == 1;                                                                 
 if ($pc == PreCommit) {                                                                            
  assume this != CoarseList.null;                                                                   
 } else {                                                                                           
  assert this != CoarseList.null;                                                                          // (19.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover745829);                                                               
 assert $pc != PhaseError;                                                                                 // (19.13): Reduction failure
 pred := CoarseList.head[this];                                                                     
                                                                                                    
 // 20.13: curr := pred.next;                                                                       
                                                                                                    
                                                                                                    
 moverPath745832 := ReadEval.Node.next(tid: Tid,pred: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 mover745832 := m#moverPath(moverPath745832);                                                       
 path745832 := p#moverPath(moverPath745832);                                                        
 assume Node._state745832 == Node._state && Node.key745832 == Node.key && Node.item745832 == Node.item && Node.next745832 == Node.next && Node._lock745832 == Node._lock && CoarseList._state745832 == CoarseList._state && CoarseList.head745832 == CoarseList.head && CoarseList.tail745832 == CoarseList.tail && CoarseList._lock745832 == CoarseList._lock && key745832 == key && curr745832 == curr && pred745832 == pred && $result745832 == $result && item745832 == item && this745832 == this && tid745832 == tid && global745832 == global && $pc745832 == $pc;
 assume $recorded.state745832 == 1;                                                                 
 if ($pc == PreCommit) {                                                                            
  assume pred != Node.null;                                                                         
 } else {                                                                                           
  assert pred != Node.null;                                                                                // (20.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover745832);                                                               
 assert $pc != PhaseError;                                                                                 // (20.13): Reduction failure
 curr := Node.next[pred];                                                                           
                                                                                                    
 // 21.13: int curr_key;                                                                            
                                                                                                    
                                                                                                    
 // 21.13: curr_key := curr.key;                                                                    
                                                                                                    
                                                                                                    
 moverPath745838 := ReadEval.Node.key(tid: Tid,curr: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 mover745838 := m#moverPath(moverPath745838);                                                       
 path745838 := p#moverPath(moverPath745838);                                                        
 assume Node._state745838 == Node._state && Node.key745838 == Node.key && Node.item745838 == Node.item && Node.next745838 == Node.next && Node._lock745838 == Node._lock && CoarseList._state745838 == CoarseList._state && CoarseList.head745838 == CoarseList.head && CoarseList.tail745838 == CoarseList.tail && CoarseList._lock745838 == CoarseList._lock && curr_key745838 == curr_key && key745838 == key && curr745838 == curr && pred745838 == pred && $result745838 == $result && item745838 == item && this745838 == this && tid745838 == tid && global745838 == global && $pc745838 == $pc;
 assume $recorded.state745838 == 1;                                                                 
 if ($pc == PreCommit) {                                                                            
  assume curr != Node.null;                                                                         
 } else {                                                                                           
  assert curr != Node.null;                                                                                // (21.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover745838);                                                               
 assert $pc != PhaseError;                                                                                 // (21.13): Reduction failure
 curr_key := Node.key[curr];                                                                        
                                                                                                    
 // 22.13: boolean z;                                                                               
                                                                                                    
                                                                                                    
 // 22.34: z = curr_key < key;                                                                      
                                                                                                    
 z := (curr_key<key);                                                                               
 assume Node._state745864 == Node._state && Node.key745864 == Node.key && Node.item745864 == Node.item && Node.next745864 == Node.next && Node._lock745864 == Node._lock && CoarseList._state745864 == CoarseList._state && CoarseList.head745864 == CoarseList.head && CoarseList.tail745864 == CoarseList.tail && CoarseList._lock745864 == CoarseList._lock && z745864 == z && curr_key745864 == curr_key && key745864 == key && curr745864 == curr && pred745864 == pred && $result745864 == $result && item745864 == item && this745864 == this && tid745864 == tid && global745864 == global;
 assume $recorded.state745864 == 1;                                                                 
                                                                                                    
 // 22.41: while (z)                                                                                
                                                                                                    
 phase745864 := $pc;                                                                                
 while (z)                                                                                          
                                                                                                    
  invariant ValidTid(tid);                                                                                 // (13.5): Bad tid
  invariant isShared(CoarseList._state[this]);                                                             // (13.5): this is not global
                                                                                                    
  invariant StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
  invariant isShared(Node._state[curr]);                                                            
  invariant isShared(Node._state[pred]);                                                            
  invariant (isAccessible(CoarseList._state[this], tid) && CoarseList._lock[this] == tid);          
  invariant (forall _this : Node :: Invariant.Y_Node.key(tid : Tid, _this, Node.key[_this] ,Node._state745864,Node.key745864,Node.item745864,Node.next745864,Node._lock745864,CoarseList._state745864,CoarseList.head745864,CoarseList.tail745864,CoarseList._lock745864));       // (22.41): Loop does not preserve yields_as annotation for field key
  invariant (forall _this : Node :: Invariant.Y_Node.item(tid : Tid, _this, Node.item[_this] ,Node._state745864,Node.key745864,Node.item745864,Node.next745864,Node._lock745864,CoarseList._state745864,CoarseList.head745864,CoarseList.tail745864,CoarseList._lock745864));       // (22.41): Loop does not preserve yields_as annotation for field item
  invariant (forall _this : Node :: Invariant.Y_Node.next(tid : Tid, _this, Node.next[_this] ,Node._state745864,Node.key745864,Node.item745864,Node.next745864,Node._lock745864,CoarseList._state745864,CoarseList.head745864,CoarseList.tail745864,CoarseList._lock745864));       // (22.41): Loop does not preserve yields_as annotation for field next
  invariant (forall _this : CoarseList :: Invariant.Y_CoarseList.head(tid : Tid, _this, CoarseList.head[_this] ,Node._state745864,Node.key745864,Node.item745864,Node.next745864,Node._lock745864,CoarseList._state745864,CoarseList.head745864,CoarseList.tail745864,CoarseList._lock745864));       // (22.41): Loop does not preserve yields_as annotation for field head
  invariant (forall _this : CoarseList :: Invariant.Y_CoarseList.tail(tid : Tid, _this, CoarseList.tail[_this] ,Node._state745864,Node.key745864,Node.item745864,Node.next745864,Node._lock745864,CoarseList._state745864,CoarseList.head745864,CoarseList.tail745864,CoarseList._lock745864));       // (22.41): Loop does not preserve yields_as annotation for field tail
  invariant phase745864 == $pc;                                                                            // (22.41): Phase must be invariant at loop head
  invariant $pc == PreCommit;                                                                              // (22.41): Potentially infinite loop cannot be in post-commit phase.
 {                                                                                                  
                                                                                                    
  // 26.24: pred = curr;                                                                            
                                                                                                    
  pred := curr;                                                                                     
                                                                                                    
  // 27.17: curr := curr.next;                                                                      
                                                                                                    
                                                                                                    
  moverPath745853 := ReadEval.Node.next(tid: Tid,curr: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745853 := m#moverPath(moverPath745853);                                                      
  path745853 := p#moverPath(moverPath745853);                                                       
  assume Node._state745853 == Node._state && Node.key745853 == Node.key && Node.item745853 == Node.item && Node.next745853 == Node.next && Node._lock745853 == Node._lock && CoarseList._state745853 == CoarseList._state && CoarseList.head745853 == CoarseList.head && CoarseList.tail745853 == CoarseList.tail && CoarseList._lock745853 == CoarseList._lock && z745853 == z && curr_key745853 == curr_key && key745853 == key && curr745853 == curr && pred745853 == pred && $result745853 == $result && item745853 == item && this745853 == this && tid745853 == tid && global745853 == global && $pc745853 == $pc;
  assume $recorded.state745853 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume curr != Node.null;                                                                        
  } else {                                                                                          
   assert curr != Node.null;                                                                               // (27.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  $pc := transition($pc, mover745853);                                                              
  assert $pc != PhaseError;                                                                                // (27.17): Reduction failure
  curr := Node.next[curr];                                                                          
                                                                                                    
  // 28.17: curr_key := curr.key;                                                                   
                                                                                                    
                                                                                                    
  moverPath745856 := ReadEval.Node.key(tid: Tid,curr: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745856 := m#moverPath(moverPath745856);                                                      
  path745856 := p#moverPath(moverPath745856);                                                       
  assume Node._state745856 == Node._state && Node.key745856 == Node.key && Node.item745856 == Node.item && Node.next745856 == Node.next && Node._lock745856 == Node._lock && CoarseList._state745856 == CoarseList._state && CoarseList.head745856 == CoarseList.head && CoarseList.tail745856 == CoarseList.tail && CoarseList._lock745856 == CoarseList._lock && z745856 == z && curr_key745856 == curr_key && key745856 == key && curr745856 == curr && pred745856 == pred && $result745856 == $result && item745856 == item && this745856 == this && tid745856 == tid && global745856 == global && $pc745856 == $pc;
  assume $recorded.state745856 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume curr != Node.null;                                                                        
  } else {                                                                                          
   assert curr != Node.null;                                                                               // (28.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  $pc := transition($pc, mover745856);                                                              
  assert $pc != PhaseError;                                                                                // (28.17): Reduction failure
  curr_key := Node.key[curr];                                                                       
                                                                                                    
  // 28.52: z = curr_key < key;                                                                     
                                                                                                    
  z := (curr_key<key);                                                                              
  assume Node._state745864_bottom == Node._state && Node.key745864_bottom == Node.key && Node.item745864_bottom == Node.item && Node.next745864_bottom == Node.next && Node._lock745864_bottom == Node._lock && CoarseList._state745864_bottom == CoarseList._state && CoarseList.head745864_bottom == CoarseList.head && CoarseList.tail745864_bottom == CoarseList.tail && CoarseList._lock745864_bottom == CoarseList._lock && z745864_bottom == z && curr_key745864_bottom == curr_key && key745864_bottom == key && curr745864_bottom == curr && pred745864_bottom == pred && $result745864_bottom == $result && item745864_bottom == item && this745864_bottom == this && tid745864_bottom == tid && global745864_bottom == global;
  assume $recorded.state745864_bottom == 1;                                                         
  assert phase745864 == $pc;                                                                               // (22.41): Phase must be invariant at loop head
 }                                                                                                  
                                                                                                    
 // 30.21: z = key == curr_key;                                                                     
                                                                                                    
 z := (key==curr_key);                                                                              
 if (z) {                                                                                           
  if ($pc == PreCommit) {                                                                           
   assume this != CoarseList.null;                                                                  
  } else {                                                                                          
   assert this != CoarseList.null;                                                                         // (40.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert CoarseList._lock[this] == tid;                                                                    // (40.9): lock not held
  $pc := transition($pc, _L);                                                                       
  assert $pc != PhaseError;                                                                                // (40.9): Reduction failure
  CoarseList._lock[this] := Tid.null;                                                               
                                                                                                    
  // 31.17:  return false;                                                                          
                                                                                                    
  assume Node._state745875 == Node._state && Node.key745875 == Node.key && Node.item745875 == Node.item && Node.next745875 == Node.next && Node._lock745875 == Node._lock && CoarseList._state745875 == CoarseList._state && CoarseList.head745875 == CoarseList.head && CoarseList.tail745875 == CoarseList.tail && CoarseList._lock745875 == CoarseList._lock && z745875 == z && curr_key745875 == curr_key && key745875 == key && curr745875 == curr && pred745875 == pred && $result745875 == $result && item745875 == item && this745875 == this && tid745875 == tid && global745875 == global;
  assume $recorded.state745875 == 1;                                                                
  $result := false;                                                                                 
  return;                                                                                           
 } else {                                                                                           
                                                                                                    
  // 33.17: Node node;                                                                              
                                                                                                    
                                                                                                    
  // 33.17: node = new Node();                                                                      
                                                                                                    
  havoc node;                                                                                       
  assume node != Node.null && isFresh(Node._state[node]);                                           
  Node._state[node] := LOCAL(tid);                                                                  
  assume Node.key[node]  == 0;                                                                      
  assume Node.item[node]  == 0;                                                                     
  assume Node.next[node]  == Node.null;                                                             
  assume Node._lock[node]  == Tid.null;                                                             
                                                                                                    
                                                                                                    
  // 34.17: node.key := item;                                                                       
                                                                                                    
                                                                                                    
  moverPath745885 := WriteEval.Node.key(tid: Tid,node: Node,item: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745885 := m#moverPath(moverPath745885);                                                      
  path745885 := p#moverPath(moverPath745885);                                                       
  assume Node._state745885 == Node._state && Node.key745885 == Node.key && Node.item745885 == Node.item && Node.next745885 == Node.next && Node._lock745885 == Node._lock && CoarseList._state745885 == CoarseList._state && CoarseList.head745885 == CoarseList.head && CoarseList.tail745885 == CoarseList.tail && CoarseList._lock745885 == CoarseList._lock && node745885 == node && z745885 == z && curr_key745885 == curr_key && key745885 == key && curr745885 == curr && pred745885 == pred && $result745885 == $result && item745885 == item && this745885 == this && tid745885 == tid && global745885 == global && $pc745885 == $pc;
  assume $recorded.state745885 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume node != Node.null;                                                                        
  } else {                                                                                          
   assert node != Node.null;                                                                               // (34.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  $pc := transition($pc, mover745885);                                                              
  assert $pc != PhaseError;                                                                                // (34.17): Reduction failure
  Node.key[node] := item;                                                                           
                                                                                                    
                                                                                                    
  // 35.17: node.item := item;                                                                      
                                                                                                    
                                                                                                    
  moverPath745888 := WriteEval.Node.item(tid: Tid,node: Node,item: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745888 := m#moverPath(moverPath745888);                                                      
  path745888 := p#moverPath(moverPath745888);                                                       
  assume Node._state745888 == Node._state && Node.key745888 == Node.key && Node.item745888 == Node.item && Node.next745888 == Node.next && Node._lock745888 == Node._lock && CoarseList._state745888 == CoarseList._state && CoarseList.head745888 == CoarseList.head && CoarseList.tail745888 == CoarseList.tail && CoarseList._lock745888 == CoarseList._lock && node745888 == node && z745888 == z && curr_key745888 == curr_key && key745888 == key && curr745888 == curr && pred745888 == pred && $result745888 == $result && item745888 == item && this745888 == this && tid745888 == tid && global745888 == global && $pc745888 == $pc;
  assume $recorded.state745888 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume node != Node.null;                                                                        
  } else {                                                                                          
   assert node != Node.null;                                                                               // (35.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  $pc := transition($pc, mover745888);                                                              
  assert $pc != PhaseError;                                                                                // (35.17): Reduction failure
  Node.item[node] := item;                                                                          
                                                                                                    
                                                                                                    
  // 36.17: node.next := curr;                                                                      
                                                                                                    
                                                                                                    
  moverPath745891 := WriteEval.Node.next(tid: Tid,node: Node,curr: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745891 := m#moverPath(moverPath745891);                                                      
  path745891 := p#moverPath(moverPath745891);                                                       
  assume Node._state745891 == Node._state && Node.key745891 == Node.key && Node.item745891 == Node.item && Node.next745891 == Node.next && Node._lock745891 == Node._lock && CoarseList._state745891 == CoarseList._state && CoarseList.head745891 == CoarseList.head && CoarseList.tail745891 == CoarseList.tail && CoarseList._lock745891 == CoarseList._lock && node745891 == node && z745891 == z && curr_key745891 == curr_key && key745891 == key && curr745891 == curr && pred745891 == pred && $result745891 == $result && item745891 == item && this745891 == this && tid745891 == tid && global745891 == global && $pc745891 == $pc;
  assume $recorded.state745891 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume node != Node.null;                                                                        
  } else {                                                                                          
   assert node != Node.null;                                                                               // (36.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  $pc := transition($pc, mover745891);                                                              
  assert $pc != PhaseError;                                                                                // (36.17): Reduction failure
  Node.next[node] := curr;                                                                          
  if (isLocal(Node._state[curr], tid)) {                                                            
   Node._state[curr] := SHARED();                                                                   
   assert isSharedAssignable(Node._state[Node.next[curr]]);                                                // (36.17): curr became shared, but curr.next may not be shared.
  }                                                                                                 
                                                                                                    
                                                                                                    
                                                                                                    
  // 37.17: pred.next := node;                                                                      
                                                                                                    
                                                                                                    
  moverPath745894 := WriteEval.Node.next(tid: Tid,pred: Node,node: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
  mover745894 := m#moverPath(moverPath745894);                                                      
  path745894 := p#moverPath(moverPath745894);                                                       
  assume Node._state745894 == Node._state && Node.key745894 == Node.key && Node.item745894 == Node.item && Node.next745894 == Node.next && Node._lock745894 == Node._lock && CoarseList._state745894 == CoarseList._state && CoarseList.head745894 == CoarseList.head && CoarseList.tail745894 == CoarseList.tail && CoarseList._lock745894 == CoarseList._lock && node745894 == node && z745894 == z && curr_key745894 == curr_key && key745894 == key && curr745894 == curr && pred745894 == pred && $result745894 == $result && item745894 == item && this745894 == this && tid745894 == tid && global745894 == global && $pc745894 == $pc;
  assume $recorded.state745894 == 1;                                                                
  if ($pc == PreCommit) {                                                                           
   assume pred != Node.null;                                                                        
  } else {                                                                                          
   assert pred != Node.null;                                                                               // (37.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  $pc := transition($pc, mover745894);                                                              
  assert $pc != PhaseError;                                                                                // (37.17): Reduction failure
  Node.next[pred] := node;                                                                          
  if (isLocal(Node._state[node], tid)) {                                                            
   Node._state[node] := SHARED();                                                                   
   assert isSharedAssignable(Node._state[Node.next[node]]);                                                // (37.17): node became shared, but node.next may not be shared.
  }                                                                                                 
                                                                                                    
  if ($pc == PreCommit) {                                                                           
   assume this != CoarseList.null;                                                                  
  } else {                                                                                          
   assert this != CoarseList.null;                                                                         // (40.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert CoarseList._lock[this] == tid;                                                                    // (40.9): lock not held
  $pc := transition($pc, _L);                                                                       
  assert $pc != PhaseError;                                                                                // (40.9): Reduction failure
  CoarseList._lock[this] := Tid.null;                                                               
                                                                                                    
  // 38.17:  return true;                                                                           
                                                                                                    
  assume Node._state745899 == Node._state && Node.key745899 == Node.key && Node.item745899 == Node.item && Node.next745899 == Node.next && Node._lock745899 == Node._lock && CoarseList._state745899 == CoarseList._state && CoarseList.head745899 == CoarseList.head && CoarseList.tail745899 == CoarseList.tail && CoarseList._lock745899 == CoarseList._lock && node745899 == node && z745899 == z && curr_key745899 == curr_key && key745899 == key && curr745899 == curr && pred745899 == pred && $result745899 == $result && item745899 == item && this745899 == this && tid745899 == tid && global745899 == global;
  assume $recorded.state745899 == 1;                                                                
  $result := true;                                                                                  
  return;                                                                                           
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume this != CoarseList.null;                                                                   
 } else {                                                                                           
  assert this != CoarseList.null;                                                                          // (40.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert CoarseList._lock[this] == tid;                                                                     // (40.9): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (40.9): Reduction failure
 CoarseList._lock[this] := Tid.null;                                                                
                                                                                                    
 // 14.34: // return false;                                                                         
                                                                                                    
 assume Node._state745909 == Node._state && Node.key745909 == Node.key && Node.item745909 == Node.item && Node.next745909 == Node.next && Node._lock745909 == Node._lock && CoarseList._state745909 == CoarseList._state && CoarseList.head745909 == CoarseList.head && CoarseList.tail745909 == CoarseList.tail && CoarseList._lock745909 == CoarseList._lock && key745909 == key && curr745909 == curr && pred745909 == pred && $result745909 == $result && item745909 == item && this745909 == this && tid745909 == tid && global745909 == global;
 assume $recorded.state745909 == 1;                                                                 
 $result := false;                                                                                  
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
 const unique global : CoarseList;                                                                  
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Node._state: [Node]State,Node.key: [Node]int,Node.item: [Node]int,Node.next: [Node]Node,Node._lock: [Node]Tid,CoarseList._state: [CoarseList]State,CoarseList.head: [CoarseList]Node,CoarseList.tail: [CoarseList]Node,CoarseList._lock: [CoarseList]Tid) returns (bool) {
  true &&                                                                                           
  (forall _i: Node  :: _i == Node.null <==> isNull(Node._state[_i])) &&                             
  (forall _i: CoarseList  :: _i == CoarseList.null <==> isNull(CoarseList._state[_i])) &&           
  isShared(CoarseList._state[global]) &&                                                            
  (forall _i: Node ::  (isShared(Node._state[_i]) ==> isSharedAssignable(Node._state[Node.next[_i]]))) &&
  (forall _i: Node ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Node._state[_i],_t) ==> isLocalAssignable(Node._state[Node.next[_i]], _t)))) &&
  (forall _i: CoarseList ::  (isShared(CoarseList._state[_i]) ==> isSharedAssignable(Node._state[CoarseList.head[_i]]))) &&
  (forall _i: CoarseList ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(CoarseList._state[_i],_t) ==> isLocalAssignable(Node._state[CoarseList.head[_i]], _t)))) &&
  (forall _i: CoarseList ::  (isShared(CoarseList._state[_i]) ==> isSharedAssignable(Node._state[CoarseList.tail[_i]]))) &&
  (forall _i: CoarseList ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(CoarseList._state[_i],_t) ==> isLocalAssignable(Node._state[CoarseList.tail[_i]], _t)))) &&
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.key(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Node.key failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)             
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.key(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (3.5): Node.key failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)             
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.key[x];                                                                           
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.key[x] := havocValue;                                                                         
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.key(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Node.key failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)              
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.key[x];                                                                           
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.key(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (3.5): Node.key failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)                  
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.key(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Node.key failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.key(t: Tid, u: Tid, v: int, w: int, x: Node)                   
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Node.key[x];                                                                           
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.key[x] := havocValue;                                                                         
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.key(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Node.key failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)           
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Node.item failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.item(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.5): Node.item failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.item[x];                                                                          
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.item[x] := havocValue;                                                                        
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Node.item failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)             
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.item[x];                                                                          
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.item(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.5): Node.item failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)                 
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Node.item failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)                  
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Node.item[x];                                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.item[x] := havocValue;                                                                        
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Node.item failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)         
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.next failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)          
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.next(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (5.5): Node.next failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)          
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == Node.next[x];                                                                          
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.next[x] := havocValue;                                                                        
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.next failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)           
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == Node.next[x];                                                                          
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.next(u: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (5.5): Node.next failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)               
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.next failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)                
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume w == Node.next[x];                                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.next[x] := havocValue;                                                                        
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.next failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.CoarseList.head(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): CoarseList.head failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.CoarseList.head(u: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (10.5): CoarseList.head failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == CoarseList.head[x];                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 CoarseList.head[x] := havocValue;                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.CoarseList.head(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): CoarseList.head failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == CoarseList.head[x];                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.CoarseList.head(u: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (10.5): CoarseList.head failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)   
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): CoarseList.head failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)    
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume w == CoarseList.head[x];                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 CoarseList.head[x] := havocValue;                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): CoarseList.head failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.CoarseList.tail(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): CoarseList.tail failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.CoarseList.tail(u: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (11.5): CoarseList.tail failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == CoarseList.tail[x];                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 CoarseList.tail[x] := havocValue;                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.CoarseList.tail(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): CoarseList.tail failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == CoarseList.tail[x];                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.CoarseList.tail(u: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (11.5): CoarseList.tail failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)   
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): CoarseList.tail failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, x: CoarseList)    
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[x], u);                                                    
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume w == CoarseList.tail[x];                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 CoarseList.tail[x] := havocValue;                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,x: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): CoarseList.tail failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.key.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.key.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.key.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.key (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.key.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[y] := w;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.key (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.key (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.key (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.key.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.key (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.key (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Node.key is not Write-Read Stable with respect to Node.key (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.key.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.key.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.key.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.key.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.key.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.key (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.key (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Node.item is not Write-Read Stable with respect to Node.key (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.key.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.key.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.key.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.key.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.key.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.key;                                                                                 
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.key (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.key (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.next is not Write-Read Stable with respect to Node.key (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.key.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.key.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.key.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.key.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.key.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.key.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.key.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.key.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.key[x];                                                                               
 Node.key[x] := v;                                                                                  
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.key[x] := tmpV;                                                                               
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.key.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.key(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.key.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.key;                                                                                 
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.key(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[x] := v;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.key (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[y] := w;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.key (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.key (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.key (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.key(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Node.key is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Node.item is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.next is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.CoarseList.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.CoarseList.tail(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.item;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.key (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[y] := w;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.key (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.key (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.key (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Node.key is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Node.item is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.next is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies Node.next;                                                                                
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.head.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.head.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.head.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.head.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[y] := w;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.head.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.head;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.head.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.head.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.head.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.head.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.head.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.head.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.head.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.head.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.head[x];                                                                        
 CoarseList.head[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.head[x] := tmpV;                                                                        
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.head.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.head(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.head.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.head;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.head(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.tail.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.tail.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.tail.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.key[y] := w;                                                                                  
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.tail.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.key(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.key[y] := w;                                                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.tail.Node.key(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.key;                                                                                 
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.key(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.tail.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.tail.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.tail.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.tail.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.tail.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.tail.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.tail.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.tail.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.tail.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.tail.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: Node)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(Node._state[y], u);                                                          
 modifies CoarseList.tail;                                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var y_post: Node;                                                                                  
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.tail.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.tail.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.tail.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 CoarseList.head[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.tail.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.head(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.head[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.tail.CoarseList.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.head;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.head(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.CoarseList.tail.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.CoarseList.tail.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
                                                                                                    
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.CoarseList.tail.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var CoarseList.tail_mid: [CoarseList]Node;                                                         
 var y_mid: CoarseList;                                                                             
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var CoarseList._state_mid: [CoarseList]State;                                                      
 var $recorded.state_mid: int;                                                                      
 var v_mid: Node;                                                                                   
 var Node.key_mid: [Node]int;                                                                       
 var CoarseList._lock_mid: [CoarseList]Tid;                                                         
 var w0_mid: Node;                                                                                  
 var CoarseList.head_mid: [CoarseList]Node;                                                         
 var x_mid: CoarseList;                                                                             
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := CoarseList.tail[x];                                                                        
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_mid == Node._state && Node.key_mid == Node.key && Node.item_mid == Node.item && Node.next_mid == Node.next && Node._lock_mid == Node._lock && CoarseList._state_mid == CoarseList._state && CoarseList.head_mid == CoarseList.head && CoarseList.tail_mid == CoarseList.tail && CoarseList._lock_mid == CoarseList._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 CoarseList.tail[x] := tmpV;                                                                        
 CoarseList.tail[y] := w;                                                                           
 _writeByTPost := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.CoarseList.tail.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.CoarseList.tail(u: Tid,y: CoarseList,w: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[y] := w;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.CoarseList.tail(t: Tid,x: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.CoarseList.tail.CoarseList.tail(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: CoarseList, y: CoarseList)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(CoarseList._state[x], t);                                                    
 requires isAccessible(CoarseList._state[y], u);                                                    
 modifies CoarseList.tail;                                                                          
 modifies CoarseList.tail;                                                                          
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: CoarseList;                                                                             
 var y_pre: CoarseList;                                                                             
 var CoarseList.tail_pre: [CoarseList]Node;                                                         
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Node.key_pre: [Node]int;                                                                       
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var CoarseList.head_pre: [CoarseList]Node;                                                         
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var CoarseList._lock_pre: [CoarseList]Tid;                                                         
 var Node.item_pre: [Node]int;                                                                      
 var t_pre: Tid;                                                                                    
 var CoarseList._state_pre: [CoarseList]State;                                                      
                                                                                                    
 var CoarseList.head_post: [CoarseList]Node;                                                        
 var Node.key_post: [Node]int;                                                                      
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var t_post: Tid;                                                                                   
 var $pc_post: Phase;                                                                               
 var x_post: CoarseList;                                                                            
 var Node._lock_post: [Node]Tid;                                                                    
 var CoarseList.tail_post: [CoarseList]Node;                                                        
 var CoarseList._lock_post: [CoarseList]Tid;                                                        
 var w0_post: Node;                                                                                 
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var CoarseList._state_post: [CoarseList]State;                                                     
 var v_post: Node;                                                                                  
 var y_post: CoarseList;                                                                            
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.CoarseList.tail(t: Tid,x: CoarseList,v: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 CoarseList.tail[x] := v;                                                                           
 assume Node._state_post == Node._state && Node.key_post == Node.key && Node.item_post == Node.item && Node.next_post == Node.next && Node._lock_post == Node._lock && CoarseList._state_post == CoarseList._state && CoarseList.head_post == CoarseList.head && CoarseList.tail_post == CoarseList.tail && CoarseList._lock_post == CoarseList._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.CoarseList.tail(u: Tid,y: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
requires ValidTid(tid);                                                                             
modifies Node._state;                                                                               
modifies Node.key;                                                                                  
modifies Node.item;                                                                                 
modifies Node.next;                                                                                 
modifies Node._lock;                                                                                
modifies CoarseList._state;                                                                         
modifies CoarseList.head;                                                                           
modifies CoarseList.tail;                                                                           
modifies CoarseList._lock;                                                                          
ensures StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
ensures Y(tid , old(Node._state), old(Node.key), old(Node.item), old(Node.next), old(Node._lock), old(CoarseList._state), old(CoarseList.head), old(CoarseList.tail), old(CoarseList._lock) , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
                                                                                                    
// Node.key:                                                                                        
                                                                                                    
function {:inline} Y_Node.key(tid : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.key(tid: Tid,this: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (Node.key[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.key(tid : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.key.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.key(u: Tid,this: Node,newValue: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
                                                                                                    
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.key(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.key.Reflexive(tid : Tid, this: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.key(tid, this, Node.key[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.key.Transitive(tid : Tid, this: Node, newValue : int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var Node.key_pre: [Node]int;                                                                        
var newValue_pre: int;                                                                              
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var this_post: Node;                                                                                
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_Node.key(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.key(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// Node.item:                                                                                       
                                                                                                    
function {:inline} Y_Node.item(tid : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.item(tid: Tid,this: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (Node.item[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.item(tid : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.item(u: Tid,this: Node,newValue: int,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
                                                                                                    
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.item(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Reflexive(tid : Tid, this: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.item(tid, this, Node.item[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Transitive(tid : Tid, this: Node, newValue : int , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var Node.key_pre: [Node]int;                                                                        
var newValue_pre: int;                                                                              
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var this_post: Node;                                                                                
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_Node.item(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.item(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// Node.next:                                                                                       
                                                                                                    
function {:inline} Y_Node.next(tid : Tid, this: Node, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.next(tid: Tid,this: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (Node.next[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.next(tid : Tid, this: Node, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var newValue_yield: Node;                                                                           
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.next(u: Tid,this: Node,newValue: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
                                                                                                    
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.next(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Reflexive(tid : Tid, this: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.next(tid, this, Node.next[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Transitive(tid : Tid, this: Node, newValue : Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var newValue_pre: Node;                                                                             
var Node._lock_pre: [Node]Tid;                                                                      
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var Node.key_pre: [Node]int;                                                                        
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var newValue_post: Node;                                                                            
var Node.item_post: [Node]int;                                                                      
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var this_post: Node;                                                                                
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_Node.next(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.next(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// Node._lock:                                                                                      
                                                                                                    
function {:inline} Y_Node._lock(tid : Tid, this: Node, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node._lock(tid: Tid,this: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (Node._lock[this] == newValue))
 &&(((Node._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node._lock(tid : Tid, this: Node, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var newValue_yield: Tid;                                                                            
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node._lock(u: Tid,this: Node,newValue: Tid,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
 assume leq(m#moverPath(ReadEval.Node._lock(tid: Tid,this: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _N);
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node._lock(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Reflexive(tid : Tid, this: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node._lock(tid, this, Node._lock[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Transitive(tid : Tid, this: Node, newValue : Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var Node.key_pre: [Node]int;                                                                        
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var newValue_pre: Tid;                                                                              
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var this_post: Node;                                                                                
var newValue_post: Tid;                                                                             
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_Node._lock(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node._lock(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// CoarseList.head:                                                                                 
                                                                                                    
function {:inline} Y_CoarseList.head(tid : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(CoarseList._state[this], tid) && leq(m#moverPath(ReadEval.CoarseList.head(tid: Tid,this: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (CoarseList.head[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_CoarseList.head(tid : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.head.Subsumes.W(tid : Tid, u : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var newValue_yield: Node;                                                                           
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume isAccessible(CoarseList._state[this], u);                                                   
 assume !isError(m#moverPath(WriteEval.CoarseList.head(u: Tid,this: CoarseList,newValue: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
                                                                                                    
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList.head(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.head.Reflexive(tid : Tid, this: CoarseList , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList.head(tid, this, CoarseList.head[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.head.Transitive(tid : Tid, this: CoarseList, newValue : Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var newValue_pre: Node;                                                                             
var Node._lock_pre: [Node]Tid;                                                                      
var this_pre: CoarseList;                                                                           
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var Node.key_pre: [Node]int;                                                                        
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var this_post: CoarseList;                                                                          
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var newValue_post: Node;                                                                            
var Node.item_post: [Node]int;                                                                      
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_CoarseList.head(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_CoarseList.head(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// CoarseList.tail:                                                                                 
                                                                                                    
function {:inline} Y_CoarseList.tail(tid : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(CoarseList._state[this], tid) && leq(m#moverPath(ReadEval.CoarseList.tail(tid: Tid,this: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (CoarseList.tail[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_CoarseList.tail(tid : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.tail.Subsumes.W(tid : Tid, u : Tid, this: CoarseList, newValue: Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var newValue_yield: Node;                                                                           
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume isAccessible(CoarseList._state[this], u);                                                   
 assume !isError(m#moverPath(WriteEval.CoarseList.tail(u: Tid,this: CoarseList,newValue: Node,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
                                                                                                    
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList.tail(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.tail.Reflexive(tid : Tid, this: CoarseList , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList.tail(tid, this, CoarseList.tail[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList.tail.Transitive(tid : Tid, this: CoarseList, newValue : Node , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var newValue_pre: Node;                                                                             
var Node._lock_pre: [Node]Tid;                                                                      
var this_pre: CoarseList;                                                                           
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var Node.key_pre: [Node]int;                                                                        
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var this_post: CoarseList;                                                                          
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var newValue_post: Node;                                                                            
var Node.item_post: [Node]int;                                                                      
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_CoarseList.tail(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_CoarseList.tail(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
// CoarseList._lock:                                                                                
                                                                                                    
function {:inline} Y_CoarseList._lock(tid : Tid, this: CoarseList, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 ((isAccessible(CoarseList._state[this], tid) && leq(m#moverPath(ReadEval.CoarseList._lock(tid: Tid,this: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _R)) ==> (CoarseList._lock[this] == newValue))
 &&(((CoarseList._lock[this]==tid)==(newValue==tid)))                                               
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_CoarseList._lock(tid : Tid, this: CoarseList, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_CoarseList._lock.Subsumes.W(tid : Tid, u : Tid, this: CoarseList, newValue: Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var newValue_yield: Tid;                                                                            
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume isAccessible(CoarseList._state[this], u);                                                   
 assume !isError(m#moverPath(WriteEval.CoarseList._lock(u: Tid,this: CoarseList,newValue: Tid,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)));
 assume leq(m#moverPath(ReadEval.CoarseList._lock(tid: Tid,this: CoarseList,Node._state,Node.key,Node.item,Node.next,Node._lock,CoarseList._state,CoarseList.head,CoarseList.tail,CoarseList._lock)), _N);
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList._lock(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList._lock.Reflexive(tid : Tid, this: CoarseList , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node.next_yield: [Node]Node;                                                                    
var CoarseList.head_yield: [CoarseList]Node;                                                        
var CoarseList._lock_yield: [CoarseList]Tid;                                                        
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var CoarseList.tail_yield: [CoarseList]Node;                                                        
var $pc_yield: Phase;                                                                               
var Node.key_yield: [Node]int;                                                                      
var Node._lock_yield: [Node]Tid;                                                                    
var this_yield: CoarseList;                                                                         
var $recorded.state_yield: int;                                                                     
var CoarseList._state_yield: [CoarseList]State;                                                     
                                                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
assume Node._state_yield == Node._state && Node.key_yield == Node.key && Node.item_yield == Node.item && Node.next_yield == Node.next && Node._lock_yield == Node._lock && CoarseList._state_yield == CoarseList._state && CoarseList.head_yield == CoarseList.head && CoarseList.tail_yield == CoarseList.tail && CoarseList._lock_yield == CoarseList._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_CoarseList._lock(tid, this, CoarseList._lock[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
procedure Y_CoarseList._lock.Transitive(tid : Tid, this: CoarseList, newValue : Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid)
 requires StateInvariant(Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
 requires StateInvariant(Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var this_pre: CoarseList;                                                                           
var global_pre: CoarseList;                                                                         
var CoarseList.tail_pre: [CoarseList]Node;                                                          
var $recorded.state_pre: int;                                                                       
var Node.key_pre: [Node]int;                                                                        
var Node._state_pre: [Node]State;                                                                   
var tid_pre: Tid;                                                                                   
var $pc_pre: Phase;                                                                                 
var CoarseList.head_pre: [CoarseList]Node;                                                          
var Node.next_pre: [Node]Node;                                                                      
var CoarseList._lock_pre: [CoarseList]Tid;                                                          
var newValue_pre: Tid;                                                                              
var Node.item_pre: [Node]int;                                                                       
var CoarseList._state_pre: [CoarseList]State;                                                       
                                                                                                    
var CoarseList.head_post: [CoarseList]Node;                                                         
var this_post: CoarseList;                                                                          
var Node.key_post: [Node]int;                                                                       
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var CoarseList.tail_post: [CoarseList]Node;                                                         
var tid_post: Tid;                                                                                  
var CoarseList._lock_post: [CoarseList]Tid;                                                         
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var newValue_post: Tid;                                                                             
var CoarseList._state_post: [CoarseList]State;                                                      
var global_post: CoarseList;                                                                        
                                                                                                    
assume Node._state_pre == Node._state && Node.key_pre == Node.key && Node.item_pre == Node.item && Node.next_pre == Node.next && Node._lock_pre == Node._lock && CoarseList._state_pre == CoarseList._state && CoarseList.head_pre == CoarseList.head && CoarseList.tail_pre == CoarseList.tail && CoarseList._lock_pre == CoarseList._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid && global_pre == global;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(CoarseList._state[this], tid);                                                 
 assume Y(tid , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
 assume Y_CoarseList._lock(tid, this, newValue , Node._state_p, Node.key_p, Node.item_p, Node.next_p, Node._lock_p, CoarseList._state_p, CoarseList.head_p, CoarseList.tail_p, CoarseList._lock_p);
assume Node._state_post == Node._state_p && Node.key_post == Node.key_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node._lock_post == Node._lock_p && CoarseList._state_post == CoarseList._state_p && CoarseList.head_post == CoarseList.head_p && CoarseList.tail_post == CoarseList.tail_p && CoarseList._lock_post == CoarseList._lock_p && newValue_post == newValue && this_post == this && tid_post == tid && global_post == global;
assume $recorded.state_post == 1;                                                                   
 assert Y_CoarseList._lock(tid, this, newValue , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Node._state: [Node]State, Node.key: [Node]int, Node.item: [Node]int, Node.next: [Node]Node, Node._lock: [Node]Tid, CoarseList._state: [CoarseList]State, CoarseList.head: [CoarseList]Node, CoarseList.tail: [CoarseList]Node, CoarseList._lock: [CoarseList]Tid , Node._state_p: [Node]State, Node.key_p: [Node]int, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node._lock_p: [Node]Tid, CoarseList._state_p: [CoarseList]State, CoarseList.head_p: [CoarseList]Node, CoarseList.tail_p: [CoarseList]Node, CoarseList._lock_p: [CoarseList]Tid): bool
{                                                                                                   
 (forall this: Node :: Y_Node.key(tid : Tid, this, Node.key_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: Node :: Y_Node.item(tid : Tid, this, Node.item_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: Node :: Y_Node.next(tid : Tid, this, Node.next_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: Node :: Y_Node._lock(tid : Tid, this, Node._lock_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: CoarseList :: Y_CoarseList.head(tid : Tid, this, CoarseList.head_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: CoarseList :: Y_CoarseList.tail(tid : Tid, this, CoarseList.tail_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall this: CoarseList :: Y_CoarseList._lock(tid : Tid, this, CoarseList._lock_p[this] , Node._state, Node.key, Node.item, Node.next, Node._lock, CoarseList._state, CoarseList.head, CoarseList.tail, CoarseList._lock))
 && (forall _i : Node :: isShared(Node._state[_i]) ==> isShared(Node._state_p[_i]))                 
 && (forall _i : Node :: isLocal(Node._state[_i], tid) <==> isLocal(Node._state_p[_i], tid))        
 && (forall _i : CoarseList :: isShared(CoarseList._state[_i]) ==> isShared(CoarseList._state_p[_i]))
 && (forall _i : CoarseList :: isLocal(CoarseList._state[_i], tid) <==> isLocal(CoarseList._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 894.1-1556.2: (Method:13.5)
// 908.1-908.24: (13.5): Bad tid
// 909.1-909.44: (13.5): this is not global
// 1247.1-1247.14: (13.19): Can only have right-mover memory accesses in requires clause
// 1249.2-1251.2: (class anchor.sink.VarDeclStmt:15.9)
// 1252.2-1254.2: (class anchor.sink.VarDeclStmt:16.9)
// 1255.2-1257.2: (class anchor.sink.VarDeclStmt:17.9)
// 1258.2-1261.14: (class anchor.sink.Assign:17.19)
// 1265.1-1265.34: (18.22): Cannot have potential null deference in left-mover part.
// 1269.1-1269.27: (18.22): Reduction failure
// 1271.2-1288.32: (class anchor.sink.Read:19.13)
// 1283.1-1283.34: (19.13): Cannot have potential null deference in left-mover part.
// 1287.1-1287.27: (19.13): Reduction failure
// 1289.2-1306.26: (class anchor.sink.Read:20.13)
// 1301.1-1301.28: (20.13): Cannot have potential null deference in left-mover part.
// 1305.1-1305.27: (20.13): Reduction failure
// 1307.2-1309.2: (class anchor.sink.VarDeclStmt:21.13)
// 1310.2-1327.29: (class anchor.sink.Read:21.13)
// 1322.1-1322.28: (21.13): Cannot have potential null deference in left-mover part.
// 1326.1-1326.27: (21.13): Reduction failure
// 1328.2-1330.2: (class anchor.sink.VarDeclStmt:22.13)
// 1331.2-1334.22: (class anchor.sink.Assign:22.34)
// 1337.2-1341.11: (class anchor.sink.While:22.41)
// 1343.1-1343.27: (13.5): Bad tid
// 1344.1-1344.47: (13.5): this is not global
// 1346.156-1347.41: (22.41): invariant isShared(curr) may not hold
// 1347.41-1348.41: (22.41): invariant isShared(pred) may not hold
// 1348.41-1349.91: (22.41): invariant holds(this, tid) may not hold
// 1350.1-1350.268: (22.41): Loop does not preserve yields_as annotation for field key
// 1351.1-1351.270: (22.41): Loop does not preserve yields_as annotation for field item
// 1352.1-1352.270: (22.41): Loop does not preserve yields_as annotation for field next
// 1353.1-1353.288: (22.41): Loop does not preserve yields_as annotation for field head
// 1354.1-1354.288: (22.41): Loop does not preserve yields_as annotation for field tail
// 1355.1-1355.32: (22.41): Phase must be invariant at loop head
// 1356.1-1356.30: (22.41): Potentially infinite loop cannot be in post-commit phase.
// 1358.3-1361.16: (class anchor.sink.Assign:26.24)
// 1362.3-1379.27: (class anchor.sink.Read:27.17)
// 1374.1-1374.29: (27.17): Cannot have potential null deference in left-mover part.
// 1378.1-1378.28: (27.17): Reduction failure
// 1380.3-1397.30: (class anchor.sink.Read:28.17)
// 1392.1-1392.29: (28.17): Cannot have potential null deference in left-mover part.
// 1396.1-1396.28: (28.17): Reduction failure
// 1398.3-1401.23: (class anchor.sink.Assign:28.52)
// 1404.1-1404.29: (22.41): Phase must be invariant at loop head
// 1406.2-1409.23: (class anchor.sink.Assign:30.21)
// 1414.1-1414.35: (40.9): Cannot have potential null deference in left-mover part.
// 1416.1-1416.40: (40.9): lock not held
// 1418.1-1418.28: (40.9): Reduction failure
// 1420.3-1426.10: (class anchor.sink.Return:31.17)
// 1428.3-1430.3: (class anchor.sink.VarDeclStmt:33.17)
// 1431.3-1440.40: (class anchor.sink.Alloc:33.17)
// 1442.3-1458.26: (class anchor.sink.Write:34.17)
// 1454.1-1454.29: (34.17): Cannot have potential null deference in left-mover part.
// 1457.1-1457.28: (34.17): Reduction failure
// 1460.3-1476.27: (class anchor.sink.Write:35.17)
// 1472.1-1472.29: (35.17): Cannot have potential null deference in left-mover part.
// 1475.1-1475.28: (35.17): Reduction failure
// 1478.3-1499.3: (class anchor.sink.Write:36.17)
// 1490.1-1490.29: (36.17): Cannot have potential null deference in left-mover part.
// 1493.1-1493.28: (36.17): Reduction failure
// 1497.1-1497.60: (36.17): curr became shared, but curr.next may not be shared.
// 1501.3-1522.3: (class anchor.sink.Write:37.17)
// 1513.1-1513.29: (37.17): Cannot have potential null deference in left-mover part.
// 1516.1-1516.28: (37.17): Reduction failure
// 1520.1-1520.60: (37.17): node became shared, but node.next may not be shared.
// 1526.1-1526.35: (40.9): Cannot have potential null deference in left-mover part.
// 1528.1-1528.40: (40.9): lock not held
// 1530.1-1530.28: (40.9): Reduction failure
// 1532.3-1538.10: (class anchor.sink.Return:38.17)
// 1543.1-1543.34: (40.9): Cannot have potential null deference in left-mover part.
// 1545.1-1545.39: (40.9): lock not held
// 1547.1-1547.27: (40.9): Reduction failure
// 1549.2-1555.9: (class anchor.sink.Return:14.34)
// 1651.1-1651.34: (3.5): Node.key failed Write-Write Right-Mover Check
// 1720.1-1720.30: (3.5): Node.key failed Write-Read Right-Mover Check
// 1793.1-1793.34: (3.5): Node.key failed Write-Write Left-Mover Check
// 1863.1-1863.30: (3.5): Node.key failed Write-Read Left-Mover Check
// 1930.1-1930.34: (3.5): Node.key failed Read-Write Right-Mover Check
// 2000.1-2000.34: (3.5): Node.key failed Read-Write Left-Mover Check
// 2069.1-2069.34: (4.5): Node.item failed Write-Write Right-Mover Check
// 2138.1-2138.30: (4.5): Node.item failed Write-Read Right-Mover Check
// 2211.1-2211.34: (4.5): Node.item failed Write-Write Left-Mover Check
// 2281.1-2281.30: (4.5): Node.item failed Write-Read Left-Mover Check
// 2348.1-2348.34: (4.5): Node.item failed Read-Write Right-Mover Check
// 2418.1-2418.34: (4.5): Node.item failed Read-Write Left-Mover Check
// 2487.1-2487.34: (5.5): Node.next failed Write-Write Right-Mover Check
// 2556.1-2556.30: (5.5): Node.next failed Write-Read Right-Mover Check
// 2629.1-2629.34: (5.5): Node.next failed Write-Write Left-Mover Check
// 2699.1-2699.30: (5.5): Node.next failed Write-Read Left-Mover Check
// 2766.1-2766.34: (5.5): Node.next failed Read-Write Right-Mover Check
// 2836.1-2836.34: (5.5): Node.next failed Read-Write Left-Mover Check
// 2905.1-2905.34: (10.5): CoarseList.head failed Write-Write Right-Mover Check
// 2974.1-2974.30: (10.5): CoarseList.head failed Write-Read Right-Mover Check
// 3047.1-3047.34: (10.5): CoarseList.head failed Write-Write Left-Mover Check
// 3117.1-3117.30: (10.5): CoarseList.head failed Write-Read Left-Mover Check
// 3184.1-3184.34: (10.5): CoarseList.head failed Read-Write Right-Mover Check
// 3254.1-3254.34: (10.5): CoarseList.head failed Read-Write Left-Mover Check
// 3323.1-3323.34: (11.5): CoarseList.tail failed Write-Write Right-Mover Check
// 3392.1-3392.30: (11.5): CoarseList.tail failed Write-Read Right-Mover Check
// 3465.1-3465.34: (11.5): CoarseList.tail failed Write-Write Left-Mover Check
// 3535.1-3535.30: (11.5): CoarseList.tail failed Write-Read Left-Mover Check
// 3602.1-3602.34: (11.5): CoarseList.tail failed Read-Write Right-Mover Check
// 3672.1-3672.34: (11.5): CoarseList.tail failed Read-Write Left-Mover Check
// 3753.1-3753.140: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.1)
// 3754.1-3754.101: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.2)
// 3755.1-3755.158: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case A.3)
// 3866.1-3866.140: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case C)
// 3982.1-3982.144: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case D)
// 3983.1-3983.144: (3.5): Node.key is not Write-Write Stable with respect to Node.key (case R)
// 4064.1-4064.136: (3.5): Node.key is not Read-Write Stable with respect to Node.key (case F)
// 4065.1-4065.136: (3.5): Node.key is not Read-Write Stable with respect to Node.key (case H)
// 4066.1-4066.146: (3.5): Node.key is not Read-Write Stable with respect to Node.key (case I)
// 4146.1-4146.136: (3.5): Node.key is not Write-Read Stable with respect to Node.key (case J)
// 4147.1-4147.136: (3.5): Node.key is not Write-Read Stable with respect to Node.key (case K)
// 4148.1-4148.99: (3.5): Node.key is not Write-Read Stable with respect to Node.key (case L)
// 4230.1-4230.140: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.1)
// 4231.1-4231.101: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.2)
// 4232.1-4232.158: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case A.3)
// 4343.1-4343.140: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case C)
// 4459.1-4459.144: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case D)
// 4460.1-4460.144: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case R)
// 4541.1-4541.136: (3.5): Node.key is not Read-Write Stable with respect to Node.item (case F)
// 4542.1-4542.136: (3.5): Node.key is not Read-Write Stable with respect to Node.item (case H)
// 4543.1-4543.146: (3.5): Node.key is not Read-Write Stable with respect to Node.item (case I)
// 4623.1-4623.136: (4.5): Node.item is not Write-Read Stable with respect to Node.key (case J)
// 4624.1-4624.136: (4.5): Node.item is not Write-Read Stable with respect to Node.key (case K)
// 4625.1-4625.99: (4.5): Node.item is not Write-Read Stable with respect to Node.key (case L)
// 4707.1-4707.140: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.1)
// 4708.1-4708.101: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.2)
// 4709.1-4709.158: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case A.3)
// 4820.1-4820.140: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case C)
// 4936.1-4936.144: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case D)
// 4937.1-4937.144: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case R)
// 5018.1-5018.136: (3.5): Node.key is not Read-Write Stable with respect to Node.next (case F)
// 5019.1-5019.136: (3.5): Node.key is not Read-Write Stable with respect to Node.next (case H)
// 5020.1-5020.146: (3.5): Node.key is not Read-Write Stable with respect to Node.next (case I)
// 5100.1-5100.136: (5.5): Node.next is not Write-Read Stable with respect to Node.key (case J)
// 5101.1-5101.136: (5.5): Node.next is not Write-Read Stable with respect to Node.key (case K)
// 5102.1-5102.99: (5.5): Node.next is not Write-Read Stable with respect to Node.key (case L)
// 5184.1-5184.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.1)
// 5185.1-5185.101: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.2)
// 5186.1-5186.156: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case A.3)
// 5297.1-5297.140: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case C)
// 5413.1-5413.144: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case D)
// 5414.1-5414.144: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case R)
// 5495.1-5495.136: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case F)
// 5496.1-5496.136: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case H)
// 5497.1-5497.144: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.head (case I)
// 5577.1-5577.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case J)
// 5578.1-5578.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case K)
// 5579.1-5579.99: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.key (case L)
// 5661.1-5661.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.1)
// 5662.1-5662.101: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.2)
// 5663.1-5663.156: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case A.3)
// 5774.1-5774.140: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case C)
// 5890.1-5890.144: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case D)
// 5891.1-5891.144: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case R)
// 5972.1-5972.136: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case F)
// 5973.1-5973.136: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case H)
// 5974.1-5974.144: (3.5): Node.key is not Read-Write Stable with respect to CoarseList.tail (case I)
// 6054.1-6054.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case J)
// 6055.1-6055.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case K)
// 6056.1-6056.99: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.key (case L)
// 6138.1-6138.140: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.1)
// 6139.1-6139.101: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.2)
// 6140.1-6140.158: (3.5): Node.key is not Write-Write Stable with respect to Node.item (case A.3)
// 6251.1-6251.140: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case C)
// 6367.1-6367.144: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case D)
// 6368.1-6368.144: (4.5): Node.item is not Write-Write Stable with respect to Node.key (case R)
// 6449.1-6449.136: (4.5): Node.item is not Read-Write Stable with respect to Node.key (case F)
// 6450.1-6450.136: (4.5): Node.item is not Read-Write Stable with respect to Node.key (case H)
// 6451.1-6451.146: (4.5): Node.item is not Read-Write Stable with respect to Node.key (case I)
// 6531.1-6531.136: (3.5): Node.key is not Write-Read Stable with respect to Node.item (case J)
// 6532.1-6532.136: (3.5): Node.key is not Write-Read Stable with respect to Node.item (case K)
// 6533.1-6533.99: (3.5): Node.key is not Write-Read Stable with respect to Node.item (case L)
// 6615.1-6615.140: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.1)
// 6616.1-6616.101: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.2)
// 6617.1-6617.158: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case A.3)
// 6728.1-6728.140: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case C)
// 6844.1-6844.144: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case D)
// 6845.1-6845.144: (4.5): Node.item is not Write-Write Stable with respect to Node.item (case R)
// 6926.1-6926.136: (4.5): Node.item is not Read-Write Stable with respect to Node.item (case F)
// 6927.1-6927.136: (4.5): Node.item is not Read-Write Stable with respect to Node.item (case H)
// 6928.1-6928.146: (4.5): Node.item is not Read-Write Stable with respect to Node.item (case I)
// 7008.1-7008.136: (4.5): Node.item is not Write-Read Stable with respect to Node.item (case J)
// 7009.1-7009.136: (4.5): Node.item is not Write-Read Stable with respect to Node.item (case K)
// 7010.1-7010.99: (4.5): Node.item is not Write-Read Stable with respect to Node.item (case L)
// 7092.1-7092.140: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.1)
// 7093.1-7093.101: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.2)
// 7094.1-7094.158: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case A.3)
// 7205.1-7205.140: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case C)
// 7321.1-7321.144: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case D)
// 7322.1-7322.144: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case R)
// 7403.1-7403.136: (4.5): Node.item is not Read-Write Stable with respect to Node.next (case F)
// 7404.1-7404.136: (4.5): Node.item is not Read-Write Stable with respect to Node.next (case H)
// 7405.1-7405.146: (4.5): Node.item is not Read-Write Stable with respect to Node.next (case I)
// 7485.1-7485.136: (5.5): Node.next is not Write-Read Stable with respect to Node.item (case J)
// 7486.1-7486.136: (5.5): Node.next is not Write-Read Stable with respect to Node.item (case K)
// 7487.1-7487.99: (5.5): Node.next is not Write-Read Stable with respect to Node.item (case L)
// 7569.1-7569.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.1)
// 7570.1-7570.101: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.2)
// 7571.1-7571.156: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case A.3)
// 7682.1-7682.140: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case C)
// 7798.1-7798.144: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case D)
// 7799.1-7799.144: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case R)
// 7880.1-7880.136: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case F)
// 7881.1-7881.136: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case H)
// 7882.1-7882.144: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.head (case I)
// 7962.1-7962.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case J)
// 7963.1-7963.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case K)
// 7964.1-7964.99: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.item (case L)
// 8046.1-8046.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.1)
// 8047.1-8047.101: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.2)
// 8048.1-8048.156: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case A.3)
// 8159.1-8159.140: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case C)
// 8275.1-8275.144: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case D)
// 8276.1-8276.144: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case R)
// 8357.1-8357.136: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case F)
// 8358.1-8358.136: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case H)
// 8359.1-8359.144: (4.5): Node.item is not Read-Write Stable with respect to CoarseList.tail (case I)
// 8439.1-8439.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case J)
// 8440.1-8440.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case K)
// 8441.1-8441.99: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.item (case L)
// 8523.1-8523.140: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.1)
// 8524.1-8524.101: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.2)
// 8525.1-8525.158: (3.5): Node.key is not Write-Write Stable with respect to Node.next (case A.3)
// 8636.1-8636.140: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case C)
// 8752.1-8752.144: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case D)
// 8753.1-8753.144: (5.5): Node.next is not Write-Write Stable with respect to Node.key (case R)
// 8834.1-8834.136: (5.5): Node.next is not Read-Write Stable with respect to Node.key (case F)
// 8835.1-8835.136: (5.5): Node.next is not Read-Write Stable with respect to Node.key (case H)
// 8836.1-8836.146: (5.5): Node.next is not Read-Write Stable with respect to Node.key (case I)
// 8916.1-8916.136: (3.5): Node.key is not Write-Read Stable with respect to Node.next (case J)
// 8917.1-8917.136: (3.5): Node.key is not Write-Read Stable with respect to Node.next (case K)
// 8918.1-8918.99: (3.5): Node.key is not Write-Read Stable with respect to Node.next (case L)
// 9000.1-9000.140: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.1)
// 9001.1-9001.101: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.2)
// 9002.1-9002.158: (4.5): Node.item is not Write-Write Stable with respect to Node.next (case A.3)
// 9113.1-9113.140: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case C)
// 9229.1-9229.144: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case D)
// 9230.1-9230.144: (5.5): Node.next is not Write-Write Stable with respect to Node.item (case R)
// 9311.1-9311.136: (5.5): Node.next is not Read-Write Stable with respect to Node.item (case F)
// 9312.1-9312.136: (5.5): Node.next is not Read-Write Stable with respect to Node.item (case H)
// 9313.1-9313.146: (5.5): Node.next is not Read-Write Stable with respect to Node.item (case I)
// 9393.1-9393.136: (4.5): Node.item is not Write-Read Stable with respect to Node.next (case J)
// 9394.1-9394.136: (4.5): Node.item is not Write-Read Stable with respect to Node.next (case K)
// 9395.1-9395.99: (4.5): Node.item is not Write-Read Stable with respect to Node.next (case L)
// 9477.1-9477.140: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.1)
// 9478.1-9478.101: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.2)
// 9479.1-9479.158: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case A.3)
// 9590.1-9590.140: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case C)
// 9706.1-9706.144: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case D)
// 9707.1-9707.144: (5.5): Node.next is not Write-Write Stable with respect to Node.next (case R)
// 9788.1-9788.136: (5.5): Node.next is not Read-Write Stable with respect to Node.next (case F)
// 9789.1-9789.136: (5.5): Node.next is not Read-Write Stable with respect to Node.next (case H)
// 9790.1-9790.146: (5.5): Node.next is not Read-Write Stable with respect to Node.next (case I)
// 9870.1-9870.136: (5.5): Node.next is not Write-Read Stable with respect to Node.next (case J)
// 9871.1-9871.136: (5.5): Node.next is not Write-Read Stable with respect to Node.next (case K)
// 9872.1-9872.99: (5.5): Node.next is not Write-Read Stable with respect to Node.next (case L)
// 9954.1-9954.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.1)
// 9955.1-9955.101: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.2)
// 9956.1-9956.156: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case A.3)
// 10067.1-10067.140: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case C)
// 10183.1-10183.144: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case D)
// 10184.1-10184.144: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case R)
// 10265.1-10265.136: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case F)
// 10266.1-10266.136: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case H)
// 10267.1-10267.144: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.head (case I)
// 10347.1-10347.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case J)
// 10348.1-10348.136: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case K)
// 10349.1-10349.99: (10.5): CoarseList.head is not Write-Read Stable with respect to Node.next (case L)
// 10431.1-10431.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.1)
// 10432.1-10432.101: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.2)
// 10433.1-10433.156: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case A.3)
// 10544.1-10544.140: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case C)
// 10660.1-10660.144: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case D)
// 10661.1-10661.144: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case R)
// 10742.1-10742.136: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case F)
// 10743.1-10743.136: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case H)
// 10744.1-10744.144: (5.5): Node.next is not Read-Write Stable with respect to CoarseList.tail (case I)
// 10824.1-10824.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case J)
// 10825.1-10825.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case K)
// 10826.1-10826.99: (11.5): CoarseList.tail is not Write-Read Stable with respect to Node.next (case L)
// 10908.1-10908.140: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.1)
// 10909.1-10909.101: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.2)
// 10910.1-10910.156: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.head (case A.3)
// 11021.1-11021.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case C)
// 11137.1-11137.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case D)
// 11138.1-11138.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.key (case R)
// 11219.1-11219.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case F)
// 11220.1-11220.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case H)
// 11221.1-11221.144: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.key (case I)
// 11301.1-11301.136: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case J)
// 11302.1-11302.136: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case K)
// 11303.1-11303.99: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.head (case L)
// 11385.1-11385.140: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.1)
// 11386.1-11386.101: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.2)
// 11387.1-11387.156: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.head (case A.3)
// 11498.1-11498.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case C)
// 11614.1-11614.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case D)
// 11615.1-11615.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.item (case R)
// 11696.1-11696.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case F)
// 11697.1-11697.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case H)
// 11698.1-11698.144: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.item (case I)
// 11778.1-11778.136: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case J)
// 11779.1-11779.136: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case K)
// 11780.1-11780.99: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.head (case L)
// 11862.1-11862.140: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.1)
// 11863.1-11863.101: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.2)
// 11864.1-11864.156: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.head (case A.3)
// 11975.1-11975.140: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case C)
// 12091.1-12091.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case D)
// 12092.1-12092.144: (10.5): CoarseList.head is not Write-Write Stable with respect to Node.next (case R)
// 12173.1-12173.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case F)
// 12174.1-12174.136: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case H)
// 12175.1-12175.144: (10.5): CoarseList.head is not Read-Write Stable with respect to Node.next (case I)
// 12255.1-12255.136: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case J)
// 12256.1-12256.136: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case K)
// 12257.1-12257.99: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.head (case L)
// 12339.1-12339.140: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.1)
// 12340.1-12340.101: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.2)
// 12341.1-12341.158: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case A.3)
// 12452.1-12452.140: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case C)
// 12568.1-12568.144: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case D)
// 12569.1-12569.144: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.head (case R)
// 12650.1-12650.136: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case F)
// 12651.1-12651.136: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case H)
// 12652.1-12652.146: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.head (case I)
// 12732.1-12732.136: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case J)
// 12733.1-12733.136: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case K)
// 12734.1-12734.99: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.head (case L)
// 12816.1-12816.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.1)
// 12817.1-12817.101: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.2)
// 12818.1-12818.158: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case A.3)
// 12929.1-12929.140: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case C)
// 13045.1-13045.144: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case D)
// 13046.1-13046.144: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case R)
// 13127.1-13127.136: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case F)
// 13128.1-13128.136: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case H)
// 13129.1-13129.146: (10.5): CoarseList.head is not Read-Write Stable with respect to CoarseList.tail (case I)
// 13209.1-13209.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case J)
// 13210.1-13210.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case K)
// 13211.1-13211.99: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.head (case L)
// 13293.1-13293.140: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.1)
// 13294.1-13294.101: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.2)
// 13295.1-13295.156: (3.5): Node.key is not Write-Write Stable with respect to CoarseList.tail (case A.3)
// 13406.1-13406.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case C)
// 13522.1-13522.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case D)
// 13523.1-13523.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.key (case R)
// 13604.1-13604.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case F)
// 13605.1-13605.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case H)
// 13606.1-13606.144: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.key (case I)
// 13686.1-13686.136: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case J)
// 13687.1-13687.136: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case K)
// 13688.1-13688.99: (3.5): Node.key is not Write-Read Stable with respect to CoarseList.tail (case L)
// 13770.1-13770.140: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.1)
// 13771.1-13771.101: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.2)
// 13772.1-13772.156: (4.5): Node.item is not Write-Write Stable with respect to CoarseList.tail (case A.3)
// 13883.1-13883.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case C)
// 13999.1-13999.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case D)
// 14000.1-14000.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.item (case R)
// 14081.1-14081.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case F)
// 14082.1-14082.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case H)
// 14083.1-14083.144: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.item (case I)
// 14163.1-14163.136: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case J)
// 14164.1-14164.136: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case K)
// 14165.1-14165.99: (4.5): Node.item is not Write-Read Stable with respect to CoarseList.tail (case L)
// 14247.1-14247.140: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.1)
// 14248.1-14248.101: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.2)
// 14249.1-14249.156: (5.5): Node.next is not Write-Write Stable with respect to CoarseList.tail (case A.3)
// 14360.1-14360.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case C)
// 14476.1-14476.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case D)
// 14477.1-14477.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to Node.next (case R)
// 14558.1-14558.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case F)
// 14559.1-14559.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case H)
// 14560.1-14560.144: (11.5): CoarseList.tail is not Read-Write Stable with respect to Node.next (case I)
// 14640.1-14640.136: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case J)
// 14641.1-14641.136: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case K)
// 14642.1-14642.99: (5.5): Node.next is not Write-Read Stable with respect to CoarseList.tail (case L)
// 14724.1-14724.140: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.1)
// 14725.1-14725.101: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.2)
// 14726.1-14726.158: (10.5): CoarseList.head is not Write-Write Stable with respect to CoarseList.tail (case A.3)
// 14837.1-14837.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case C)
// 14953.1-14953.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case D)
// 14954.1-14954.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.head (case R)
// 15035.1-15035.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case F)
// 15036.1-15036.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case H)
// 15037.1-15037.146: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.head (case I)
// 15117.1-15117.136: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case J)
// 15118.1-15118.136: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case K)
// 15119.1-15119.99: (10.5): CoarseList.head is not Write-Read Stable with respect to CoarseList.tail (case L)
// 15201.1-15201.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.1)
// 15202.1-15202.101: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.2)
// 15203.1-15203.158: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case A.3)
// 15314.1-15314.140: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case C)
// 15430.1-15430.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case D)
// 15431.1-15431.144: (11.5): CoarseList.tail is not Write-Write Stable with respect to CoarseList.tail (case R)
// 15512.1-15512.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case F)
// 15513.1-15513.136: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case H)
// 15514.1-15514.146: (11.5): CoarseList.tail is not Read-Write Stable with respect to CoarseList.tail (case I)
// 15594.1-15594.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case J)
// 15595.1-15595.136: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case K)
// 15596.1-15596.99: (11.5): CoarseList.tail is not Write-Read Stable with respect to CoarseList.tail (case L)
// 15633.1-15658.2: (3.5): yields_as clause for Node.key is not valid
// 15663.1-15683.2: (3.5): yields_as clause for Node.key is not reflexive
// 15689.1-15731.2: (3.5): yields_as clause for Node.key is not transitive
// 15750.1-15775.2: (4.5): yields_as clause for Node.item is not valid
// 15780.1-15800.2: (4.5): yields_as clause for Node.item is not reflexive
// 15806.1-15848.2: (4.5): yields_as clause for Node.item is not transitive
// 15867.1-15892.2: (5.5): yields_as clause for Node.next is not valid
// 15897.1-15917.2: (5.5): yields_as clause for Node.next is not reflexive
// 15923.1-15965.2: (5.5): yields_as clause for Node.next is not transitive
// 15985.1-16010.2: (7.32): yields_as clause for Node._lock is not valid
// 16015.1-16035.2: (7.32): yields_as clause for Node._lock is not reflexive
// 16041.1-16083.2: (7.32): yields_as clause for Node._lock is not transitive
// 16102.1-16127.2: (10.5): yields_as clause for CoarseList.head is not valid
// 16132.1-16152.2: (10.5): yields_as clause for CoarseList.head is not reflexive
// 16158.1-16200.2: (10.5): yields_as clause for CoarseList.head is not transitive
// 16219.1-16244.2: (11.5): yields_as clause for CoarseList.tail is not valid
// 16249.1-16269.2: (11.5): yields_as clause for CoarseList.tail is not reflexive
// 16275.1-16317.2: (11.5): yields_as clause for CoarseList.tail is not transitive
// 16337.1-16362.2: (7.32): yields_as clause for CoarseList._lock is not valid
// 16367.1-16387.2: (7.32): yields_as clause for CoarseList._lock is not reflexive
// 16393.1-16435.2: (7.32): yields_as clause for CoarseList._lock is not transitive
